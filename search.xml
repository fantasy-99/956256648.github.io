<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>考研科普</title>
      <link href="/2022/09/03/%E7%A0%94%E6%8B%9B/%E8%80%83%E7%A0%94%E7%A7%91%E6%99%AE/"/>
      <url>/2022/09/03/%E7%A0%94%E6%8B%9B/%E8%80%83%E7%A0%94%E7%A7%91%E6%99%AE/</url>
      
        <content type="html"><![CDATA[        <h1 id="关键节点"   >          <a href="#关键节点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#关键节点"></a> 关键节点</h1>      <div class="table-container"><table><thead><tr><th>事件</th><th>时间</th></tr></thead><tbody><tr><td>报名和预报名</td><td>9月-10月</td></tr><tr><td>现场及网上确认</td><td>11月</td></tr><tr><td>打印准考证</td><td>12月</td></tr><tr><td>初试成绩</td><td>2月</td></tr><tr><td>复试</td><td>3月-4月</td></tr><tr><td>录取</td><td>6月</td></tr><tr><td>报到</td><td>9月</td></tr></tbody></table></div>        <h1 id="常见信息网站"   >          <a href="#常见信息网站" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#常见信息网站"></a> 常见信息网站</h1>      <div class="table-container"><table><thead><tr><th>网站</th><th>网址</th></tr></thead><tbody><tr><td>研招网（官网，报名调剂都在这）</td><td><span class="exturl"><a class="exturl__link"   href="https://yz.chsi.com.cn/" >https://yz.chsi.com.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>中国教育在线（国家线，备考，考研大纲，报考录取，考研资料、经验）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.eol.cn/" >https://www.eol.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>中国学位研究生教育信息网（各专业排名情况）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.chinadegrees.cn/" >https://www.chinadegrees.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>相应院校官网和公众号</td><td></td></tr><tr><td>考研帮app（学校报录比以及其它信息）</td><td></td></tr></tbody></table></div>        <h1 id="考研大纲"   >          <a href="#考研大纲" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#考研大纲"></a> 考研大纲</h1>      <p>政治有较大变化，英语也有部分变化，408大纲无变化，可多注意去年新增内容。</p>        <h1 id="数据结构复习"   >          <a href="#数据结构复习" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据结构复习"></a> 数据结构复习</h1>              <h2 id="分数占比"   >          <a href="#分数占比" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#分数占比"></a> 分数占比</h2>      <p>分数：45分</p><p>1-10数据结构部分：20分</p><p>41、42代码题：10分、15分</p>        <h2 id="c语言基础"   >          <a href="#c语言基础" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#c语言基础"></a> C语言基础？</h2>      <p>不需要太多，数组、指针、结构体。</p><p>了解如何定义使用即可。</p>        <h2 id="视频-辅助工具"   >          <a href="#视频-辅助工具" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#视频-辅助工具"></a> 视频、辅助工具</h2>      <p>视频：青岛大学王卓，浙大数据结构和算法</p><p>辅助工具：<span class="exturl"><a class="exturl__link"   href="https://iacj.github.io/react-datastructer/#/" >数据结构在线模拟器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>、<span class="exturl"><a class="exturl__link"   href="https://visualgo.net/zh" >visualgo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="操作系统复习"   >          <a href="#操作系统复习" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作系统复习"></a> 操作系统复习</h1>              <h2 id="分数占比-2"   >          <a href="#分数占比-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#分数占比-2"></a> 分数占比</h2>      <p>分数：35分</p><p>23-32选择题：20分</p><p>45、46应用题：7分、8分</p>        <h2 id="四大模块"   >          <a href="#四大模块" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四大模块"></a> 四大模块</h2>      <p>内存管理（较难），进程管理，文件系统管理，IO设备</p>        <h2 id="虚拟概念"   >          <a href="#虚拟概念" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#虚拟概念"></a> 虚拟概念</h2>      <p>虚拟内存、虚拟文件系统。</p><p>虚拟：向下屏蔽差异，向上提供接口。</p>        <h2 id="大题"   >          <a href="#大题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#大题"></a> 大题</h2>      <p>PV操作，内存管理，文件管理。</p><p>和计组密切相关：PV操作，内存地址转换，磁盘IO。</p><p>其实就是进程，文件，内存。</p>        <h1 id="计组复习"   >          <a href="#计组复习" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#计组复习"></a> 计组复习</h1>              <h2 id="分数占比-3"   >          <a href="#分数占比-3" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#分数占比-3"></a> 分数占比</h2>      <p>分数：45分</p><p>11-22选择题：24分</p><p>43、44大题：8分、13分</p>        <h1 id="计算机网络"   >          <a href="#计算机网络" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#计算机网络"></a> 计算机网络</h1>              <h2 id="分数占比-4"   >          <a href="#分数占比-4" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#分数占比-4"></a> 分数占比</h2>      <p>分数：25分</p><p>33-40选择题：16分</p><p>47大题：9分</p>        <h2 id="报文格式大全"   >          <a href="#报文格式大全" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#报文格式大全"></a> 报文格式大全</h2>      <p>公众号下载一下</p>        <h1 id="考408的院校和研究所"   >          <a href="#考408的院校和研究所" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#考408的院校和研究所"></a> 考408的院校和研究所</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://docs.qq.com/sheet/DQUlua25OUHFUdld1?tab=BB08J2&amp;_t=1663765898162&amp;u=9266cbae92e54a26b1f1a4a52d921c68" >408考研学校</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://docs.qq.com/sheet/DQVV4SG5qWURscE1o?tab=BB08J2&amp;u=6930d10de55b4e1092d719f7d620ad7e" >热门学校招生目录</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://docs.qq.com/sheet/DVGh0WlNHTmNCUlNH?tab=BB08J3&amp;u=6930d10de55b4e1092d719f7d620ad7e" >22初试分数线</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/553711952" >研究所</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="211"   >          <a href="#211" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#211"></a> 211</h2>      <div class="table-container"><table><thead><tr><th style="text-align:center">院校</th><th>去年（2022）考情</th><th>今年（2023）招生目录</th><th>备注（22年情况，仅表个人看法）</th></tr></thead><tbody><tr><td style="text-align:center">海南大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUxOTk=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUxOTk=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>不太值得考的就未搜集额外信息，以下同理</td><td>初复试73开，评级C-，不如湘大</td></tr><tr><td style="text-align:center">北京邮电大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM2OTY=" >https://www.kdocs.cn/square/file/MjM2OTY=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>评级A，难考</td></tr><tr><td style="text-align:center">宁夏大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyNzE=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyNzE=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>不如湘大</td></tr><tr><td style="text-align:center">贵州大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3MTM=" >https://www.kdocs.cn/square/file/MjM3MTM=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://gs.gzu.edu.cn/sszs/list.htm" >http://gs.gzu.edu.cn/sszs/list.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>只收二二408大数据类专硕，初复试55开</td></tr><tr><td style="text-align:center">青海大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUxNTE=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUxNTE=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>无评级</td></tr><tr><td style="text-align:center">上海大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3Nzk" >https://www.kdocs.cn/square/file/MjM3Nzk</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://yjszs.shu.edu.cn/zsjz/sszsjz.htm" >https://yjszs.shu.edu.cn/zsjz/sszsjz.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>去年总分=初试分+复试分，复试影响较大</td></tr><tr><td style="text-align:center">郑州大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3NzE=" >https://www.kdocs.cn/square/file/MjM3NzE=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://gs.zzu.edu.cn/zsgz/zxtz.htm" >http://gs.zzu.edu.cn/zsgz/zxtz.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>C+，据说考的人比较多</td></tr><tr><td style="text-align:center">云南大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM2MzM=" >https://www.kdocs.cn/square/file/MjM2MzM=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>太偏了</td></tr><tr><td style="text-align:center">河北工业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3MTE=" >https://www.kdocs.cn/square/file/MjM3MTE=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://yjs.hebut.edu.cn/zsgz/ssyjszszl/index.htm" >https://yjs.hebut.edu.cn/zsgz/ssyjszszl/index.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>略强于湘大，初复试百分制五五开</td></tr><tr><td style="text-align:center">华中农业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyMzc=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyMzc=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>不如湘大</td></tr><tr><td style="text-align:center">西南财经大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyMDc=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyMDc=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>招生不多，计算机不如湘大，与经济有交叉</td></tr><tr><td style="text-align:center">武汉理工大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwMjg=" >https://www.kdocs.cn/square/file/MjQwMjg=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://gd.whut.edu.cn/zs/zsjz/" >http://gd.whut.edu.cn/zs/zsjz/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>不错，有一定难度</td></tr><tr><td style="text-align:center">北京工业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwNDI=" >https://www.kdocs.cn/square/file/MjQwNDI=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://yanzhao.bjut.edu.cn/" >https://yanzhao.bjut.edu.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>B+，初复试五五开，难</td></tr><tr><td style="text-align:center">福州大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM5MTU=" >https://www.kdocs.cn/square/file/MjM5MTU=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://yjsy.fzu.edu.cn/index/zsjz.htm" >https://yjsy.fzu.edu.cn/index/zsjz.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>初复试七三开，还可以</td></tr><tr><td style="text-align:center">南昌大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwMzM=" >https://www.kdocs.cn/square/file/MjQwMzM=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://yjsy.ncu.edu.cn/" >http://yjsy.ncu.edu.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>C+，去年招生情况还可以，初复六四开</td></tr><tr><td style="text-align:center">华北电力大学（保定校区）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwMzU=" >https://www.kdocs.cn/square/file/MjQwMzU=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://gs.ncepu.edu.cn/zsxx/zxxx2/index.htm" >https://gs.ncepu.edu.cn/zsxx/zxxx2/index.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>分不算高，报录比有点高，不太友好的样子</td></tr><tr><td style="text-align:center">华北电力（北京校区）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM2OTk" >https://www.kdocs.cn/square/file/MjM2OTk</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>和上面差不多</td></tr><tr><td style="text-align:center">上海财经大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM2OTU" >https://www.kdocs.cn/square/file/MjM2OTU</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>招人较少，去年考研总共收了9个</td></tr><tr><td style="text-align:center">北京林业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwMjU=" >https://www.kdocs.cn/square/file/MjQwMjU=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>不咋样，学科没评级</td></tr><tr><td style="text-align:center">辽宁大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwNTM=" >https://www.kdocs.cn/square/file/MjQwNTM=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>无评级</td></tr><tr><td style="text-align:center">大连海事大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwNDc=" >https://www.kdocs.cn/square/file/MjQwNDc=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://www.dlmu.edu.cn/zsjy/yjszs.htm" >https://www.dlmu.edu.cn/zsjy/yjszs.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>在辽宁，B，看着还行，初+复</td></tr><tr><td style="text-align:center">中国地质大学（北京）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyNjQ=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyNjQ=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>招人少，复试不咋样，达咩</td></tr><tr><td style="text-align:center">石河子大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyNDE=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyNDE=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>。。。</td></tr><tr><td style="text-align:center">合肥工业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3NDI=" >https://www.kdocs.cn/square/file/MjM3NDI=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://yjszs.hfut.edu.cn/13533/list.htm" >http://yjszs.hfut.edu.cn/13533/list.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>B+，不错的211，去年不少人去了，新改408</td></tr><tr><td style="text-align:center">北京体育大学</td><td></td><td></td><td>未查</td></tr><tr><td style="text-align:center">中国矿业大学（徐州）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwNjA=" >https://www.kdocs.cn/square/file/MjQwNjA=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://yjsb.cumt.edu.cn/sszs/list.htm" >http://yjsb.cumt.edu.cn/sszs/list.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>B，新改408，江苏，招人不很多，新改408</td></tr><tr><td style="text-align:center">中国矿业（北京）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM2OTg=" >https://www.kdocs.cn/square/file/MjM2OTg=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>报录比不太好</td></tr><tr><td style="text-align:center">南京理工大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwMzA=" >https://www.kdocs.cn/square/file/MjQwMzA=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://gs.njust.edu.cn/" >https://gs.njust.edu.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>B+，挺好的，新改408</td></tr><tr><td style="text-align:center">中国石油大学（华东）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM2OTM=" >https://www.kdocs.cn/square/file/MjM2OTM=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://zs.gs.upc.edu.cn/sszs/list.htm" >http://zs.gs.upc.edu.cn/sszs/list.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>山东，B-，一般吧，复试貌似不很友好，新改408</td></tr><tr><td style="text-align:center">华中师范大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3NDg=" >https://www.kdocs.cn/square/file/MjM3NDg=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>B-，看着挺好，新改408</td></tr><tr><td style="text-align:center">华南师范大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUxODM=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUxODM=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>刷人挺多，无评级</td></tr><tr><td style="text-align:center">中国地质大学（武汉）</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyNTQ=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyNTQ=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>B，去年刷人不少，一会看看今年招生人数，新改408</td></tr><tr><td style="text-align:center">中国传媒大学</td><td></td><td><span class="exturl"><a class="exturl__link"   href="http://yz.cuc.edu.cn/" >http://yz.cuc.edu.cn/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>招人不多，也可了解下</td></tr></tbody></table></div>        <h2 id="双非"   >          <a href="#双非" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#双非"></a> 双非</h2>      <div class="table-container"><table><thead><tr><th>院校</th><th>去年（2022）考情</th><th>今年（2023）招生目录</th><th>备注（22年情况，仅表个人看法）</th></tr></thead><tbody><tr><td>深圳大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3NjI=" >https://www.kdocs.cn/square/file/MjM3NjI=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://yz.szu.edu.cn/sszs/gg.htm" >https://yz.szu.edu.cn/sszs/gg.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>计算机院太卷，交叉院系还可以</td></tr><tr><td>杭州电子科技大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyNzI=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyNzI=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://grs.hdu.edu.cn/1708/list.htm" >https://grs.hdu.edu.cn/1708/list.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>B+，双非中计算机强校</td></tr><tr><td>南方科技大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3NjQ" >https://www.kdocs.cn/square/file/MjM3NjQ</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>很难，不考虑</td></tr><tr><td>广州大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyMjE=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyMjE=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://yjsy.gzhu.edu.cn/zsxx/zsdt.htm" >http://yjsy.gzhu.edu.cn/zsxx/zsdt.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>有钱，无评级，可以看</td></tr><tr><td>中国民航大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUxMDg=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUxMDg=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://www.cauc.edu.cn/yjsy/zsgz/sszs.htm" >https://www.cauc.edu.cn/yjsy/zsgz/sszs.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>C+，去年有人调剂？</td></tr><tr><td>杭州师范大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUyMDk=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUyMDk=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>报就收？</td></tr><tr><td>浙江工业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/l/cnr3hOhQfp1e" >https://www.kdocs.cn/l/cnr3hOhQfp1e</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="http://www.yz.zjut.edu.cn/4269/list.htm" >http://www.yz.zjut.edu.cn/4269/list.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>B，马马虎虎，改考408</td></tr><tr><td>华南农业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3NjU" >https://www.kdocs.cn/square/file/MjM3NjU</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>去年刷的人不少</td></tr><tr><td>广东工业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3MjM=" >https://www.kdocs.cn/square/file/MjM3MjM=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>和湘大水平差不多吧，地域优势</td></tr><tr><td>浙江理工大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/l/cs5uPemgiqqS" >https://www.kdocs.cn/l/cs5uPemgiqqS</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td><span class="exturl"><a class="exturl__link"   href="https://gradadmission.zstu.edu.cn/bkzx.htm" >https://gradadmission.zstu.edu.cn/bkzx.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td>C+</td></tr><tr><td>天津工业大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUxMTU=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUxMTU=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>B-，初复七三开</td></tr><tr><td>宁波大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjQwNjc=" >https://www.kdocs.cn/square/file/MjQwNjc=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>马马虎虎吧，省内不如杭电和浙工</td></tr><tr><td>浙江师范大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3NDQ=" >https://www.kdocs.cn/square/file/MjM3NDQ=</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>C+</td></tr><tr><td>温州大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjUxNTM=?su=3q5u8h" >https://www.kdocs.cn/square/file/MjUxNTM=?su=3q5u8h</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>C+</td></tr><tr><td>华侨大学</td><td><span class="exturl"><a class="exturl__link"   href="https://www.kdocs.cn/square/file/MjM3MDQ" >https://www.kdocs.cn/square/file/MjM3MDQ</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td><td></td><td>不如湘大</td></tr></tbody></table></div>        <h2 id="研究所"   >          <a href="#研究所" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#研究所"></a> 研究所</h2>      <div class="table-container"><table><thead><tr><th>所名</th><th>网址</th><th>备注</th></tr></thead><tbody><tr><td>计算机技术研究所（北京）</td><td>太难考的就不多搜了，也不放网址了</td><td></td></tr><tr><td>软件研究所（北京）</td><td></td><td></td></tr><tr><td>深圳先进技术研究院（深圳）</td><td></td><td></td></tr><tr><td>未来技术研究院（北京）</td><td></td><td></td></tr><tr><td>沈阳计算技术研究所（沈阳）</td><td></td><td></td></tr><tr><td>计算机网络信息中心（北京）</td><td></td><td></td></tr><tr><td>信息工程研究所（北京）</td><td></td><td></td></tr><tr><td>数学与系统科学研究院（北京）</td><td></td><td></td></tr><tr><td>高能物理研究所（北京）</td><td></td><td></td></tr><tr><td>新疆理化技术研究所（新疆）</td><td></td><td></td></tr><tr><td>国家空间科学中心（北京）</td><td></td><td></td></tr><tr><td>计算机科学与技术学院（北京）</td><td></td><td></td></tr><tr><td>工程科学学院（北京）</td><td></td><td></td></tr><tr><td>沈阳计算技术研究所（沈阳）</td><td></td><td></td></tr><tr><td>自动化研究所（北京）</td><td></td><td></td></tr><tr><td>沈阳自动化研究所（沈阳）</td><td></td><td></td></tr><tr><td>成都计算机应用研究所（成都）</td><td></td><td></td></tr><tr><td>空间应用工程与技术中心（北京）</td><td></td><td></td></tr><tr><td>微小卫星创新研究院（上海）</td><td></td><td></td></tr><tr><td>中国科学院微电子学院（北京）</td><td></td><td></td></tr><tr><td>空天信息创新研究院（北京）</td><td></td><td></td></tr><tr><td>中国科学院人工智能学院（北京）</td><td></td><td>以上都是中国科学院系统下</td></tr><tr><td>中国航空研究院631所（西安）</td><td></td><td></td></tr><tr><td>中国工程物理研究院计算机应用研究所（北京）</td><td></td><td></td></tr><tr><td>西安微电子技术研究所</td><td></td><td></td></tr><tr><td>中国运载火箭技术研究所（北京）</td><td></td><td></td></tr><tr><td>武汉数字工程技术研究所</td><td></td><td></td></tr><tr><td>中国航天科工集团第二研究院（北京）</td><td></td><td></td></tr><tr><td>中国电力科学研究院（北京）</td><td></td><td></td></tr><tr><td>西南自动化研究所（四川绵阳）</td><td></td><td></td></tr><tr><td>华北计算技术研究所（北京）</td><td></td><td>以下3个都是中国电子科技集团</td></tr><tr><td>华东计算技术研究所（上海）</td><td></td><td></td></tr><tr><td>石家庄通信测控技术研究所</td><td></td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 研招 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀脚本</title>
      <link href="/2022/08/30/Python/%E7%A7%92%E6%9D%80%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/08/30/Python/%E7%A7%92%E6%9D%80%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>写了个tb秒杀脚本，其实就是个机器人，用处没那么大，只能说是超过了90%的普通用户。之后写写抢劵的脚本。</p><p>1、先看一下浏览器的脚本，下载对应版本的ChromeDriver（这个是谷歌浏览器的，火狐下对应的插件）</p><p>2、安装Seleuinm库</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sleep是防止网页还没加载出来就执行下一步操作。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># import win32com.client</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># speaker = win32com.client.Dispatch(&quot;SAPI.SpVoice&quot;)</span></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;https://www.taobao.com&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">browser.find_element_by_link_text(<span class="string">&quot;亲，请登录&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&quot;https://cart.taobao.com/cart.htm&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> browser.find_element_by_id(<span class="string">&quot;J_SelectAll1&quot;</span>):</span><br><span class="line">        browser.find_element_by_id(<span class="string">&quot;J_SelectAll1&quot;</span>).click()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">times = <span class="string">&#x27;2022-08-26 20:03:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)</span><br><span class="line">    print(now)</span><br><span class="line">    <span class="keyword">if</span> now &gt; times:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> browser.find_element_by_id(<span class="string">&quot;J_Go&quot;</span>):</span><br><span class="line">                    browser.find_element_by_id(<span class="string">&quot;J_Go&quot;</span>).click()</span><br><span class="line">                    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">                    browser.find_element_by_id(<span class="string">&quot;J_Go&quot;</span>).click()</span><br><span class="line">                    browser.find_element_by_id(<span class="string">&quot;J_Go&quot;</span>).click()</span><br><span class="line">                    print(<span class="string">f&quot;已抢到，请及时支付订单&quot;</span>)</span><br><span class="line">                    <span class="keyword">while</span> now &gt; times:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            <span class="keyword">if</span> browser.find_element_by_class_name(<span class="string">&#x27;go-btn&#x27;</span>):</span><br><span class="line">                                browser.find_element_by_class_name(<span class="string">&#x27;go-btn&#x27;</span>).click()</span><br><span class="line">                                print(<span class="string">f&quot;请支付&quot;</span>)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 秒杀脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习</title>
      <link href="/2022/08/20/Python/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/08/20/Python/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>简单学下爬虫，首先要明确一点，爬虫不是非得用python写，只是由于其学起来简单，写爬虫也方便，所以常常用python写爬虫。另外，相关的库也很多，比较方便。</p><p>robots.txt协议是一个君子协议，规定了网站中哪些数据可以爬，哪些不可以爬。</p>        <h1 id="web请求过程"   >          <a href="#web请求过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#web请求过程"></a> Web请求过程</h1>              <h2 id="服务器渲染"   >          <a href="#服务器渲染" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#服务器渲染"></a> 服务器渲染</h2>      <p>在服务器那边直接把数据和HTML整合到一起，统一返回给浏览器，在页面源代码中能看到数据</p>        <h2 id="客户端渲染"   >          <a href="#客户端渲染" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#客户端渲染"></a> 客户端渲染</h2>      <p>第一次请求智能拿到一个HTML骨架，第二次请求能拿到数据，拼接之后才能正确显示。在页面源代码中看不到数据。</p>        <h1 id="http协议"   >          <a href="#http协议" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#http协议"></a> HTTP协议</h1>              <h2 id="请求"   >          <a href="#请求" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#请求"></a> 请求</h2>      <p>请求行：请求方式（get/post） 请求url地址，协议</p><p>请求头：放一些服务器要使用的附加信息</p><p>请求体：一般放一些请求参数</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET：显示提交（一般查询东西的时候用）</span><br><span class="line">POST：隐式提交（一般在修改的时候用）</span><br></pre></td></tr></table></div></figure>        <h2 id="请求头里的重要内容"   >          <a href="#请求头里的重要内容" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#请求头里的重要内容"></a> 请求头里的重要内容</h2>      <p>User-Agent：请求载体的身份标识（用什么发送的请求，涉及到电脑、浏览器等信息）</p><p>Referer：防盗链（这个请求是从哪个页面来的？反爬会用到）</p><p>cookie：本地字符串数据信息（用户登录信息，反爬的token）</p>        <h2 id="响应"   >          <a href="#响应" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#响应"></a> 响应</h2>      <p>状态行：协议，状态码</p><p>响应头：放一些客户端要用的附加信息</p><p>响应体：服务器返回客户端真正要的内容</p>        <h2 id="响应头里的重要内容"   >          <a href="#响应头里的重要内容" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#响应头里的重要内容"></a> 响应头里的重要内容</h2>      <p>cookie：本地字符串数据信息（用户登录信息，反爬的token）</p><p>各种神奇的字符串，一般都是token字样，用于防止攻击和反爬</p>        <h1 id="requests入门"   >          <a href="#requests入门" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#requests入门"></a> requests入门</h1>      <p>requests是第三方库，需要安装</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发送post请求，发送的数据必须在字典中，通过data参数进行传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#百度翻译</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span></span><br><span class="line">dic = &#123;<span class="comment">#参数</span></span><br><span class="line">    <span class="string">&quot;kw&quot;</span>: <span class="string">&quot;dog&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.post(url, data=dic)</span><br><span class="line"></span><br><span class="line">print(resp.json())  <span class="comment">#json格式</span></span><br><span class="line">resp.close()</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get请求，参数是params</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#豆瓣分类排行榜</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/j/chart/top_list&quot;</span></span><br><span class="line">param = &#123;  <span class="comment">#get的参数</span></span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;interval_id&quot;</span>: <span class="string">&quot;100:90&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;limit&quot;</span>: <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">print(resp.json())</span><br><span class="line">resp.close()</span><br></pre></td></tr></table></div></figure>        <h1 id="正则表达式re"   >          <a href="#正则表达式re" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#正则表达式re"></a> 正则表达式RE</h1>      <p>常用元字符：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.匹配除换行符以外的任意字符</span><br><span class="line">\w匹配字母或数字或下划线</span><br><span class="line">\s匹配任意的空白符</span><br><span class="line">\d匹配数字</span><br><span class="line">\n匹配一个换行符</span><br><span class="line">\t匹配一个制表符</span><br><span class="line"></span><br><span class="line">^匹配字符串的开始</span><br><span class="line">$匹配字符串的结尾</span><br><span class="line"></span><br><span class="line">\W匹配非字母或数字或下划线</span><br><span class="line">\D匹配非数字</span><br><span class="line">\S匹配非空白符</span><br><span class="line"></span><br><span class="line">a|b匹配字符a或字符b</span><br><span class="line">()匹配括号内的表达式，也表示一个组</span><br><span class="line">[...]匹配字符串中的字符</span><br><span class="line">[^...]匹配除了字符组中字符的所有字符</span><br></pre></td></tr></table></div></figure><p>量词，控制前面的元字符出现的次数</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*重复<span class="number">0</span>次或更多次</span><br><span class="line">+重复<span class="number">1</span>次或更多次</span><br><span class="line">?重复0次或1次</span><br><span class="line">&#123;n&#125;重复n次</span><br><span class="line">&#123;n,&#125;重复n次或更多次</span><br><span class="line">&#123;n,m&#125;重复n~m次</span><br></pre></td></tr></table></div></figure><p>贪婪匹配和惰性匹配</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#会使内容尽可能长</span></span><br><span class="line">.*贪婪匹配</span><br><span class="line"></span><br><span class="line"><span class="comment">#会使内容尽可能短，回溯</span></span><br><span class="line">.*?惰性匹配</span><br><span class="line"></span><br><span class="line"><span class="comment">#比如下面这句话，两个正则式子结果不同</span></span><br><span class="line">玩好玩的游戏,什么游戏,吃鸡游戏!</span><br><span class="line"></span><br><span class="line">好玩.*游戏</span><br><span class="line">好玩.*?游戏</span><br></pre></td></tr></table></div></figure>        <h1 id="re模块"   >          <a href="#re模块" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#re模块"></a> RE模块</h1>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配字符串中所有符合的内容，返回的是列表</span></span><br><span class="line">re.findall(<span class="string">r&quot;正则式子&quot;</span>, <span class="string">&quot;字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配字符串中所有符合的内容，返回的是迭代器，从迭代器中拿内容需要.group()</span></span><br><span class="line">it = re.finditer(<span class="string">r&quot;正则式子&quot;</span>, <span class="string">&quot;字符串&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it</span><br><span class="line">print(i.group())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#找到一个结果就返回，返回的是match对象，拿数据也需要.group()</span></span><br><span class="line">re.search(<span class="string">r&quot;正则式子&quot;</span>, <span class="string">&quot;字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个是从头开始匹配，也是只返回一个结果</span></span><br><span class="line">re.match(<span class="string">r&quot;正则式子&quot;</span>, <span class="string">&quot;字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#预加载正则表达式</span></span><br><span class="line">名字 = re.<span class="built_in">compile</span>(<span class="string">r&quot;正则式子&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>一个例子，从正则表达式中提取所需信息</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jay&#x27;&gt;&lt;span id=&#x27;1&#x27;&gt;郭麒麟&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jj&#x27;&gt;&lt;span id=&#x27;2&#x27;&gt;宋铁&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jolin&#x27;&gt;&lt;span id=&#x27;3&#x27;&gt;大聪明&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;sylar&#x27;&gt;&lt;span id=&#x27;4&#x27;&gt;范思哲&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;tory&#x27;&gt;&lt;span id=&#x27;5&#x27;&gt;胡说八道&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (?P&lt;分组的名字&gt;正则式子) 这样可以提取所需信息</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div class=&#x27;.*?&#x27;&gt;&lt;span id=&#x27;\d&#x27;&gt;(?P&lt;aaa&gt;.*?)&lt;/span&gt;&lt;/div&gt;&quot;</span>, re.S)</span><br><span class="line">it = obj.finditer(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    print(i.group(<span class="string">&quot;aaa&quot;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#re.S表示.可以匹配换行符，这是为了防止只匹配一行。如果不带re.S，可能就只匹配一行内容就结束了。</span></span><br></pre></td></tr></table></div></figure><p>又一个例子，爬取豆瓣top250</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个csv文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, mode=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">csvwriter = csv.writer(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个页面，循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    url = <span class="string">f&quot;https://movie.douban.com/top250?start=<span class="subst">&#123;i*<span class="number">25</span>&#125;</span>&amp;filter=&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    pa_content = resp.text</span><br><span class="line"></span><br><span class="line">    obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27; &lt;li&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(?P&lt;score&gt;.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;span&gt;(?P&lt;people&gt;.*?)&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class="line">    result = obj.finditer(pa_content)</span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment"># print(it.group(&quot;year&quot;).strip())</span></span><br><span class="line">        <span class="comment"># print(it.group(&quot;score&quot;))</span></span><br><span class="line">        <span class="comment"># print(it.group(&quot;people&quot;))</span></span><br><span class="line">        <span class="comment">#year前面有空格，要去掉</span></span><br><span class="line">        dic = it.groupdict()</span><br><span class="line">        dic[<span class="string">&quot;year&quot;</span>] = dic[<span class="string">&quot;year&quot;</span>].strip()</span><br><span class="line">        <span class="comment">#写到文件中</span></span><br><span class="line">        csvwriter.writerow(dic.values())</span><br><span class="line">    resp.close()</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></div></figure><p>又一个例子，电影天堂</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.dy2018.com/&quot;</span></span><br><span class="line">resp = requests.get(url, verify=<span class="literal">False</span>) <span class="comment">#去掉安全验证</span></span><br><span class="line">resp.encoding = <span class="string">&quot;gb2312&quot;</span> <span class="comment">#字符集</span></span><br><span class="line">obj1 = re.<span class="built_in">compile</span>(<span class="string">r&quot;2022新片精品.*?&lt;ul&gt;.*?&lt;/li&gt;(?P&lt;ul&gt;.*?)&lt;/ul&gt;&quot;</span>, re.S) <span class="comment">#先获得部分源码</span></span><br><span class="line">obj2 = re.<span class="built_in">compile</span>(<span class="string">r&quot;href=&#x27;(?P&lt;ad&gt;.*?)&#x27;&quot;</span>, re.S)  <span class="comment">#在部分源码中提取链接信息</span></span><br><span class="line">result1 = obj1.finditer(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取子页面链接</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> itt <span class="keyword">in</span> result1:</span><br><span class="line">    ul = itt.group(<span class="string">&quot;ul&quot;</span>)</span><br><span class="line">    result2 = obj2.finditer(ul)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#链接</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> result2:</span><br><span class="line">        url2 = url + it.group(<span class="string">&quot;ad&quot;</span>).strip(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        lst.append(url2)</span><br><span class="line">resp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#在子页面提取下载链接</span></span><br><span class="line">obj3 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;!--xunleiDownList Start--&gt;.*?&lt;tr&gt;.*?href=&quot;(?P&lt;ad&gt;.*?)&quot;&#x27;</span>, re.S)</span><br><span class="line">lst2 = []</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> lst:</span><br><span class="line">    resp = requests.get(it, verify=<span class="literal">False</span>)</span><br><span class="line">    resp.encoding = <span class="string">&quot;gb2312&quot;</span></span><br><span class="line">    result3 = obj3.search(resp.text)</span><br><span class="line">    lst2.append(result3.group(<span class="string">&quot;ad&quot;</span>))</span><br><span class="line">    resp.close()</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> lst2:</span><br><span class="line">    print(it)</span><br></pre></td></tr></table></div></figure>        <h1 id="bs4"   >          <a href="#bs4" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bs4"></a> Bs4</h1>      <p>一种根据页面源码标签取数据的方法</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一些简介</span></span><br><span class="line">BeautifulSoup(内容, <span class="string">&quot;类型&quot;</span>) <span class="comment">#后面这个参数非必须</span></span><br><span class="line">.prettify() <span class="comment">#输出得到的soup对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索方法一般用find和find_all，可以指定标签和属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用get得到对应的属性内容</span></span><br></pre></td></tr></table></div></figure><p>这是一个取图片的例子</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.umei.cc/weimeitupian/&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bs4，通过标签找，一般用find或者find_all，find_all返回的是一个列表。后面这个参数是指定类型</span></span><br><span class="line">page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">lst = page.find_all(<span class="string">&quot;ul&quot;</span>, class_=<span class="string">&quot;pic-list after&quot;</span>)  <span class="comment">#返回符合条件的ul标签内容</span></span><br><span class="line">lst2 = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#从中取出所有img标签</span></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> lst:</span><br><span class="line">    lstt = it.find_all(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">    lst2.extend((lstt))</span><br><span class="line"></span><br><span class="line"><span class="comment">#从img标签中取属性</span></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> lst2:</span><br><span class="line">    print(it.get(<span class="string">&quot;data-src&quot;</span>))</span><br><span class="line">    <span class="comment">#print(it[&quot;data-src&quot;])</span></span><br><span class="line"></span><br><span class="line">resp.close()</span><br></pre></td></tr></table></div></figure>        <h1 id="xpath"   >          <a href="#xpath" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#xpath"></a> Xpath</h1>      <p>xpath是在xml文档中搜索内容的一门语言。HTML是xml的一个子集</p><p>先安装</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></div></figure><p>一些基础操作</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">xml = <span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span></span><br><span class="line">tree = etree.XML(xml) <span class="comment">#导入字符串，就像是把它变成一棵树</span></span><br><span class="line"></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/name&quot;</span>) <span class="comment">#表示层级关系，第一个/是根节点</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/name/text()&quot;</span>) <span class="comment">#拿文本</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author//nick/text()&quot;</span>) <span class="comment"># //表示所有后代</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author/*/nick/text()&quot;</span>) <span class="comment"># *表示一个通配符</span></span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&quot;x.html&quot;</span>) <span class="comment">#导入html文件</span></span><br><span class="line"></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/html/body/ul/li[1]/a/text()&quot;</span>) <span class="comment"># xpath是从1开始计数</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/html/body/ol/li/a[@href=&#x27;dapao&#x27;]/text()&quot;</span>) <span class="comment">#取出a标签中属性href为&#x27;&#x27;的项</span></span><br><span class="line"></span><br><span class="line">ol_li_list = tree.xpath(<span class="string">&quot;/html/body/ol/li&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> ol_li_list</span><br><span class="line"><span class="comment"># 从每一个li中提取到文字信息</span></span><br><span class="line">    result = li.xpath(<span class="string">&quot;./a/text()&quot;</span>) <span class="comment">#在li中继续寻找，相对查找</span></span><br><span class="line">    result2 =li.xpath(<span class="string">&quot;./a/@href&quot;</span>) <span class="comment">#拿到属性值：@属性</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#浏览器可以取查看xpath值</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python初学注意事项</title>
      <link href="/2022/08/16/Python/Python%E5%88%9D%E5%AD%A6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2022/08/16/Python/Python%E5%88%9D%E5%AD%A6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>最近在看教程视频，，小白入门，讲的有点啰嗦，但是将就看一下，以下列出部分需要注意的地方。当然，只是最基础的东西，为后面学人工智能打打基础。</p><p>具体的一些语法可以看另一篇文章。</p>        <h6 id="缩进的一些讲究"   >          <a href="#缩进的一些讲究" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#缩进的一些讲究"></a> 缩进的一些讲究</h6>      <p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/wosind/article/details/100012180" >细说缩进</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h6 id="变量的定义和使用"   >          <a href="#变量的定义和使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#变量的定义和使用"></a> 变量的定义和使用</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出变量内存地址</span></span><br><span class="line"><span class="built_in">id</span>()</span><br><span class="line"><span class="comment">#变量类型</span></span><br><span class="line"><span class="built_in">type</span>()</span><br></pre></td></tr></table></div></figure>        <h6 id="类型转换"   >          <a href="#类型转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#float、int、str可以互相转换，注意非数字不能转换数字类型</span></span><br></pre></td></tr></table></div></figure>        <h6 id="注释"   >          <a href="#注释" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注释"></a> 注释</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表示单行注释，python无多行注释的表示方法，一般用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></div></figure>        <h6 id="input函数"   >          <a href="#input函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#input函数"></a> input函数</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#input默认是str类型</span></span><br><span class="line">x=<span class="built_in">input</span>(<span class="string">&#x27;这里可以加字符串&#x27;</span>)</span><br></pre></td></tr></table></div></figure>        <h6 id="算数运算符"   >          <a href="#算数运算符" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#算数运算符"></a> 算数运算符</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#浮点数加可能有误差，最好导入模块Decimal</span></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line">a=Decimal(<span class="number">1.1</span>)+Decimal(<span class="number">2.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># +可以直接连接str</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#除法默认是浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># //表示整除，向下取整</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># **表示幂运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一正一负取余：余数=被除数-除数*商   （这个还挺奇特的）</span></span><br></pre></td></tr></table></div></figure>        <h6 id="赋值运算符"   >          <a href="#赋值运算符" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#赋值运算符"></a> 赋值运算符</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#支持系列解包赋值</span></span><br><span class="line">a,b,c=<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#链式赋值，实际上指向同一处内存空间</span></span><br><span class="line">a=b=c=<span class="number">20</span></span><br><span class="line"><span class="comment">#a,b,c的id相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#直接交换</span></span><br><span class="line">a,b=b,a</span><br></pre></td></tr></table></div></figure>        <h6 id="比较运算符"   >          <a href="#比较运算符" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#比较运算符"></a> 比较运算符</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ==比较的是值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># is和is not比较的是标识id</span></span><br></pre></td></tr></table></div></figure>        <h6 id="布尔运算符"   >          <a href="#布尔运算符" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#布尔运算符"></a> 布尔运算符</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">a=‘hello’</span><br><span class="line">print(<span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> a)</span><br></pre></td></tr></table></div></figure>        <h6 id="运算符优先级"   >          <a href="#运算符优先级" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#运算符优先级"></a> 运算符优先级</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#。。。加括号吧，这玩意确实没必要记。</span></span><br></pre></td></tr></table></div></figure>        <h6 id="对象的布尔值"   >          <a href="#对象的布尔值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对象的布尔值"></a> 对象的布尔值</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python一切皆对象，每个对象都有一个bool值</span></span><br><span class="line"><span class="comment">#空的对象都是False</span></span><br></pre></td></tr></table></div></figure>        <h6 id="分支结构"   >          <a href="#分支结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#分支结构"></a> 分支结构</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">结果<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    结果<span class="number">2</span></span><br><span class="line">[<span class="keyword">else</span>:]</span><br></pre></td></tr></table></div></figure>        <h6 id="条件表达式"   >          <a href="#条件表达式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#条件表达式"></a> 条件表达式</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个也怪怪的</span></span><br><span class="line">结果<span class="number">1</span> <span class="keyword">if</span> 条件 <span class="keyword">else</span> 结果<span class="number">2</span></span><br><span class="line"><span class="comment">#True执行结果1，否则执行结果2</span></span><br></pre></td></tr></table></div></figure>        <h6 id="pass语句"   >          <a href="#pass语句" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#pass语句"></a> pass语句</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pass用作略过，表示当前部分还没想好，就先占个位。比如：</span></span><br><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></div></figure>        <h6 id="range函数"   >          <a href="#range函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#range函数"></a> range函数</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认是[0,stop),步长为1</span></span><br><span class="line"><span class="built_in">range</span>(start,stop,step)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回值是一个迭代器对象，比如上式返回range(start,stop)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#优点是无论表示的整数序列多长，所有range对象所占内存空间一样大，因为只存储上面三个参数，只有到用到的时候才会计算</span></span><br></pre></td></tr></table></div></figure>        <h6 id="循环"   >          <a href="#循环" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#循环"></a> 循环</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></div></figure>        <h6 id="8else"   >          <a href="#8else" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#8else"></a> 8else</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#也是蛮特别的一种用法，for和else可以搭配，当未执行过break时，会执行else</span></span><br><span class="line"><span class="keyword">for</span> ...</span><br><span class="line"><span class="keyword">else</span> ...</span><br></pre></td></tr></table></div></figure>        <h6 id="列表的特点"   >          <a href="#列表的特点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#列表的特点"></a> 列表的特点</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表里面类型可以混着</span></span><br><span class="line"><span class="comment">#动态分配和回收内存</span></span><br></pre></td></tr></table></div></figure>        <h6 id="获取列表中的单个元素"   >          <a href="#获取列表中的单个元素" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#获取列表中的单个元素"></a> 获取列表中的单个元素</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正向索引 [0,N-1]</span></span><br><span class="line"><span class="comment">#逆向索引 [-N,-1]</span></span><br></pre></td></tr></table></div></figure>        <h6 id="列表切片"   >          <a href="#列表切片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#列表切片"></a> 列表切片</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#截取一部分 [start,stop)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#正序截取</span></span><br><span class="line">列表名[start:stop:step正数]</span><br><span class="line"></span><br><span class="line"><span class="comment">#逆序截取</span></span><br><span class="line">列表名[start:stop:step负数] start&gt;=stop</span><br></pre></td></tr></table></div></figure>        <h6 id="列表增删改等操作"   >          <a href="#列表增删改等操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#列表增删改等操作"></a> 列表增删改等操作</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#末尾添加一个元素，可以将另一个列表作为单个元素添加进去</span></span><br><span class="line">.append()</span><br><span class="line"></span><br><span class="line"><span class="comment">#末尾添加至少一个元素，可以将另一列表所有元素加进去</span></span><br><span class="line">.extend()</span><br><span class="line"></span><br><span class="line"><span class="comment">#任意位置插入一个元素</span></span><br><span class="line">.insert()</span><br><span class="line"></span><br><span class="line"><span class="comment">#把某一段切掉,把[start,stop)去掉，列表2的元素插进去</span></span><br><span class="line">列表<span class="number">1</span>[start,stop]=列表<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一个指定的元素，如果有重复，则删除第一个</span></span><br><span class="line">.remove()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除指定位置的元素，默认最后一个</span></span><br><span class="line">.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除整个列表对象</span></span><br><span class="line"><span class="keyword">del</span> 列表名</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空列表</span></span><br><span class="line">.clear</span><br><span class="line"></span><br><span class="line"><span class="comment">#排序sort和sorted，后者不会改变原列表的顺序，True是降序，默认为升序</span></span><br><span class="line">.sort(reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="built_in">sorted</span>(列表名,reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></div></figure>        <h6 id="列表生成式"   >          <a href="#列表生成式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#列表生成式"></a> 列表生成式</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用一个式子生成列表，和集合的生成式一样</span></span><br><span class="line">[式子 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象]</span><br></pre></td></tr></table></div></figure>        <h6 id="字典元素和字典视图的获取"   >          <a href="#字典元素和字典视图的获取" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字典元素和字典视图的获取"></a> 字典元素和字典视图的获取</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建</span></span><br><span class="line">字典名=&#123;key:value , ...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找有两种方式，若查找的值不存在，前者会报错，后者会输出None</span></span><br><span class="line">字典名[key]</span><br><span class="line">字典名.get(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取视图</span></span><br><span class="line">字典名.keys()</span><br><span class="line">字典名.values()</span><br></pre></td></tr></table></div></figure>        <h6 id="字典生成式"   >          <a href="#字典生成式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字典生成式"></a> 字典生成式</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;key名:value名 <span class="keyword">for</span> key名,value名 <span class="keyword">in</span> <span class="built_in">zip</span> (表<span class="number">1</span>,表<span class="number">2</span>)&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="可变和不可变序列"   >          <a href="#可变和不可变序列" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#可变和不可变序列"></a> 可变和不可变序列</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组和字符串属于不可变序列，没有增删改等操作</span></span><br><span class="line"><span class="comment">#列表、集合和字典属于可变序列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不可变序列，对它操作之后，内存地址会发生变化，比如</span></span><br><span class="line">s=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">s=s+<span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="comment">#它的id会变化</span></span><br></pre></td></tr></table></div></figure>        <h6 id="元组的创建"   >          <a href="#元组的创建" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#元组的创建"></a> 元组的创建</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#就记成如下形式</span></span><br><span class="line">(元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>, ...)</span><br><span class="line"><span class="comment">#这就表示一个元组，其实有多个元素的时候可以不带小括号，但是单个元素时会有问题，所以平时写就带括号就行，单个元素这么写：</span></span><br><span class="line">(元素,)</span><br></pre></td></tr></table></div></figure>        <h6 id="集合的创建"   >          <a href="#集合的创建" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#集合的创建"></a> 集合的创建</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建空集合，不能直接：</span></span><br><span class="line">=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#这表示的是字典，可以这么创建：</span></span><br><span class="line">=<span class="built_in">set</span>()</span><br></pre></td></tr></table></div></figure>        <h6 id="集合的相关操作"   >          <a href="#集合的相关操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#集合的相关操作"></a> 集合的相关操作</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加一个元素</span></span><br><span class="line">.add()</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加至少一个元素</span></span><br><span class="line">.update()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一个元素有两种方法，如果不存在，前者会抛出异常，后者不会</span></span><br><span class="line">.remove()</span><br><span class="line">.discard()</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机删除任意一个元素，不能指定参数</span></span><br><span class="line">.pop()</span><br></pre></td></tr></table></div></figure>        <h6 id="集合间的关系"   >          <a href="#集合间的关系" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#集合间的关系"></a> 集合间的关系</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断相等，只要内容完全一样就行 ==</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断A是否是B的子集</span></span><br><span class="line">A.issubset(B)</span><br><span class="line"></span><br><span class="line"><span class="comment">#A是否是B的超集</span></span><br><span class="line">A.issuperset(B)</span><br><span class="line"></span><br><span class="line"><span class="comment">#是否有交集，没有交集为True</span></span><br><span class="line">A.isdisjoint(B)</span><br></pre></td></tr></table></div></figure>        <h6 id="集合的数据操作"   >          <a href="#集合的数据操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#集合的数据操作"></a> 集合的数据操作</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#交 &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#并 |</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#差 -</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对称差集，即去掉交部分的并 ^</span></span><br></pre></td></tr></table></div></figure>        <h6 id="字符串的驻留机制"   >          <a href="#字符串的驻留机制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符串的驻留机制"></a> 字符串的驻留机制</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串是不可变序列，它采用驻留机制，就是相同的字符串，尽管变量名不同，但它们会指向同一块地址，但只针对那些只含有下划线和字母的字符串。 相当于有个池子，用的时候直接取，而不是再创建新的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串拼接一般有两种方式，+和join函数，后者效率比前者高。前者需要频繁创建和销毁，后者从一开始就会开够内存空间，所以效率高。</span></span><br></pre></td></tr></table></div></figure>        <h6 id="字符串常用操作"   >          <a href="#字符串常用操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符串常用操作"></a> 字符串常用操作</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询子串索引，带r表示从后往前第一次出现该子串的位置</span></span><br><span class="line">index()和rindex()</span><br><span class="line">find()和rfind()</span><br><span class="line"><span class="comment">#index找不到会抛异常，find找不到抛-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串的劈分，会以列表形式存储，当未指定劈分次数时，两个函数没有区别</span></span><br><span class="line">split(劈分的符号,最大劈分次数)</span><br><span class="line">rsplit()是从右边往左分</span><br><span class="line"><span class="comment">#符号默认是空格，劈分次数默认全部</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有判断字符串是否是合法标识符的函数、判断是否全是空白字符的函数、判断全部为数字or字符等等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串替换、合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#chr和ord互为逆操作，可以得到值对应的字符和字符对应的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对齐、大小写转换等操作</span></span><br></pre></td></tr></table></div></figure>        <h6 id="格式化字符串"   >          <a href="#格式化字符串" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#格式化字符串"></a> 格式化字符串</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种和C语言差不多</span></span><br><span class="line">print(<span class="string">&#x27;我%s,%d岁了&#x27;</span> % (name,age))</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种</span></span><br><span class="line">print(<span class="string">f&#x27;字符串<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三种，比较复杂，使用&#123;&#125;的str,format()方法</span></span><br></pre></td></tr></table></div></figure>        <h6 id="字符串编码转换"   >          <a href="#字符串编码转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符串编码转换"></a> 字符串编码转换</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gbk一个中文占2个字节，utf-8一个中文占3个字节</span></span><br><span class="line">.encode(encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line">.decode(encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br></pre></td></tr></table></div></figure>        <h6 id="函数的创建"   >          <a href="#函数的创建" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#函数的创建"></a> 函数的创建</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line">执行</span><br><span class="line">    [<span class="keyword">return</span> 结果]</span><br><span class="line"></span><br><span class="line"><span class="comment">#正常传参和c语言传形参一样，就是根据位置传递参数。另外还有一种传的方式，是根据名字传递，如下：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span>(<span class="params">a,b</span>):</span></span><br><span class="line">cal(b=<span class="number">10</span>,a=<span class="number">20</span>)</span><br><span class="line"><span class="comment">#那么函数执行时a=20，b=10，因为它会自动找到对应的</span></span><br></pre></td></tr></table></div></figure>        <h6 id="函数传参的内存分析"   >          <a href="#函数传参的内存分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#函数传参的内存分析"></a> 函数传参的内存分析</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#其实就是把内存地址传过去，对于可变对象，那么更改它会对原对象有影响。对于不可变对象，在函数里更改，原对象不受影响</span></span><br></pre></td></tr></table></div></figure>        <h6 id="函数的返回值"   >          <a href="#函数的返回值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#函数的返回值"></a> 函数的返回值</h6>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#返回多个值的话，类型是元组</span><br></pre></td></tr></table></div></figure>        <h6 id="函数的参数定义"   >          <a href="#函数的参数定义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#函数的参数定义"></a> 函数的参数定义</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#print默认会换行，如果不想换，需要修改指定参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#个数可变的位置参数，在函数中以元组形式存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">*参数名</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#个数可变的关键字参数，以字典形式存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">**参数名</span>):</span></span><br><span class="line"><span class="comment">#以上两种类型可以同时定义在一个函数中，但各自至多定义一个</span></span><br></pre></td></tr></table></div></figure>        <h6 id="异常处理机制"   >          <a href="#异常处理机制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常处理机制"></a> 异常处理机制</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能出现异常的部分</span><br><span class="line"><span class="keyword">except</span> 异常名字:</span><br><span class="line">    异常处理</span><br><span class="line"><span class="keyword">except</span> ...</span><br><span class="line">[<span class="keyword">else</span>:]</span><br><span class="line">未出现异常的执行部分</span><br><span class="line">[<span class="keyword">finally</span>:]</span><br><span class="line">无论是否出现异常都会执行的部分</span><br></pre></td></tr></table></div></figure>        <h6 id="对象和过程"   >          <a href="#对象和过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对象和过程"></a> 对象和过程</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个算是编程的两大思想，过程就是具体的过程，对象就类似于对过程的封装。</span></span><br><span class="line"><span class="comment">#类是某些具有同样性质的东西，类中的个例被称作实例或对象</span></span><br></pre></td></tr></table></div></figure>        <h6 id="类的创建"   >          <a href="#类的创建" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#类的创建"></a> 类的创建</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类名默认首字母大写，这属于一种规范。类内定义的变量称为类属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#类之外定义的叫函数，类之内定义的叫方法。self无论写不写，都存在，但可以用其它单词，不过默认用self</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#静态方法，无任何默认参数</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sm</span>():</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">#类方法</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm</span>(<span class="params">cls</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,...</span>)</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">#实例属性如果加<span class="title">__</span>，那么在类外就不能使用，比如这样的实例属性。（其实可以强制访问）</span></span><br><span class="line"><span class="function"><span class="title">self</span>.<span class="title">__age</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">#实例对象都有一个类指针指向类对象</span></span><br></pre></td></tr></table></div></figure>        <h6 id="动态绑定属性和方法"   >          <a href="#动态绑定属性和方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态绑定属性和方法"></a> 动态绑定属性和方法</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以为实例直接加新的属性，这个属性只有它自己有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于函数，类也可以直接绑定它，如</span></span><br><span class="line">类名.方法名=函数名</span><br></pre></td></tr></table></div></figure>        <h6 id="继承"   >          <a href="#继承" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#继承"></a> 继承</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以继承父类，默认继承object类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多继承中有一个比较重要的函数super()，可以看下面这个链接</span></span><br><span class="line">https://blog.csdn.net/sinat_38682860/article/details/<span class="number">103732371</span></span><br></pre></td></tr></table></div></figure>        <h6 id="多态"   >          <a href="#多态" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#多态"></a> 多态</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python属于动态语言，虽然它的变量没有数据类型，但是它具备多态的特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#java属于静态语言，静态语言实现多态要具备3个条件</span></span><br><span class="line">继承</span><br><span class="line">方法重写</span><br><span class="line">父类引用指向之类对象</span><br></pre></td></tr></table></div></figure>        <h6 id="特殊对象和特殊方法"   >          <a href="#特殊对象和特殊方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#特殊对象和特殊方法"></a> 特殊对象和特殊方法</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获得类对象或实例对象绑定的所有属性和方法的字典</span></span><br><span class="line">__dict__</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用特殊方法重载某些功能，设置为自定义的形式</span></span><br></pre></td></tr></table></div></figure>        <h6 id="浅拷贝和深拷贝"   >          <a href="#浅拷贝和深拷贝" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#浅拷贝和深拷贝"></a> 浅拷贝和深拷贝</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#浅拷贝，只拷贝原对象，不拷贝原对象的子对象，其实就是只把原对象复制一份，并不复制其子对象，而是直接指向子对象的内存位置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#深拷贝，会递归拷贝所有子对象</span></span><br></pre></td></tr></table></div></figure>        <h6 id="模块的导入"   >          <a href="#模块的导入" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#模块的导入"></a> 模块的导入</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#两种方法</span></span><br><span class="line"><span class="keyword">import</span> 模块名称</span><br><span class="line"><span class="keyword">from</span> 模块名称 <span class="keyword">import</span> 函数/变量/类</span><br><span class="line"><span class="comment">#可以取别名  as ...</span></span><br></pre></td></tr></table></div></figure>        <h6 id="以主程序方式运行"   >          <a href="#以主程序方式运行" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#以主程序方式运行"></a> 以主程序方式运行</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span></span><br><span class="line"><span class="comment">#表示只有当该程序模块是主程序的时候才会执行以下语句</span></span><br></pre></td></tr></table></div></figure>        <h6 id="包"   >          <a href="#包" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#包"></a> 包</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#包是一个分层次的目录结构，它将一组功能相近的模板组织在一个目录下，注意避免名称冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#包含__init__.py文件的目录称为包，目录里通常不包含__init__.py文件</span></span><br></pre></td></tr></table></div></figure>        <h6 id="编码格式"   >          <a href="#编码格式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#编码格式"></a> 编码格式</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python的解释器使用的是Unicode(内存)</span></span><br><span class="line"><span class="comment">#.py文件在磁盘上使用UTF-8存储(外存)</span></span><br></pre></td></tr></table></div></figure>        <h6 id="文件读写"   >          <a href="#文件读写" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#文件读写"></a> 文件读写</h6>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件对象名 = <span class="built_in">open</span>(<span class="string">&#x27;文件地址和文件名&#x27;</span>[,操作模式,编码方式])</span><br><span class="line"><span class="comment">#默认模式为只读，默认编码为gbk，用完记得关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#with语句可以自动管理上下文资源，可以保证文件自动关闭</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研招相关</title>
      <link href="/2022/08/15/%E7%A0%94%E6%8B%9B/%E7%A0%94%E6%8B%9B%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/08/15/%E7%A0%94%E6%8B%9B/%E7%A0%94%E6%8B%9B%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>看夏令营时找到的一些东西</p><p>一般夏令营五月份就陆续开始报名了，这时候多去网上找资料，有很多别人总结好的，比如知乎、b站之类的，注意一下有没有群号。</p><p>复习资料emmm，网上多搜搜吧，专业课也就那几门。另外多找找有没有往届的写的面经博客，也可以问问学长学姐，这是最简单的方法，每个学校的模式都不太一样，但是和自己学校往年的路数差不多。</p><p>关于夏令营报名要交的资料，按照要求交就行，如果能找到老师帮忙推荐一下最好，这个还是很有用的。</p><p>要不要联系导师嘛，这个不好说，联系一下还是好的，但是联系之前多去了解，不然如果老师相中你了，你又不太想去这个老师那了，那肯定不太好对吧，尤其是在你很想去这个学校的情况下。</p><p>在投学校的时候，海投没问题，但是也不能本末倒置，不能影响到期末考试之类的。另外提一句，如果拿了优营，又明确不想去的学校，最好拒掉，占了多余的名额，既影响其他同学，又搞得学校特别被动，这样太不地道。</p><p>预推免没太关注，不清楚。</p><p>下面是几个网站：</p><p>官方研招：<span class="exturl"><a class="exturl__link"   href="https://yz.chsi.com.cn/" >中国研究生招生信息网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>偶然发现的一个信息汇总，真是帮大忙了（针对计算机）：<span class="exturl"><a class="exturl__link"   href="https://github.com/jisuanjibaoyan2022/jsjby_2022/blob/main/README.md" >学校夏令营信息集合</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>有一些学校的夏令营信息，不过信息没那么全：<span class="exturl"><a class="exturl__link"   href="http://pc.baoyanwang.com.cn/" >保研信息网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>学科评级：<span class="exturl"><a class="exturl__link"   href="https://www.dxsbb.com/news/1797.html" >学科评级</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>保研论坛，算是吧，我也没咋用：<span class="exturl"><a class="exturl__link"   href="https://www.eeban.com/" >保研论坛</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>这个比较杂：<span class="exturl"><a class="exturl__link"   href="https://shuobolife.com/" >硕博生活圈</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>下面是几个关于评价学校和导师的，不过不齐全，而且蛮旧，看看就行，这个问你想去的那个学校的学长学姐最靠谱。</p><p><span class="exturl"><a class="exturl__link"   href="https://cn.colleges.chat/" >学校生活环境</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.daoshipingjia.xyz/" >导师评价网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://docs.qq.com/sheet/DQ1ZIQ21yVHZoeGpL?u=eb2fdda483ac4da9a744729b0c3c6242&amp;friendUin=tYlfmFtWx9ifYtIqDRvs6w%253D%253D&amp;ADUIN=956256648&amp;ADSESSION=1656910352&amp;ADTAG=CLIENT.QQ.5899_.0&amp;ADPUBNO=27223&amp;tab=BB08J2" >导师评价文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 研招 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据降维课题</title>
      <link href="/2022/08/15/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4%E8%AF%BE%E9%A2%98/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4%E8%AF%BE%E9%A2%98/"/>
      <url>/2022/08/15/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4%E8%AF%BE%E9%A2%98/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4%E8%AF%BE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>算法设计与分析课题</p><p>2022年上半年，即大三下学期的课程课题，选到了数据降维，主要是PCA、MDS、Isomap、LLE四种。</p><p>记录一下学习过程中用到的一些链接。</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_15719037/article/details/80454113" >机器学习四大数据降维方法详解</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/159285110" >六种常见数据降维方法简介及代码实现</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/zdy0_2004/article/details/49977357?spm=1001.2101.3001.6650.8&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8.pc_relevant_antiscanv2&amp;utm_relevant_index=14" >看！数据分析领域中最为人称道的七种降维方法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/75e805ff247c" >各类降维方法总结</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1n34y1D7xV?spm_id_from=333.337.search-card.all.click&amp;vd_source=10ffbecd636fbeade0ef88bd2d4f3f9f" >Python与人工智能-数据降维-PCA（视频）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/77151308" >【机器学习】降维——PCA（非常详细）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/446233242" >什么是流形学习(manifold learning)- Part 1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.zhihu.com/question/270867521/answer/358993397" >图像用PCA降维</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/73a31bab8c65" >（十一）MDS算法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 数据降维课题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据降维课题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔问题</title>
      <link href="/2022/04/01/%E7%AE%97%E6%B3%95/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/01/%E7%AE%97%E6%B3%95/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="起源"   >          <a href="#起源" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#起源"></a> 起源</h1>      <p>汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>        <h1 id="数学形式"   >          <a href="#数学形式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数学形式"></a> 数学形式</h1>      <p>如下图所示，从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去，期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数。</p><p><img src="1.png" alt="1" /></p>        <h1 id="求解方法"   >          <a href="#求解方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#求解方法"></a> 求解方法</h1>      <p>当n=1时：</p><p>A→C 一次即可</p><p>当n=2时：</p><p>A→B</p><p>A→C</p><p>B→C 需要三次</p><p>当n=3时：</p><p>A→C</p><p>A→B</p><p>C→B</p><p>A→C</p><p>B→A</p><p>B→C</p><p>A→C 需要七次</p><p>这里我们其实就可以看出来最终的移动次数，即2^n-1。</p>        <h1 id="递归分析"   >          <a href="#递归分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#递归分析"></a> 递归分析</h1>      <p>目前来说，递归是解决汉诺塔问题的最好方法。</p><p>整个问题如果通过递归解决，可以分为分三个阶段：</p><p>1.将上面n-1个盘子从A柱移到B柱</p><p>2.将第n个(即最大的盘子)从A柱移到C柱</p><p>3.将n-1个盘子从B柱移到C柱</p><p>递归就是将大问题，缩减为一个小问题，可能有些不太好理解，觉得细节蛮多，但当想明白之后，只觉得妙妙妙。</p><p>参照下面的递归过程自己模拟一下，就会发现和上面的移动顺序是一样的。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n,String p1,String p2,String p3)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;<span class="comment">//剩一个就直接挪</span></span><br><span class="line">        move(n,p1,p3);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hanoi(n<span class="number">-1</span>,p1,p3,p2); <span class="comment">//将C看作中间柱子，将n-1个碟子从A移动到B</span></span><br><span class="line">    move(n,p1,p3); <span class="comment">//移动最下面的大盘子</span></span><br><span class="line">    hanoi(n<span class="number">-1</span>,p2,p1,p3);<span class="comment">//将A看作中间柱子，将n-1个碟子从B移动到C</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维+二进制】CF779D</title>
      <link href="/2022/03/28/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%91CF779D/"/>
      <url>/2022/03/28/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%91CF779D/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>一个原序列l~r，每个数都与x异或，得到一个新序列。</p><p>已知新序列，l和r，求一个可行的x，输出任意一个。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/contest/1658/problem/D1" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>原序列l~r，对每一个二进制位单独看，无论r是几，必有0的个数&gt;=1的个数。取相等的情况是当r是2^k-1时。</p><p>所以对于新序列，只要看一下每一个二进制位即可。只有在0的个数&gt;1的个数时，x的该二进制位才取1。（相等的时候可以0或1任取）</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1000000000000</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">33</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=r; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">20</span>; j++,x&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cnt[j][x&amp;<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans|=((cnt[i][<span class="number">0</span>]&lt;cnt[i][<span class="number">1</span>]))*(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【dp+前缀和】ACC第3题</title>
      <link href="/2022/03/21/%E7%AE%97%E6%B3%95/%E3%80%90dp+%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%91ACC%E7%AC%AC3%E9%A2%98/"/>
      <url>/2022/03/21/%E7%AE%97%E6%B3%95/%E3%80%90dp+%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%91ACC%E7%AC%AC3%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://www.acwing.com/problem/content/4381/" >acwing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>大意是取m个长度为k的不相交区间，使得总和最大。</p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>一道dp题。</p><p>dp(i,j)表示前i个取j个区间的最大值。</p><p>其实这题一看就是个n^2的dp，状态也很好列，但是在想怎么转移的时候迷惑了，懵的很，我感觉怎么写都行，无论是先枚举区间个数还是枚举元素都行(其实确实都可以)，但就是很迷惑。</p><p>说下转移吧，外层枚举选的区间个数，内层两种情况：</p><p>第i个数作为最后一个所选区间的右边界，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i-k][j-1]+sum[i]-sum[i-k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>.</p><p>第i个数不作为，即最后一个所选区间不包括第i个数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i-1][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>.，至于为什么不选择<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i-1][j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，因为前面已经得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i-1][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>了呀，这个肯定大呀，没必要再考虑j-1个区间的情况了。</p><p>其实感觉写法和理解方式还挺多的。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for (int i = 1; i &lt;= (n); ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1000000000000</span></span><br><span class="line"></span><br><span class="line">ll a[<span class="number">5555</span>];</span><br><span class="line">ll sum[<span class="number">5555</span>];</span><br><span class="line">ll dp[<span class="number">5002</span>][<span class="number">5002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll n,k,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=k*j; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=max(dp[i-k][j<span class="number">-1</span>]+sum[i]-sum[i-k],dp[i<span class="number">-1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[n][m]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维线段树平衡树】12届双向排序</title>
      <link href="/2022/03/15/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%B9%B3%E8%A1%A1%E6%A0%91%E3%80%9112%E5%B1%8A%E5%8F%8C%E5%90%91%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/15/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%B9%B3%E8%A1%A1%E6%A0%91%E3%80%9112%E5%B1%8A%E5%8F%8C%E5%90%91%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="http://lx.lanqiao.cn/problem.page?gpid=T2906" >蓝桥杯</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>看y总的视频讲解吧，很清楚。挺难想的，要分析好多，啧，这思路给我四个小时我也想不到啊。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1fv411L78t?p=2" >讲解</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;P;</span><br><span class="line">P sta[ms];</span><br><span class="line"><span class="keyword">int</span> ans[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p,q;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(top &amp;&amp; sta[top].x==<span class="number">0</span>) q=max(q,sta[top--].y);<span class="comment">//合并同侧的</span></span><br><span class="line">            <span class="keyword">while</span>(top&gt;=<span class="number">2</span> &amp;&amp; sta[top<span class="number">-1</span>].y&lt;=q) top-=<span class="number">2</span>;<span class="comment">//对于同一侧，更改的集合应该严格递减</span></span><br><span class="line">            sta[++top]=&#123;<span class="number">0</span>,q&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(top)<span class="comment">//一开始肯定要改前缀为递减呀，所以限制top&gt;0</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(top &amp;&amp; sta[top].x==<span class="number">1</span>) q=min(q,sta[top--].y);</span><br><span class="line">            <span class="keyword">while</span>(top&gt;=<span class="number">2</span> &amp;&amp; sta[top<span class="number">-1</span>].y&gt;=q) top-=<span class="number">2</span>;</span><br><span class="line">            sta[++top]=&#123;<span class="number">1</span>,q&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=n,l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=top; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sta[i].x==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(r&gt;=l &amp;&amp; r&gt;sta[i].y) ans[r--]=k--;<span class="comment">//不能让r&lt;l，那样说明已经修改完了</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;sta[i].y&lt;&lt;&quot; r\n&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(r&gt;=l &amp;&amp; l&lt;sta[i].y) ans[l++]=k--;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;sta[i].y&lt;&lt;&quot; l\n&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;l) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(top%<span class="number">2</span>)<span class="comment">//有可能没有修改完，中间有部分未覆盖</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r) ans[l++]=k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r) ans[r--]=k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【组合数学+二分】12届杨辉三角形</title>
      <link href="/2022/03/15/%E7%AE%97%E6%B3%95/%E3%80%90%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6+%E4%BA%8C%E5%88%86%E3%80%9112%E5%B1%8A%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
      <url>/2022/03/15/%E7%AE%97%E6%B3%95/%E3%80%90%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6+%E4%BA%8C%E5%88%86%E3%80%9112%E5%B1%8A%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="http://lx.lanqiao.cn/problem.page?gpid=T2912" >蓝桥杯</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>将杨辉三角的所有数从上到下，从左到右，排成一列，输入一个N，判断最早出现N是在第几个数。</p><p>猝不及防，不是说蓝桥杯都是暴力吗？碰到这样的题当时挺懵的。</p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>两种写法。</p><p>第一种挺妙的。就是我们只枚举前2000行的数，因为可以知道C(2000,3)就会超过1e9，所以如果前两千行没有出现，那么只可能出现在之后的C(k,1)或者C(k,2)。那么我们就先枚举前面的，如果没有答案，就只看C(k,1)或者C(k,2)。</p><p>第二种是二分，但是挺考验思维和观察能力的，首先看这个图：</p><p><img src="%E5%9B%BE1.jpg" alt="图1" /></p><p>可以发现左右对称，我们由此可以知道，如果一个数出现过，那么会先在左边出现，我们先试着只观察左半部分。</p><p>再看这张图：</p><p><img src="%E5%9B%BE2.jpg" alt="图2" /></p><p>标注那很容易懂，下标为偶数，上标为它的一半，从该处开始，斜着划线，发现都是递增的，而且只是下标改变，上标不变。</p><p>接下来就可以尝试对每一列进行二分，但是这时候还有问题，枚举多少列呢？经计算16列即可，因为C(32,16)已经超1e9了。</p><p>那么还有个问题，我们从左边列开始，还是从右边列开始呢？答案是右边列。我们可以发现，只看左半部，每行最大值在最右边。再对比每一列，发现右边列增长速度快，所以当左边列和右边列出现相同大小的值的时候，肯定是在右边列先得到的，所以从右往左遍历。</p><p>差不多就酱紫了。</p><p>挺考验思维的，而且码的时候细节颇多。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <p>法1：别人的</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll N;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">2005</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">a[i][j]=a[i<span class="number">-1</span>][j]+a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==N)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i*(i<span class="number">-1</span>)/<span class="number">2</span>+j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果上面的没找到，说明只有C(1,n)和C(2,n)满足了</span></span><br><span class="line"><span class="comment">//n*(n-1)/2==N</span></span><br><span class="line">ll n=<span class="built_in">sqrt</span>(N*<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(n*(n<span class="number">-1</span>)/<span class="number">2</span>==N)&#123;</span><br><span class="line">        <span class="comment">//C(2,n)</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;n*(n+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//C(1,n)</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;N*(N+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>法2：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll n;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=a,j=<span class="number">1</span>; j&lt;=b; i--,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res*i/j;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;n)<span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll l=<span class="number">2</span>*k,r=max(n,l);<span class="comment">//避免r小于了l</span></span><br><span class="line">    ll mid;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(C(mid,k)&gt;=n)</span><br><span class="line">            r=mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(C(l,k)!=n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;((l+<span class="number">1</span>)*l/<span class="number">2</span>+k+<span class="number">1</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">16</span>;;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(check(i)) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分或三分 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数位dp+压缩】牛客和与或</title>
      <link href="/2022/03/08/%E7%AE%97%E6%B3%95/%E3%80%90%E6%95%B0%E4%BD%8Ddp+%E5%8E%8B%E7%BC%A9%E3%80%91%E7%89%9B%E5%AE%A2%E5%92%8C%E4%B8%8E%E6%88%96/"/>
      <url>/2022/03/08/%E7%AE%97%E6%B3%95/%E3%80%90%E6%95%B0%E4%BD%8Ddp+%E5%8E%8B%E7%BC%A9%E3%80%91%E7%89%9B%E5%AE%A2%E5%92%8C%E4%B8%8E%E6%88%96/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/problem/21336" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>不太友好的一道数位dp题。没怎么写过这类，搞得很混乱，看了题解之后才知道咋写。</p><p>分析题意，可以想到，对于所有a[i]的和=或，那么每个二进制位的1只能出现在某一个a[i]中，而不能是两个或多个。这是第二个条件。</p><p>而对于第一个条件，这里我倒是想了很久，直接用这个条件去限制，感觉处理起来很繁琐，看了题解，大部分都是二维dp(i,j)，i表示sum的二进制中的第i位，j表示一种限制（压缩一下，因为最多10个数，可以用一个二进制位表示一个数），j的第k个二进制位表示第k个数是否可以使用。</p><p>这个时候可以通过dfs最终sum的每一个二进制位，从高位到低位dfs，通过传递限制limit来不断搜索，至于究竟如何限制，可以看看这个<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_49494204/article/details/116797821?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1" >博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>大概意思就是比如一个数r[i]是1010，如果a[i]先使用了最左边的1，那么之后的第二位和第三位就会受到限制，因为要满足a[i]&lt;=r[i]的条件。而如果a[i]没有使用最左边的1，那么第二位和第三位就不会受到限制。就酱紫。</p><p>对于如何dfs：</p><p>1.当前第pos位填0，那么之后数的使用就不受限制。</p><p>2.当前第pos位想要填1，可以遍历r序列。</p><p>如果当前数的使用不受限制，那么之后还不会受限制。</p><p>如果当前数的使用受限制，那么之后还得受到限制。就如上述1010那个例子。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">66</span>][<span class="number">1</span>&lt;&lt;<span class="number">11</span>];</span><br><span class="line">ll r[<span class="number">11</span>];</span><br><span class="line">ll b[<span class="number">66</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> limit)</span><span class="comment">//limit是状态压缩后的，第i个二进制位表示r[i]是否可以使用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(dp[pos][limit]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pos][limit];</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(r[i]&amp;b[pos]) now|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    ans=(ans+dfs(pos<span class="number">-1</span>,now|limit))%mod; <span class="comment">//po填0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;limit)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=(ans+dfs(pos<span class="number">-1</span>,now|limit))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;now)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=(ans+dfs(pos<span class="number">-1</span>,(now|limit)^(<span class="number">1</span>&lt;&lt;i)))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[pos][limit]=ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">62</span>; i++) b[i]=b[i<span class="number">-1</span>]*<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span>&gt;&gt;r[i];</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">62</span>,<span class="number">0</span>);</span><br><span class="line">&#125;   </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动态规划+背包】牛客cf</title>
      <link href="/2022/03/06/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92+%E8%83%8C%E5%8C%85%E3%80%91%E7%89%9B%E5%AE%A2cf/"/>
      <url>/2022/03/06/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92+%E8%83%8C%E5%8C%85%E3%80%91%E7%89%9B%E5%AE%A2cf/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/problem/21314" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>01背包</p><p>但是这道题，有个额外的条件，就是每个物品的价值是会变化的，我们没法直接套板子。</p><p>这里就涉及到一个优先级的问题，我们要想办法给所有物品划分优先级。</p><p>设i和j，价值v1和v2，每分钟减少w1和w2，需要时间rt1和rt2。</p><p>如果先做i再做j，那么总得分是sum1=</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mn>1</mn><mo>+</mo><mi>v</mi><mn>2</mn><mo>−</mo><mo stretchy="false">(</mo><mi>r</mi><mi>t</mi><mn>1</mn><mo>+</mo><mi>r</mi><mi>t</mi><mn>2</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>w</mi><mn>2</mn><mo>−</mo><mi>r</mi><mi>t</mi><mn>1</mn><mo>∗</mo><mi>w</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">v1+v2-(rt1+rt2)*w2-rt1*w1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord">1</span></span></span></span></span></p><p>如果先做j再做i，那么总得分是sum2=</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mn>1</mn><mo>+</mo><mi>v</mi><mn>2</mn><mo>−</mo><mo stretchy="false">(</mo><mi>r</mi><mi>t</mi><mn>1</mn><mo>+</mo><mi>r</mi><mi>t</mi><mn>2</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>w</mi><mn>1</mn><mo>−</mo><mi>r</mi><mi>t</mi><mn>2</mn><mo>∗</mo><mi>w</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">v1+v2-(rt1+rt2)*w1-rt2*w2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord">2</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mn>1</mn><mo>−</mo><mi>s</mi><mi>u</mi><mi>m</mi><mn>2</mn><mo>=</mo><mi>r</mi><mi>t</mi><mn>2</mn><mo>∗</mo><mi>w</mi><mn>1</mn><mo>−</mo><mi>r</mi><mi>t</mi><mn>1</mn><mo>∗</mo><mi>w</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">sum1-sum2=rt2*w1-rt1*w2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord">2</span></span></span></span></span></p><p>当差值&gt;0，则i的优先级高，否则j高，据此排序，然后套用01背包板子。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">111111</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll maxx;</span><br><span class="line">    ll rd;</span><br><span class="line">    ll rt;    </span><br><span class="line">    <span class="comment">// friend bool operator &lt;(node a,node b)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     return b.rt*a.rd&gt;b.rd*a.rt;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// bool operator &lt;(const node &amp;b) const</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     return b.rt*rd&gt;b.rd*rt;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;pro[<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b.rt*a.rd&gt;b.rd*a.rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n,t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span>&gt;&gt;pro[i].maxx;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span>&gt;&gt;pro[i].rd;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span>&gt;&gt;pro[i].rt;</span><br><span class="line">    <span class="comment">// sort(pro+1,pro+n+1);</span></span><br><span class="line">    sort(pro+<span class="number">1</span>,pro+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ll j=t; j&gt;=pro[i].rt; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j]=max(dp[j],dp[j-pro[i].rt]+pro[i].maxx-j*pro[i].rd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=t; i&gt;=<span class="number">1</span>; i--) ans=max(dp[i],ans);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;   </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动态规划】牛客删括号</title>
      <link href="/2022/03/05/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%91%E7%89%9B%E5%AE%A2%E7%BE%8E%E4%B8%BD%E5%BA%8F%E5%88%97/"/>
      <url>/2022/03/05/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%91%E7%89%9B%E5%AE%A2%E7%BE%8E%E4%B8%BD%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/problem/21313" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>挺烦的一道题，反正我是没想出来。</p><p>其实也就是把所有情况考虑进去，因为n的范围很小，总和最多不会超过1600。</p><p>总共四维dp(i,j,k,z)，第一维很好想，就是表示前i个数，第二维表示第i个数的值，第三维表示是第k个连续递减的数，z表示前i个数的和。</p><p>状态转移挺繁琐的，分两种情况，一种是-1，另一种是定值。</p><p>对于-1的情况，遍历所有可能的值（0<sub>40）；因为有个连续递减的要求，所以再遍历一下前一个挨着的值，因为不知道是不是定值，所以可以直接遍历（0</sub>40）；然后还要遍历前i-1个数的和，因为有第二个条件；最后比较一下大小，转移即可。</p><p>看着挺烦的，实际也确实挺烦，需要根据条件限制把所有情况枚举一下。</p><p>也可以对部分循环条件进行下限制，不过问题不大，时间和空间都很充足的。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">44</span>][<span class="number">44</span>][<span class="number">4</span>][<span class="number">1644</span>];</span><br><span class="line">ll a[<span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">40</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[<span class="number">1</span>][i][<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> dp[<span class="number">1</span>][a[<span class="number">1</span>]][<span class="number">1</span>][a[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">40</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=<span class="number">40</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z=max((i<span class="number">-1</span>)*j,k); z&lt;=<span class="number">1600</span>-j; z++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(j&gt;=k)</span><br><span class="line">                        &#123;</span><br><span class="line">                            dp[i][j][<span class="number">1</span>][j+z]=(dp[i][j][<span class="number">1</span>][j+z]+dp[i<span class="number">-1</span>][k][<span class="number">1</span>][z]+dp[i<span class="number">-1</span>][k][<span class="number">2</span>][z])%mod;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            dp[i][j][<span class="number">2</span>][j+z]=(dp[i][j][<span class="number">2</span>][j+z]+dp[i<span class="number">-1</span>][k][<span class="number">1</span>][z])%mod;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=a[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=<span class="number">40</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> z=max((i<span class="number">-1</span>)*j,k); z&lt;=<span class="number">1600</span>-j; z++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[i][j][<span class="number">1</span>][j+z]=(dp[i][j][<span class="number">1</span>][j+z]+dp[i<span class="number">-1</span>][k][<span class="number">1</span>][z]+dp[i<span class="number">-1</span>][k][<span class="number">2</span>][z])%mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[i][j][<span class="number">2</span>][j+z]=(dp[i][j][<span class="number">2</span>][j+z]+dp[i<span class="number">-1</span>][k][<span class="number">1</span>][z])%mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[n]==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">40</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*n; j&lt;=<span class="number">1600</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=(ans+dp[n][i][<span class="number">1</span>][j]+dp[n][i][<span class="number">2</span>][j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;ans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=a[n]*n; j&lt;=<span class="number">1600</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=(ans+dp[n][a[n]][<span class="number">1</span>][j]+dp[n][a[n]][<span class="number">2</span>][j])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;   </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动态规划】牛客删括号</title>
      <link href="/2022/03/05/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%91%E7%89%9B%E5%AE%A2%E5%88%A0%E6%8B%AC%E5%8F%B7/"/>
      <url>/2022/03/05/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%91%E7%89%9B%E5%AE%A2%E5%88%A0%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/problem/21303" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>常规的dp题目，注意一个很重要的条件就是这个括号序列是合法的。</p><p>建个二维dp数组，用bool类型，dp(i,j)表示a序列前i个的符号经过删减后能否匹配b序列的前j个符号。</p><p>初始化不能忘，a序列前任意个符号都可以匹配0个符号的b序列。</p><p>状态转移可以分为两种：</p><p>1.当a[i]==b[j]时，直接从上一状态转移，即dp(i,j) |= dp(i-1,j-1)。</p><p>明显上述转移是不完全的，因为没有考虑删减的情况，所以</p><p>2.当a[i]<mark>’)'时，删掉一些()，从前i个符号中得到一个最长的序列，比如到k，dp(i,j) |= dp(k,j)。这样就能将一些删减的情况考虑到。(之所以不分析a[i]</mark>’)’，是因为此时无法从右开始删减，故不需考虑)</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">111</span>][<span class="number">111</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">111</span>],t[<span class="number">111</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ls=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> lt=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=ls; i++) dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=ls; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=lt; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==t[j]) dp[i][j]|=dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> k=i;</span><br><span class="line">                <span class="keyword">while</span>(cnt)<span class="comment">//从右边开始，删除一些连续的合法括号对</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[k<span class="number">-1</span>]==<span class="string">&#x27;(&#x27;</span>) cnt--;</span><br><span class="line">                    <span class="keyword">else</span> cnt++;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j]|=dp[k<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ()()() 4</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; ls&lt;&lt;&quot; &quot;&lt;&lt;lt&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">    <span class="comment">// for(int i=1; i&lt;=ls; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for(int j=1; j&lt;=lt; j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         cout&lt;&lt;dp[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span>(dp[ls][lt]) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Possible\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Impossible\n&quot;</span>;</span><br><span class="line">&#125;   </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【反悔贪心？！】18ccpc网络赛A</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8F%8D%E6%82%94%E8%B4%AA%E5%BF%83%EF%BC%9F%EF%BC%81%E3%80%9118ccpc%E7%BD%91%E7%BB%9C%E8%B5%9BA/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8F%8D%E6%82%94%E8%B4%AA%E5%BF%83%EF%BC%9F%EF%BC%81%E3%80%9118ccpc%E7%BD%91%E7%BB%9C%E8%B5%9BA/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>n个城市，从1走到n，商人每次可以在一个城市进行以下操作的1种（只能做一次）：</p><p>1、花费a[i]买一个物品。</p><p>2、卖出一个物品获得a[i]（前提是手里有物品）。</p><p>3、什么也不做。</p><p>商人手里一开始没有物品，同一时间他可能身上有多个物品。每次买或卖都花费1单位的时间。现使得利润最大，并且花费时间最短。</p><p><span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=6438" >例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>牛逼贪心，队友想dp想了好久，最后还是弃了，的确是个贪心。。。带点反悔。</p><p>比如，现在从A买一个花费了1，在B卖出收到了3，走到C发现在C卖更好，可以收到5，那么最后收入就是（-1+3-3+5）=4，其实就相当于以B作为了一个跳板，实际在A买，在C卖。所以呀，我们可以贪心，但是我们也允许反悔。</p><p>开一个优先队列，记录当前假买的物品，就是假装买入作为备选，如果新的地方的卖出价格＞堆顶，那么就在这卖出，这时候呢，堆顶B可能是之前A卖出物品的地方，那么就以这个堆顶作为一个跳板，实际相当于在A买，在C卖。那么你可能会想，既然反悔了，那么实际上我们可以在B买吧？确实有这个可能，所以当如果将一个地点作为卖出地点，那么会把这个价格加入队列两次，如代码中的解释。</p><p>对于次数的记录，我们只在卖的时候更新次数，因为之前是假买嘛，不一定真买了它，而如果将一个位置作为跳板，那么次数不会增加。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt;vis;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    vis.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(!q.size() || q.top()&gt;=x)<span class="comment">//假买</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;<span class="comment">//真买的时候才算次数</span></span><br><span class="line">            ans=ans+(x-q.top());<span class="comment">//加上差值</span></span><br><span class="line">            <span class="keyword">if</span>(vis[q.top()]&gt;<span class="number">0</span>)<span class="comment">//如果之前在q.top卖过，那就cnt--，当作跳板</span></span><br><span class="line">            &#123;</span><br><span class="line">                vis[q.top()]--;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            q.pop();</span><br><span class="line">            vis[x]++;<span class="comment">//在这卖过</span></span><br><span class="line">            q.push(x); q.push(x);</span><br><span class="line">            <span class="comment">//加的第一个表示之后可能反悔，那就作为跳板，之后访问肯定会先经过这个，而不是直接买这里的</span></span><br><span class="line">            <span class="comment">//第二个表示之后可能买这里的物品</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) q.pop();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;cnt*<span class="number">2</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反悔贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树形dp+点分治+bitset优化】17ccpc杭州e</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%A0%91%E5%BD%A2dp+%E7%82%B9%E5%88%86%E6%B2%BB+bitset%E4%BC%98%E5%8C%96%E3%80%9117ccpc%E6%9D%AD%E5%B7%9Ee/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%A0%91%E5%BD%A2dp+%E7%82%B9%E5%88%86%E6%B2%BB+bitset%E4%BC%98%E5%8C%96%E3%80%9117ccpc%E6%9D%AD%E5%B7%9Ee/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>一棵树，n个点，每个点有一个权值，取任意子图的权值和，问1~m中哪些数字出现过。</p><p><span class="exturl"><a class="exturl__link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=6268" >例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>n最大3000貌似，没法暴力写，想办法搞出所有子图的权值。因为是树，那么就有可操作的空间了。点分治吧，没有想到。找中心，分治算，每次分治的子图，都包括当前重心，当搜索子树时，要带着当前父节点的bitset，从子节点回来的时候也要更新父节点。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e4</span>+<span class="number">9</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;100009&gt;b[<span class="number">3009</span>];</span><br><span class="line"><span class="built_in">bitset</span>&lt;100009&gt;ans;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms];</span><br><span class="line"><span class="keyword">int</span> n,m,tot;</span><br><span class="line"><span class="keyword">int</span> sz[ms],we[ms];</span><br><span class="line"><span class="keyword">int</span> del[ms];</span><br><span class="line"><span class="keyword">int</span> w[ms];</span><br><span class="line"><span class="keyword">int</span> rt,r_size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>;</span><br><span class="line">    we[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v!=f &amp;&amp; !del[v])</span><br><span class="line">        &#123;</span><br><span class="line">            getroot(v,u);</span><br><span class="line">            sz[u]+=sz[v];</span><br><span class="line">            we[u]=max(we[u],sz[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    we[u]=max(we[u],r_size-sz[u]);</span><br><span class="line">    <span class="keyword">if</span>(we[u]&lt;we[rt]) rt=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span><span class="comment">//进入子节点时，会带着父节点的信息一起进去</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[u]&lt;&lt;=w[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!del[v] &amp;&amp; f!=v)</span><br><span class="line">        &#123;</span><br><span class="line">            b[v]=b[u];</span><br><span class="line">            cal(v,u);</span><br><span class="line">            b[u]|=b[v];<span class="comment">//回溯时，子节点会把信息给父节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    del[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;u&lt;&lt;&quot;=============\n&quot;;</span></span><br><span class="line">    b[u].reset();</span><br><span class="line">    b[u].<span class="built_in">set</span>(<span class="number">0</span>);<span class="comment">//方便之后cal</span></span><br><span class="line">    cal(u,<span class="number">0</span>);</span><br><span class="line">    ans|=b[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!del[v])</span><br><span class="line">        &#123;</span><br><span class="line">            we[rt=<span class="number">0</span>]=r_size=sz[v];</span><br><span class="line">            getroot(v,<span class="number">0</span>);</span><br><span class="line">            getroot(rt,<span class="number">0</span>);</span><br><span class="line">            divide(rt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        head[i]=sz[i]=we[i]=del[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ans.reset();</span><br><span class="line">    we[rt=<span class="number">0</span>]=r_size=n;</span><br><span class="line">    getroot(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    getroot(rt,<span class="number">0</span>);</span><br><span class="line">    divide(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 区域赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形dp </tag>
            
            <tag> 点分治 </tag>
            
            <tag> bitset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维+二进制】20ccpc绵阳L</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%9120ccpc%E7%BB%B5%E9%98%B3L/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E4%BA%8C%E8%BF%9B%E5%88%B6%E3%80%9120ccpc%E7%BB%B5%E9%98%B3L/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>n个盒子，第i个盒子有xi个球，其中每个球的分数都是2^ai，现任意取球，也可以不取，有多少种得分可能。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/102822/problem/L" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>每个球个分数可以看作是二进制中某一位，因为多取相当于可以进位，所以不同盒子的得分可能有关系，比如这样一组样例：4个0，1个1，1个3。多拿几个0分的球，就可以影响到1分的球，但是就算把4个0的球和1个1的球得分加一起，也无法影响到分数为3的球。</p><p>所以可见，我们可以求每一段连续的段的答案，然后这些段的答案相乘就是最终答案，可以相乘是因为它们互不影响。</p><p>那么，连续的那一部分的答案该怎么求呢？</p><p>其实也很简单，只要把当前段的最低位看作0起始位，然后把它们求和即可，比如上面那个，答案就是4*2^0 + 2^1 + 1=7。加1是都不选的情况，即0的情况。对于那个3，情况就是1+1=2。</p><p>所以最终答案就是7*2=14。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line">ll two[<span class="number">10000009</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll a;</span><br><span class="line">    ll x;</span><br><span class="line">&#125;p[ms];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.a&lt;y.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ca;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i].a&gt;&gt;p[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp);</span><br><span class="line">    ll ans=<span class="number">1</span>;<span class="comment">//最终答案</span></span><br><span class="line"></span><br><span class="line">    ll now=p[<span class="number">1</span>].x;<span class="comment">//当前最高位的值</span></span><br><span class="line">    ll maxx=p[<span class="number">1</span>].a;<span class="comment">//当前最高位</span></span><br><span class="line"></span><br><span class="line">    ll sum=p[<span class="number">1</span>].x;<span class="comment">//当前方案数，即总和</span></span><br><span class="line"></span><br><span class="line">    ll minn=p[<span class="number">1</span>].a;<span class="comment">//当前最低位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((p[i].a-maxx)&lt;=<span class="number">61</span> &amp;&amp; (now&gt;&gt;(p[i].a-maxx))&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            now=(now&gt;&gt;(p[i].a-maxx));</span><br><span class="line">            maxx=p[i].a;</span><br><span class="line">            sum=(sum+(two[p[i].a-minn]*p[i].x)%mod)%mod;</span><br><span class="line">            now=now+p[i].x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans=ans*(sum+<span class="number">1</span>)%mod;</span><br><span class="line">            now=p[i].x;</span><br><span class="line">            maxx=p[i].a;</span><br><span class="line">            minn=p[i].a;</span><br><span class="line">            sum=p[i].x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=ans*(sum+<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case #&quot;</span>&lt;&lt;++ca&lt;&lt;<span class="string">&quot;: &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line">    two[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        two[i]=two[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 区域赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【二分+欧拉序+交互】746div2D</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%88%86+%E6%AC%A7%E6%8B%89%E5%BA%8F+%E4%BA%A4%E4%BA%92%E3%80%91746div2D/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%88%86+%E6%AC%A7%E6%8B%89%E5%BA%8F+%E4%BA%A4%E4%BA%92%E3%80%91746div2D/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>一棵树，n个点，n-1条边都给出来，每个边有一个隐藏的权值。每次询问一个点集，点集中任意两点的距离为路径边权的gcd，返回最大的距离。找到是哪两个点的距离最大。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/contest/1592/problem/D" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>明显，最后这个最大距离一定是某条边，根据条件，最多询问12次，n是1000，猜到是log级别的算法。二分二分，这种简单交互题大部分是二分。每次询问一些相邻的点集比较好，因为所有边都能找到，怎么搞呢？dfs序或者欧拉序，拿个数组记录一下，那么这里面的区间，一定是相邻的一些点。</p><p>注意二分到最后要输出那条边，所以l+1==r是结束条件，看代码中的二分部分。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gg(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">&quot;: &quot;</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e4</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> a[ms];</span><br><span class="line"><span class="keyword">bool</span> vis[ms];</span><br><span class="line"><span class="keyword">int</span> b[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span><span class="comment">//欧拉序，很多种写法。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[++cnt]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        a[++cnt]=u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;? &quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l; i&lt;=r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[a[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c++;</span><br><span class="line">            vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">            b[c]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=c; i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b[i];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        add(u,v); add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> maxn=check(<span class="number">1</span>,cnt);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=cnt;</span><br><span class="line">    <span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)<span class="comment">//因为最后是l+1==r，所以注意下面二分的写法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// gg(l);gg(r);</span></span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(l,mid)==maxn)</span><br><span class="line">        &#123;</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> l=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;! &quot;</span>&lt;&lt;a[l]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[r]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分或三分 </tag>
            
            <tag> 欧拉序 </tag>
            
            <tag> 交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法速成</title>
      <link href="/2022/01/27/Python/Python%E8%AF%AD%E6%B3%95%E9%80%9F%E6%88%90/"/>
      <url>/2022/01/27/Python/Python%E8%AF%AD%E6%B3%95%E9%80%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>一些比较常用的语法。</p><p>转自：<span class="exturl"><a class="exturl__link"   href="https://github.com/luogu-dev/cyaron/wiki/Python-30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97" >Python快速入门</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用井字符开头的是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 多行字符串用三个引号</span></span><br><span class="line"><span class="string">    包裹，也常被用来做多</span></span><br><span class="line"><span class="string">    行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 1. 原始数据类型和运算符</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数</span></span><br><span class="line"><span class="number">3</span>  <span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 算术没有什么出乎意料的，浮点数加法可能会有误差</span></span><br><span class="line"><span class="number">1</span> + <span class="number">1</span>  <span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="number">8</span> - <span class="number">1</span>  <span class="comment"># =&gt; 7</span></span><br><span class="line"><span class="number">10</span> * <span class="number">2</span>  <span class="comment"># =&gt; 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是除法例外，会自动转换成浮点数</span></span><br><span class="line"><span class="number">35</span> / <span class="number">5</span>  <span class="comment"># =&gt; 7.0</span></span><br><span class="line"><span class="number">5</span> / <span class="number">3</span>  <span class="comment"># =&gt; 1.6666666666666667</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数除法的结果都是向下取整</span></span><br><span class="line"><span class="number">5</span> // <span class="number">3</span>     <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="number">5.0</span> // <span class="number">3.0</span> <span class="comment"># =&gt; 1.0 # 浮点数也可以</span></span><br><span class="line">-<span class="number">5</span> // <span class="number">3</span>  <span class="comment"># =&gt; -2</span></span><br><span class="line">-<span class="number">5.0</span> // <span class="number">3.0</span> <span class="comment"># =&gt; -2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数的运算结果也是浮点数</span></span><br><span class="line"><span class="number">3</span> * <span class="number">2.0</span> <span class="comment"># =&gt; 6.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模除</span></span><br><span class="line"><span class="number">7</span> % <span class="number">3</span> <span class="comment"># =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x的y次方</span></span><br><span class="line"><span class="number">2</span>**<span class="number">4</span> <span class="comment"># =&gt; 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用括号决定优先级</span></span><br><span class="line">(<span class="number">1</span> + <span class="number">3</span>) * <span class="number">2</span>  <span class="comment"># =&gt; 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用not取非</span></span><br><span class="line"><span class="keyword">not</span> <span class="literal">True</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="keyword">not</span> <span class="literal">False</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符，注意and和or都是小写</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span> <span class="comment">#=&gt; False</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="comment">#=&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数也可以当作布尔值</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="comment">#=&gt; 0</span></span><br><span class="line">-<span class="number">5</span> <span class="keyword">or</span> <span class="number">0</span> <span class="comment">#=&gt; -5</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">False</span> <span class="comment">#=&gt; True</span></span><br><span class="line"><span class="number">2</span> == <span class="literal">True</span> <span class="comment">#=&gt; False</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">True</span> <span class="comment">#=&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用==判断相等</span></span><br><span class="line"><span class="number">1</span> == <span class="number">1</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> == <span class="number">1</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用!=判断不等</span></span><br><span class="line"><span class="number">1</span> != <span class="number">1</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">2</span> != <span class="number">1</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较大小</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">10</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="number">10</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">2</span> &lt;= <span class="number">2</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &gt;= <span class="number">2</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小比较可以连起来！</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &lt; <span class="number">3</span> &lt; <span class="number">2</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串用单引双引都可以</span></span><br><span class="line"><span class="string">&quot;这是个字符串&quot;</span></span><br><span class="line"><span class="string">&#x27;这也是个字符串&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用加号连接字符串</span></span><br><span class="line"><span class="string">&quot;Hello &quot;</span> + <span class="string">&quot;world!&quot;</span>  <span class="comment"># =&gt; &quot;Hello world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串可以被当作字符列表</span></span><br><span class="line"><span class="string">&quot;This is a string&quot;</span>[<span class="number">0</span>]  <span class="comment"># =&gt; &#x27;T&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用.format来格式化字符串</span></span><br><span class="line"><span class="string">&quot;&#123;&#125; can be &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;strings&quot;</span>, <span class="string">&quot;interpolated&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以重复参数以节省时间</span></span><br><span class="line"><span class="string">&quot;&#123;0&#125; be nimble, &#123;0&#125; be quick, &#123;0&#125; jump over the &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;candle stick&quot;</span>)</span><br><span class="line"><span class="comment">#=&gt; &quot;Jack be nimble, Jack be quick, Jack jump over the candle stick&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不想数参数，可以用关键字</span></span><br><span class="line"><span class="string">&quot;&#123;name&#125; wants to eat &#123;food&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;Bob&quot;</span>, food=<span class="string">&quot;lasagna&quot;</span>) <span class="comment">#=&gt; &quot;Bob wants to eat lasagna&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你的Python3程序也要在Python2.5以下环境运行，也可以用老式的格式化语法</span></span><br><span class="line"><span class="string">&quot;%s can be %s the %s way&quot;</span> % (<span class="string">&quot;strings&quot;</span>, <span class="string">&quot;interpolated&quot;</span>, <span class="string">&quot;old&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># None是一个对象</span></span><br><span class="line"><span class="literal">None</span>  <span class="comment"># =&gt; None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当与None进行比较时不要用 ==，要用is。is是用来比较两个变量是否指向同一个对象。</span></span><br><span class="line"><span class="string">&quot;etc&quot;</span> <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="literal">None</span> <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># None，0，空字符串，空列表，空字典都算是False</span></span><br><span class="line"><span class="comment"># 所有其他值都是True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>)  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>([]) <span class="comment">#=&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(&#123;&#125;) <span class="comment">#=&gt; False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 2. 变量和集合</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print是内置的打印函数</span></span><br><span class="line">print(<span class="string">&quot;I&#x27;m Python. Nice to meet you!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在给变量赋值前不用提前声明</span></span><br><span class="line"><span class="comment"># 传统的变量命名是小写，用下划线分隔单词</span></span><br><span class="line">some_var = <span class="number">5</span></span><br><span class="line">some_var  <span class="comment"># =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问未赋值的变量会抛出异常</span></span><br><span class="line"><span class="comment"># 参考流程控制一段来学习异常处理</span></span><br><span class="line">some_unknown_var  <span class="comment"># 抛出NameError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用列表(list)储存序列</span></span><br><span class="line">li = []</span><br><span class="line"><span class="comment"># 创建列表时也可以同时赋给元素</span></span><br><span class="line">other_li = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用append在列表最后追加元素</span></span><br><span class="line">li.append(<span class="number">1</span>)    <span class="comment"># li现在是[1]</span></span><br><span class="line">li.append(<span class="number">2</span>)    <span class="comment"># li现在是[1, 2]</span></span><br><span class="line">li.append(<span class="number">4</span>)    <span class="comment"># li现在是[1, 2, 4]</span></span><br><span class="line">li.append(<span class="number">3</span>)    <span class="comment"># li现在是[1, 2, 4, 3]</span></span><br><span class="line"><span class="comment"># 用pop从列表尾部删除</span></span><br><span class="line">li.pop()        <span class="comment"># =&gt; 3 且li现在是[1, 2, 4]</span></span><br><span class="line"><span class="comment"># 把3再放回去</span></span><br><span class="line">li.append(<span class="number">3</span>)    <span class="comment"># li变回[1, 2, 4, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表存取跟数组一样</span></span><br><span class="line">li[<span class="number">0</span>]  <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># 取出最后一个元素</span></span><br><span class="line">li[-<span class="number">1</span>]  <span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 越界存取会造成IndexError</span></span><br><span class="line">li[<span class="number">4</span>]  <span class="comment"># 抛出IndexError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表有切割语法</span></span><br><span class="line">li[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># =&gt; [2, 4]</span></span><br><span class="line"><span class="comment"># 取尾</span></span><br><span class="line">li[<span class="number">2</span>:]  <span class="comment"># =&gt; [4, 3]</span></span><br><span class="line"><span class="comment"># 取头</span></span><br><span class="line">li[:<span class="number">3</span>]  <span class="comment"># =&gt; [1, 2, 4]</span></span><br><span class="line"><span class="comment"># 隔一个取一个</span></span><br><span class="line">li[::<span class="number">2</span>]   <span class="comment"># =&gt;[1, 4]</span></span><br><span class="line"><span class="comment"># 倒排列表</span></span><br><span class="line">li[::-<span class="number">1</span>]   <span class="comment"># =&gt; [3, 4, 2, 1]</span></span><br><span class="line"><span class="comment"># 可以用三个参数的任何组合来构建切割</span></span><br><span class="line"><span class="comment"># li[始:终:步伐]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用del删除任何一个元素</span></span><br><span class="line"><span class="keyword">del</span> li[<span class="number">2</span>]   <span class="comment"># li is now [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表可以相加</span></span><br><span class="line"><span class="comment"># 注意：li和other_li的值都不变</span></span><br><span class="line">li + other_li   <span class="comment"># =&gt; [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用extend拼接列表</span></span><br><span class="line">li.extend(other_li)   <span class="comment"># li现在是[1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用in测试列表是否包含值</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> li   <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用len取列表长度</span></span><br><span class="line"><span class="built_in">len</span>(li)   <span class="comment"># =&gt; 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组是不可改变的序列</span></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tup[<span class="number">0</span>]   <span class="comment"># =&gt; 1</span></span><br><span class="line">tup[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># 抛出TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表允许的操作元组大都可以</span></span><br><span class="line"><span class="built_in">len</span>(tup)   <span class="comment"># =&gt; 3</span></span><br><span class="line">tup + (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)   <span class="comment"># =&gt; (1, 2, 3, 4, 5, 6)</span></span><br><span class="line">tup[:<span class="number">2</span>]   <span class="comment"># =&gt; (1, 2)</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> tup   <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把元组合列表解包，赋值给变量</span></span><br><span class="line">a, b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)     <span class="comment"># 现在a是1，b是2，c是3</span></span><br><span class="line"><span class="comment"># 元组周围的括号是可以省略的</span></span><br><span class="line">d, e, f = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="comment"># 交换两个变量的值就这么简单</span></span><br><span class="line">e, d = d, e     <span class="comment"># 现在d是5，e是4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用字典表达映射关系</span></span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line"><span class="comment"># 初始化的字典</span></span><br><span class="line">filled_dict = &#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用[]取值</span></span><br><span class="line">filled_dict[<span class="string">&quot;one&quot;</span>]   <span class="comment"># =&gt; 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用keys获得所有的键。因为keys返回一个可迭代对象，所以在这里把结果包在list里。我们下面会详细介绍可迭代。</span></span><br><span class="line"><span class="comment"># 注意：字典键的顺序是不定的，你得到的结果可能和以下不同。</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.keys())   <span class="comment"># =&gt; [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用values获得所有的值。跟keys一样，要用list包起来，顺序也可能不同。</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.values())   <span class="comment"># =&gt; [3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用in测试一个字典是否包含一个键</span></span><br><span class="line"><span class="string">&quot;one&quot;</span> <span class="keyword">in</span> filled_dict   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> filled_dict   <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问不存在的键会导致KeyError</span></span><br><span class="line">filled_dict[<span class="string">&quot;four&quot;</span>]   <span class="comment"># KeyError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用get来避免KeyError</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;one&quot;</span>)   <span class="comment"># =&gt; 1</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;four&quot;</span>)   <span class="comment"># =&gt; None</span></span><br><span class="line"><span class="comment"># 当键不存在的时候get方法可以返回默认值</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;one&quot;</span>, <span class="number">4</span>)   <span class="comment"># =&gt; 1</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;four&quot;</span>, <span class="number">4</span>)   <span class="comment"># =&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setdefault方法只有当键不存在的时候插入新值</span></span><br><span class="line">filled_dict.setdefault(<span class="string">&quot;five&quot;</span>, <span class="number">5</span>)  <span class="comment"># filled_dict[&quot;five&quot;]设为5</span></span><br><span class="line">filled_dict.setdefault(<span class="string">&quot;five&quot;</span>, <span class="number">6</span>)  <span class="comment"># filled_dict[&quot;five&quot;]还是5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典赋值</span></span><br><span class="line">filled_dict.update(&#123;<span class="string">&quot;four&quot;</span>:<span class="number">4</span>&#125;) <span class="comment">#=&gt; &#123;&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3, &quot;four&quot;: 4&#125;</span></span><br><span class="line">filled_dict[<span class="string">&quot;four&quot;</span>] = <span class="number">4</span>  <span class="comment"># 另一种赋值方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用del删除</span></span><br><span class="line"><span class="keyword">del</span> filled_dict[<span class="string">&quot;one&quot;</span>]  <span class="comment"># 从filled_dict中把one删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用set表达集合</span></span><br><span class="line">empty_set = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># 初始化一个集合，语法跟字典相似。</span></span><br><span class="line">some_set = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;   <span class="comment"># some_set现在是&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把集合赋值于变量</span></span><br><span class="line">filled_set = some_set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为集合添加元素</span></span><br><span class="line">filled_set.add(<span class="number">5</span>)   <span class="comment"># filled_set现在是&#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; 取交集</span></span><br><span class="line">other_set = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">filled_set &amp; other_set   <span class="comment"># =&gt; &#123;3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | 取并集</span></span><br><span class="line">filled_set | other_set   <span class="comment"># =&gt; &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 取补集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; - &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;   <span class="comment"># =&gt; &#123;1, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in 测试集合是否包含元素</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> filled_set   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">in</span> filled_set   <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 3. 流程控制和迭代器</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先随便定义一个变量</span></span><br><span class="line">some_var = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是个if语句。注意缩进在Python里是有意义的</span></span><br><span class="line"><span class="comment"># 印出&quot;some_var比10小&quot;</span></span><br><span class="line"><span class="keyword">if</span> some_var &gt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">&quot;some_var比10大&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> some_var &lt; <span class="number">10</span>:    <span class="comment"># elif句是可选的</span></span><br><span class="line">    print(<span class="string">&quot;some_var比10小&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:                  <span class="comment"># else也是可选的</span></span><br><span class="line">    print(<span class="string">&quot;some_var就是10&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环语句遍历列表</span></span><br><span class="line"><span class="string">打印:</span></span><br><span class="line"><span class="string">    dog is a mammal</span></span><br><span class="line"><span class="string">    cat is a mammal</span></span><br><span class="line"><span class="string">    mouse is a mammal</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> [<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>]:</span><br><span class="line">    print(<span class="string">&quot;&#123;&#125; is a mammal&quot;</span>.<span class="built_in">format</span>(animal))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;range(number)&quot;返回数字列表从0到给的数字</span></span><br><span class="line"><span class="string">打印:</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">while循环直到条件不满足</span></span><br><span class="line"><span class="string">打印:</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">4</span>:</span><br><span class="line">    print(x)</span><br><span class="line">    x += <span class="number">1</span>  <span class="comment"># x = x + 1 的简写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用try/except块处理异常状况</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 用raise抛出异常</span></span><br><span class="line">    <span class="keyword">raise</span> IndexError(<span class="string">&quot;This is an index error&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span>    <span class="comment"># pass是无操作，但是应该在这里处理错误</span></span><br><span class="line"><span class="keyword">except</span> (TypeError, NameError):</span><br><span class="line">    <span class="keyword">pass</span>    <span class="comment"># 可以同时处理不同类的错误</span></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment"># else语句是可选的，必须在所有的except之后</span></span><br><span class="line">    print(<span class="string">&quot;All good!&quot;</span>)   <span class="comment"># 只有当try运行完没有错误的时候这句才会运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python提供一个叫做可迭代(iterable)的基本抽象。一个可迭代对象是可以被当作序列</span></span><br><span class="line"><span class="comment"># 的对象。比如说上面range返回的对象就是可迭代的。</span></span><br><span class="line"></span><br><span class="line">filled_dict = &#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line">our_iterable = filled_dict.keys()</span><br><span class="line">print(our_iterable) <span class="comment"># =&gt; range(1,10) 是一个实现可迭代接口的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代对象可以遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> our_iterable:</span><br><span class="line">    print(i)    <span class="comment"># 打印 one, two, three</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是不可以随机访问</span></span><br><span class="line">our_iterable[<span class="number">1</span>]  <span class="comment"># 抛出TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代对象知道怎么生成迭代器</span></span><br><span class="line">our_iterator = <span class="built_in">iter</span>(our_iterable)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代器是一个可以记住遍历的位置的对象</span></span><br><span class="line"><span class="comment"># 用__next__可以取得下一个元素</span></span><br><span class="line">our_iterator.__next__()  <span class="comment">#=&gt; &quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再一次调取__next__时会记得位置</span></span><br><span class="line">our_iterator.__next__()  <span class="comment">#=&gt; &quot;two&quot;</span></span><br><span class="line">our_iterator.__next__()  <span class="comment">#=&gt; &quot;three&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当迭代器所有元素都取出后，会抛出StopIteration</span></span><br><span class="line">our_iterator.__next__() <span class="comment"># 抛出StopIteration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用list一次取出迭代器所有的元素</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.keys())  <span class="comment">#=&gt; Returns [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 4. 函数</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用def定义新函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    print(<span class="string">&quot;x is &#123;&#125; and y is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x, y))</span><br><span class="line">    <span class="keyword">return</span> x + y    <span class="comment"># 用return语句返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">add(<span class="number">5</span>, <span class="number">6</span>)   <span class="comment"># =&gt; 印出&quot;x is 5 and y is 6&quot;并且返回11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用关键字参数来调用函数</span></span><br><span class="line">add(y=<span class="number">6</span>, x=<span class="number">5</span>)   <span class="comment"># 关键字参数可以用任何顺序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以定义一个可变参数函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">varargs</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line">varargs(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)   <span class="comment"># =&gt; (1, 2, 3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们也可以定义一个关键字可变参数函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyword_args</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> kwargs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们来看看结果是什么：</span></span><br><span class="line">keyword_args(big=<span class="string">&quot;foot&quot;</span>, loch=<span class="string">&quot;ness&quot;</span>)   <span class="comment"># =&gt; &#123;&quot;big&quot;: &quot;foot&quot;, &quot;loch&quot;: &quot;ness&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两种可变参数可以混着用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_the_args</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">all_the_args(1, 2, a=3, b=4) prints:</span></span><br><span class="line"><span class="string">    (1, 2)</span></span><br><span class="line"><span class="string">    &#123;&quot;a&quot;: 3, &quot;b&quot;: 4&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用可变参数函数时可以做跟上面相反的，用*展开序列，用**展开字典。</span></span><br><span class="line">args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">3</span>, <span class="string">&quot;b&quot;</span>: <span class="number">4</span>&#125;</span><br><span class="line">all_the_args(*args)   <span class="comment"># 相当于 foo(1, 2, 3, 4)</span></span><br><span class="line">all_the_args(**kwargs)   <span class="comment"># 相当于 foo(a=3, b=4)</span></span><br><span class="line">all_the_args(*args, **kwargs)   <span class="comment"># 相当于 foo(1, 2, 3, 4, a=3, b=4)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数作用域</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setX</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="comment"># 局部作用域的x和全局域的x是不同的</span></span><br><span class="line">    x = num <span class="comment"># =&gt; 43</span></span><br><span class="line">    <span class="built_in">print</span> (x) <span class="comment"># =&gt; 43</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setGlobalX</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="built_in">print</span> (x) <span class="comment"># =&gt; 5</span></span><br><span class="line">    x = num <span class="comment"># 现在全局域的x被赋值</span></span><br><span class="line">    <span class="built_in">print</span> (x) <span class="comment"># =&gt; 6</span></span><br><span class="line"></span><br><span class="line">setX(<span class="number">43</span>)</span><br><span class="line">setGlobalX(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数在Python是一等公民</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_adder</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">add_10 = create_adder(<span class="number">10</span>)</span><br><span class="line">add_10(<span class="number">3</span>)   <span class="comment"># =&gt; 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也有匿名函数</span></span><br><span class="line">(<span class="keyword">lambda</span> x: x &gt; <span class="number">2</span>)(<span class="number">3</span>)   <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置的高阶函数</span></span><br><span class="line"><span class="built_in">map</span>(add_10, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])   <span class="comment"># =&gt; [11, 12, 13]</span></span><br><span class="line"><span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])   <span class="comment"># =&gt; [6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用列表推导式可以简化映射和过滤。列表推导式的返回值是另一个列表。</span></span><br><span class="line">[add_10(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]  <span class="comment"># =&gt; [11, 12, 13]</span></span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] <span class="keyword">if</span> x &gt; <span class="number">5</span>]   <span class="comment"># =&gt; [6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 5. 类</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个继承object的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类属性，被所有此类的实例共用。</span></span><br><span class="line">    species = <span class="string">&quot;H. sapiens&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造方法，当实例被初始化时被调用。注意名字前后的双下划线，这是表明这个属</span></span><br><span class="line">    <span class="comment"># 性或方法对Python有特殊意义，但是允许用户自行定义。你自己取名时不应该用这</span></span><br><span class="line">    <span class="comment"># 种格式。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="comment"># Assign the argument to the instance&#x27;s name attribute</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法，第一个参数总是self，就是这个实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;name&#125;: &#123;message&#125;&quot;</span>.<span class="built_in">format</span>(name=self.name, message=msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法，被所有此类的实例共用。第一个参数是这个类对象。</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_species</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls.species</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法。调用时没有实例或类的绑定。</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grunt</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;*grunt*&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造一个实例</span></span><br><span class="line">i = Human(name=<span class="string">&quot;Ian&quot;</span>)</span><br><span class="line">print(i.say(<span class="string">&quot;hi&quot;</span>))     <span class="comment"># 印出 &quot;Ian: hi&quot;</span></span><br><span class="line"></span><br><span class="line">j = Human(<span class="string">&quot;Joel&quot;</span>)</span><br><span class="line">print(j.say(<span class="string">&quot;hello&quot;</span>))  <span class="comment"># 印出 &quot;Joel: hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用一个类方法</span></span><br><span class="line">i.get_species()   <span class="comment"># =&gt; &quot;H. sapiens&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改一个共用的类属性</span></span><br><span class="line">Human.species = <span class="string">&quot;H. neanderthalensis&quot;</span></span><br><span class="line">i.get_species()   <span class="comment"># =&gt; &quot;H. neanderthalensis&quot;</span></span><br><span class="line">j.get_species()   <span class="comment"># =&gt; &quot;H. neanderthalensis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">Human.grunt()   <span class="comment"># =&gt; &quot;*grunt*&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 6. 模块</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用import导入模块</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.sqrt(<span class="number">16</span>))  <span class="comment"># =&gt; 4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以从模块中导入个别值</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil, floor</span><br><span class="line">print(ceil(<span class="number">3.7</span>))  <span class="comment"># =&gt; 4.0</span></span><br><span class="line">print(floor(<span class="number">3.7</span>))   <span class="comment"># =&gt; 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以导入一个模块中所有值</span></span><br><span class="line"><span class="comment"># 警告：不建议这么做</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如此缩写模块名字</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line">math.sqrt(<span class="number">16</span>) == m.sqrt(<span class="number">16</span>)   <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python模块其实就是普通的Python文件。你可以自己写，然后导入，</span></span><br><span class="line"><span class="comment"># 模块的名字就是文件的名字。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以这样列出一个模块里所有的值</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">dir</span>(math)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 7. 高级用法</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用生成器(generators)方便地写惰性运算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_numbers</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> i + i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器只有在需要时才计算下一个值。它们每一次循环只生成一个值，而不是把所有的</span></span><br><span class="line"><span class="comment"># 值全部算好。这意味着double_numbers不会生成大于15的数字。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># range的返回值也是一个生成器，不然一个1到900000000的列表会花很多时间和内存。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果你想用一个Python的关键字当作变量名，可以加一个下划线来区分。</span></span><br><span class="line">range_ = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">900000000</span>)</span><br><span class="line"><span class="comment"># 当找到一个 &gt;=30 的结果就会停</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> double_numbers(range_):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【tarjan求割点】gym103107G</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90tarjan%E6%B1%82%E5%89%B2%E7%82%B9%E3%80%91gym103107G/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90tarjan%E6%B1%82%E5%89%B2%E7%82%B9%E3%80%91gym103107G/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>一个图，#表示石头，.表示空，现在要放一个石头，问最多形成几个连通块。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/103107/problem/G" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>tarjan求割点。简简单单求个割点，注意空间开够，不然会wa。最最重要的是要特判所有连通块里面的.都是1的情况，这种情况，放一个石头，连通块数目会减少。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">20000009</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">2111</span>][<span class="number">2111</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> num,cut[N],dfn[N],low[N];</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> ine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++num;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v,i);</span><br><span class="line">            low[u]=min(low[v],low[u]);</span><br><span class="line">            <span class="keyword">if</span>(low[v]&gt;=dfn[u])</span><br><span class="line">            &#123;</span><br><span class="line">                flag++;</span><br><span class="line">                <span class="keyword">if</span>(flag&gt;<span class="number">1</span> || u!=root) cut[u]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))</span><br><span class="line">            low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s[i]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m+<span class="number">1</span>; i++)<span class="comment">//处理边界</span></span><br><span class="line">    &#123;</span><br><span class="line">        s[<span class="number">0</span>][i]=s[n+<span class="number">1</span>][i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i][<span class="number">0</span>]=s[i][m+<span class="number">1</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sem=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dan=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==<span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            sem++;</span><br><span class="line">            vis[(i<span class="number">-1</span>)*m+j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> dx,dy;</span><br><span class="line">            dx=i+<span class="number">1</span>; dy=j;</span><br><span class="line">            <span class="keyword">if</span>(s[dx][dy]==<span class="string">&#x27;.&#x27;</span>)<span class="comment">//连边</span></span><br><span class="line">            &#123;</span><br><span class="line">                add((i<span class="number">-1</span>)*m+j,(dx<span class="number">-1</span>)*m+dy);</span><br><span class="line">                add((dx<span class="number">-1</span>)*m+dy,(i<span class="number">-1</span>)*m+j);</span><br><span class="line">                vis[(dx<span class="number">-1</span>)*m+dy]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dx=i; dy=j+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[dx][dy]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                add((i<span class="number">-1</span>)*m+j,(dx<span class="number">-1</span>)*m+dy);</span><br><span class="line">                add((dx<span class="number">-1</span>)*m+dy,(i<span class="number">-1</span>)*m+j);</span><br><span class="line">                vis[(dx<span class="number">-1</span>)*m+dy]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n*m; i++)<span class="comment">//跑个tarjan割点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]&amp;&amp;vis[i]) </span><br><span class="line">        &#123;</span><br><span class="line">            now++;</span><br><span class="line">            root=i;</span><br><span class="line">            tarjan(i,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n*m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;i&lt;&lt;&quot; : &quot;&lt;&lt;cut[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">        maxx=max(cut[i],maxx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sem==now) <span class="built_in">cout</span>&lt;&lt;now<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;<span class="comment">//特判</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;now+maxx&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);  </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//  srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最小生成树+笛卡尔积】gym103098C</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91+%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%E3%80%91gym103098C/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91+%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%E3%80%91gym103098C/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>两个连通图，按照题中的规则构建一棵笛卡尔积树，总点数为n1*n2，现求出该笛卡尔积树的最小生成树的权值和。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/103098" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>根据规则，容易知道n1中每个点都和n2中每个点构成n2个新点，如图。使用kruskal算法将两个图的边权放一起排序，选择边权小的边，新图中亦有多条和该边权值一样的边，所以在新图中一定会选择，但是不能构成环。所以每选择一条n1中的边，那么n1中可用的点就–，对n2也一样。另外，对两个图，它们自身的点也不能构成环。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> n1,n2,m1,m2;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> fa1[ms],fa2[ms];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">ll val;</span><br><span class="line">&#125;e[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa1[x]==x?x:fa1[x]=find1(fa1[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find2</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa2[x]==x?x:fa2[x]=find2(fa2[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.val&lt;y.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll c1=n1,c2=n2,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=e[i].u;</span><br><span class="line"><span class="keyword">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">int</span> k=e[i].k;</span><br><span class="line"><span class="keyword">int</span> w=e[i].val;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)<span class="comment">//分别并查集查找,因为它们自己也不能形成环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> fu=find1(u);</span><br><span class="line"><span class="keyword">int</span> fv=find1(v);</span><br><span class="line"><span class="keyword">if</span>(fu==fv) <span class="keyword">continue</span>;</span><br><span class="line">fa1[fu]=fv;</span><br><span class="line">ans+=c2*w;</span><br><span class="line">c1--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> fu=find2(u);</span><br><span class="line"><span class="keyword">int</span> fv=find2(v);</span><br><span class="line"><span class="keyword">if</span>(fu==fv) <span class="keyword">continue</span>;</span><br><span class="line">fa2[fu]=fv;</span><br><span class="line">ans+=c1*w;</span><br><span class="line">c2--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c1==<span class="number">1</span>&amp;&amp;c2==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n1&gt;&gt;m1&gt;&gt;n2&gt;&gt;m2;</span><br><span class="line">n=n1+n2;m=m1+m2;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m1; i++,j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">u++; v++;</span><br><span class="line">e[j].u=u; e[j].v=v; e[j].val=w; e[j].k=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m2; i++,j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">u++,v++;</span><br><span class="line">e[j].u=u; e[j].v=v; e[j].val=w; e[j].k=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) fa1[i]=fa2[i]=i;</span><br><span class="line">sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmp);<span class="comment">//两棵树的边放在一起排序</span></span><br><span class="line">kruskal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//srand((unsigned)time(NULL));</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;ce;</span></span><br><span class="line"><span class="keyword">while</span>(ce--)</span><br><span class="line">&#123;</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【并查集+树上dfs】21CCPC重赛1011</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86+%E6%A0%91%E4%B8%8Adfs%E3%80%9121CCPC%E9%87%8D%E8%B5%9B1011/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86+%E6%A0%91%E4%B8%8Adfs%E3%80%9121CCPC%E9%87%8D%E8%B5%9B1011/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>一个棵，每个点权值都不同，从u可以跳到v当且仅当从u到v的最短路径上v的权值最大。问分别以1~n作为起始点，最多可以到多少个点。</p><p><span class="exturl"><a class="exturl__link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=7136" >CCPC重赛1011</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>很妙，因为权值不同，把点按照权值排个序，可以发现，如果按照点权从大到小开始遍历，考虑当前最大权值的点，显然该连通块的每个点都可以跳到该点，该点对该连通块内所有点的贡献为1（所有点都可以跳到该点上）。</p><p>难以处理的是，如果这样处理这些连通块，每次++，复杂度是撑不住的，所以有个很妙的思路，将这个图做一些处理。</p><p>按权值从小到大枚举点u，首先把点u单独放入一个连通块（区分一下没遍历到的点），然后遍历它的相邻节点，如果有相邻节点在另一个连通块内（已经遍历过的权值较小点），那么说明另一个连通块是因为点u砍断了点u的出边而产生的（因为权值从小到大枚举，当前的权值比枚举过的权值大），把他们重新合成一个连通块，其中点u作为父节点，另一个连通块的根作为子节点，这就有点像并查集存在一个上下级关系。枚举完后，并查集就形成了一颗新树，每个节点的深度即为答案（根节点深度为1）。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> fa[ms];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> ans[ms];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;p[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;e[ms];</span><br><span class="line"><span class="keyword">bool</span> vis[ms];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.a&lt;y.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        ans[v]=ans[u]+<span class="number">1</span>;</span><br><span class="line">        dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) e[i].clear(),fa[i]=i,vis[i]=<span class="number">0</span>,head[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">        e[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i].a;</span><br><span class="line">        p[i].pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//建立新树</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=p[i].pos;</span><br><span class="line">        <span class="keyword">int</span> fu=find(u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;e[u].size(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[u][j];</span><br><span class="line">            <span class="keyword">if</span>(!vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> fv=find(v);</span><br><span class="line">            add(fu,fv);</span><br><span class="line">            fa[fv]=fu;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[p[n].pos]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cout&lt;&lt;tot&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">    dfs(p[n].pos);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);    </span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//    srand((unsigned)time(NULL));</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维+gcd】2018ccpc桂林G</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+gcd%E3%80%912018ccpc%E6%A1%82%E6%9E%97G/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+gcd%E3%80%912018ccpc%E6%A1%82%E6%9E%97G/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>n个数，每次能给所有数+1。问最少加几次可以使得这n个数的gcd&gt;=2。无解输出-1。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/102823/problem/G" >2018CCPC桂林G</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>要使用到一个小结论，假设b&gt;=a，则gcd(a+k,b+k)是b-a的因子。先排序，对相邻数作差，然后求差值的gcd，记为x，那么最终所有数字的最大公约数就会是x的因子。现在知道了x，因为是差值的gcd，我们还需要确定k的值，那么我们只要以某个a[i]为起始值，枚举x的因子，找到最小的k即可。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL ,LL &gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MAXN 9e18</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ms 1000009</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 3009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[ms];</span><br><span class="line"><span class="keyword">int</span> cas;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> xx=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(xx!=<span class="number">0</span>) flag=<span class="number">0</span>;</span><br><span class="line">        x=__gcd(x,xx); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;++cas&lt;&lt;<span class="string">&quot;: &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="comment">//全部相等</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>)<span class="comment">//无解</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> minn=(a[<span class="number">1</span>]+x<span class="number">-1</span>)/x*x;<span class="comment">//本身是x的倍数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)<span class="comment">//是x因子的倍数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=x/i;</span><br><span class="line">            minn=min(minn,(a[<span class="number">1</span>]+i<span class="number">-1</span>)/i*i);</span><br><span class="line">            minn=min(minn,(a[<span class="number">1</span>]+j<span class="number">-1</span>)/j*j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;minn-a[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> ce = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 区域赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维+树上dfs】CF746div2C</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E6%A0%91%E4%B8%8Adfs%E3%80%91CF746div2C/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E6%A0%91%E4%B8%8Adfs%E3%80%91CF746div2C/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>一棵树，每个点有一个权值，现在把这棵树最多分成k个部分，使得各个部分的点权值异或相等。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/contest/1592/problem/C" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>以1为根节点，寻找每个点子树的异或值，当根节点异或值为0时，则必能分成异或值相等的两部分。</p><p>当不为0时，从根开始遍历，找出最深的异或值与根节点相等的子树，切掉这部分。继续遍历，如果能找到2棵这样的子树，则必能把整棵树分成3部分，每部分异或值都和根的异或值相同。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL ,LL &gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MAXN 9e18</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 3009</span></span><br><span class="line"><span class="keyword">int</span> head[MS],to[MS],ne[MS],cost[MS],tot;</span><br><span class="line">ll a[MS];</span><br><span class="line">ll xo;</span><br><span class="line">ll subxo[MS];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> ct=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        subxo[u]=(subxo[u]^dfs(v,u));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(subxo[u]==xo) ct++,subxo[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> subxo[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    ct=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        head[i]=subxo[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a[<span class="number">1</span>]; subxo[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line">    xo=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        xo^=a[i];</span><br><span class="line">        subxo[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(xo==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(ct&gt;=<span class="number">2</span> &amp;&amp; k&gt;<span class="number">2</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> ce = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【差分约束】gym102394A</title>
      <link href="/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E3%80%91gym102394A/"/>
      <url>/2022/01/27/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E3%80%91gym102394A/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>n个方块，问最少染几个并且满足题中的两种约束</p><p><span class="exturl"><a class="exturl__link"   href="http://codeforces.com/gym/102394/problem/A" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>差分约束+二分+spfa剪枝优化。第一种约束条件很好列出不等式，第二种会有三个未知数，但发现s[n]是可以枚举的，但是枚举必会超时。观察发现当染色数量x越大时，越能满足条件，具有单调性，所以可以二分x的值。</p><p>之后呢，怎么有解呢？当然是最短路或者最长路有解时，发现其中有负边，并且任意点都能到0点，所以当有某个点的最短路为负的时候，就可以立马判断有负环，然而正环却很难判断，这是一个很有用的剪枝。所以我们这里使用最短路，而不是最长路，最长路太难优化了，普通的spfa优化过不了这题，所以还是剪枝。最长路就会超时。</p><p>任何差分约束题目，本质上用最短路和最长路都可求解，只是复杂程度不同，所以要做出选择。</p><p>约束条件：</p><p>s[i]-s[i-1]&gt;=0</p><p>s[i]-s[i-1]&lt;=1</p><p>s[n]-s[0]=mid</p><p>s[r]-s[l-1]&gt;=k</p><p>s[n]-(s[r]-s[l-1])&gt;=k</p><p>s[i]表示前i个中染色的个数。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL ,LL &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 9e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 2000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3009</span></span><br><span class="line"><span class="keyword">int</span> head[N],to[<span class="number">30009</span>],ne[<span class="number">30009</span>],cost[<span class="number">30009</span>],tot;</span><br><span class="line"><span class="keyword">int</span> head1[N];</span><br><span class="line"><span class="keyword">int</span> n,m1,m2;</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> in[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=v;</span><br><span class="line">cost[tot]=c;</span><br><span class="line">ne[tot]=head[u];</span><br><span class="line">head[u]=head1[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=v;</span><br><span class="line">cost[tot]=c;</span><br><span class="line">ne[tot]=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,k;</span><br><span class="line">&#125;a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m2; i++)</span><br><span class="line">&#123;</span><br><span class="line">add1(b[i].l<span class="number">-1</span>,b[i].r,mid-b[i].k);</span><br><span class="line">&#125;</span><br><span class="line">add1(<span class="number">0</span>,n,mid);</span><br><span class="line">add1(n,<span class="number">0</span>,-mid);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">vis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">q.push(<span class="number">0</span>); in[<span class="number">0</span>]++;</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">int</span> c=cost[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+c)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+c;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">vis[v]=<span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">in[v]++;</span><br><span class="line"><span class="keyword">if</span>(in[v]&gt;=n+<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m1&gt;&gt;m2;</span><br><span class="line"><span class="keyword">int</span> left=<span class="number">0</span>,right=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m1; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i].l&gt;&gt;a[i].r&gt;&gt;a[i].k;</span><br><span class="line">left=max(a[i].k,left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m2; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[i].l&gt;&gt;b[i].r&gt;&gt;b[i].k;</span><br><span class="line">left=max(b[i].k,left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ttt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//add(i-1,i,0);</span></span><br><span class="line"><span class="comment">//add(i,i-1,-1);</span></span><br><span class="line">add(i,i<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">add(i<span class="number">-1</span>,i,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m1; i++)</span><br><span class="line">&#123;</span><br><span class="line">add(a[i].r,a[i].l<span class="number">-1</span>,-a[i].k);</span><br><span class="line">&#125;</span><br><span class="line">ttt=tot;</span><br><span class="line"><span class="keyword">int</span> ans=n;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">&#123;</span><br><span class="line">tot=ttt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) </span><br><span class="line">&#123;</span><br><span class="line">head[i]=head1[i];</span><br><span class="line">dis[i]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">in[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))</span><br><span class="line">&#123;</span><br><span class="line">ans=mid;</span><br><span class="line">right=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(head1,<span class="number">0</span>,<span class="keyword">sizeof</span>(head1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ce;</span><br><span class="line"><span class="keyword">while</span>(ce--) &#123;</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【sg函数】HDU5795</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90sg%E5%87%BD%E6%95%B0%E3%80%91HDU5795/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90sg%E5%87%BD%E6%95%B0%E3%80%91HDU5795/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>n堆石子，两人博弈，每次要么从某堆石子中取任意个（非0），要么把该堆石子分为非空的三堆。</p><p><span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=5795" >HDU</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>sg函数打表。找了好久都找不到有什么规律，只能打表。每堆石子是一个单独的游戏，SG(i)=mex(SG(i),SG(j),SG(k),SG(i) ^ SG(j) ^ SG(k))。</p><p>发现当a[i]%8==7或者0的时候有变化。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[ms];</span><br><span class="line"><span class="keyword">int</span> sg[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sg</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        vis[sg[i]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;n; k++)</span><br><span class="line">                <span class="keyword">if</span>(i+j+k==n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> sum=(sg[i]^sg[j]^sg[k]);</span><br><span class="line">                    vis[sum]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; ;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            sg[n]=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i=0; i&lt;=50; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        get_sg(i);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0; i&lt;=50; i++)</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;sg[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        <span class="keyword">if</span>(a%<span class="number">8</span>==<span class="number">7</span>)</span><br><span class="line">            a++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a%<span class="number">8</span>==<span class="number">0</span>)</span><br><span class="line">            a--;</span><br><span class="line">        ans^=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Second player wins.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;First player wins.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> ce = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sg函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sg函数</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/sg%E5%87%BD%E6%95%B0/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/sg%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[        <h1 id="sg函数"   >          <a href="#sg函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#sg函数"></a> SG函数</h1>      <p>sg函数是个神奇的东西，是博弈论发展的一大步。</p><p>在之前不得不看几个经典的博弈问题：<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/Khada-Jhin/p/9609561.html" >大佬博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>还有个文章：<span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/53948422" >知乎</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="icg游戏"   >          <a href="#icg游戏" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#icg游戏"></a> ICG游戏</h1>      <p>讲了这么久，我们所说的博弈问题到底是什么样的？我们要研究的又是什么样的问题呢？</p><p>我们研究的是一类游戏，叫平等组合游戏(ICG)</p><p>那么什么样的游戏可以被称为ICG呢？</p><p>1、两个人进行博弈</p><p>2、两人轮流进行决策且做出的决策都对自己有利</p><p>3、游戏中同一个局势不能多次到达且游戏不能有平局</p><p>4、当有人无法做出决策时游戏结束，无法做出决策的人输</p><p>5、游戏可以在优先步数内结束</p><p>6、任意游戏者在某一局势时能做出决策的集合只与当前局势有关，与游戏者本身无关</p>        <h1 id="必胜态与必败态"   >          <a href="#必胜态与必败态" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#必胜态与必败态"></a> 必胜态与必败态：</h1>      <p>定义P−position与N−position</p><p>P−position：必败态(简称P)，即在决策前就处于这种状态的人必败</p><p>N−position：必胜态(简称N)，即在决策前就处于这种状态的人必胜</p><p>如果更严谨的定义P与N，则：</p><p>1、无法移动的状态为P</p><p>2、可以移动到P的状态为N</p><p>3、任意移动都会到N的状态为P</p>        <h1 id="组合游戏的dag图"   >          <a href="#组合游戏的dag图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组合游戏的dag图"></a> 组合游戏的DAG图：</h1>      <p>如果我们将每一种状态向它能到达的状态连边，那么一个组合游戏的所有状态就能组成一个DAG(有向无环图)。<br />给出一张DAG，在给定起点处有一枚棋子，两人轮流移动棋子，如果谁不能移动了就判输。</p><p>事实上，所有的ICG问题都可以抽象成上述的这个游戏。</p>        <h1 id="sg定理"   >          <a href="#sg定理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#sg定理"></a> SG定理</h1>      <p>定义mex运算，表示集合中最小的没出现过的自然数，例如：mex{1,2,3}=0，mex{0,2,3}=1，mex{0,1,2}=3</p><p>SG函数描述的是博弈中某个状态量化后的值，SG(x)=mex{SG(y)|x can go to y}</p><p>我们来分析一下SG函数的性质：</p><p>1、终止状态SG值为0，因为它没有出边(即可到达的状态)</p><p>2、SG值为0的状态为必败态，它的后继状态SG值都不为0，满足必败态定义</p><p>3、SG值不为0的状态为必胜态，它的后继状态SG值有为0的状态，满足必胜态定义</p>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 博弈论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sg函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%AD%97%E5%85%B8%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%AD%97%E5%85%B8%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>Trie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较。</p><p>Trie的核心思想是<strong>空间换时间</strong>。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</p><ol><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同。</li></ol><p>通常字典树的查询时间复杂度是O(logL)，L是字符串的长度。所以效率还是比较高的。</p><p>节点数组开N*L。再乘个K，字符种类。大部分题会给出提示的吧，和&lt;的那种。</p><p>也可以动态开点或者双数组字典树。</p><p><span class="exturl"><a class="exturl__link"   href="https://pintia.cn/problem-sets/1439618253197332480/problems/1439618347812503558" >PTA2021icpc网赛第一场G</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>挺水的一道题，貌似用map也能卡过去，数据水了。就是一个路由器寻址问题，给出目的地址，问下一跳地址，要选最长子网掩码的。对于没有找到的，那么跳到给定的特殊地址。这道题好像就是1.1.1.1。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <p>模板：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01字典树找最长前缀</span></span><br><span class="line"><span class="keyword">int</span> trie[ms][<span class="number">3</span>],en[ms]，aaa;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> str)</span><span class="comment">//插入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op=str[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p][op])</span><br><span class="line">        &#123;</span><br><span class="line">            trie[p][op]=++tot;<span class="comment">//根节点不存东西</span></span><br><span class="line">        &#125;</span><br><span class="line">        p=trie[p][op];</span><br><span class="line">    &#125;</span><br><span class="line">    en[p]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sear</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op=str[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p][op]) <span class="keyword">break</span>;</span><br><span class="line">        p=trie[p][op];</span><br><span class="line">        <span class="keyword">if</span>(en[p]) aaa=en[p];<span class="comment">//只要路过的时候有点，那就更新下位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>题目：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">&#125;two[ms];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">55</span>];</span><br><span class="line">&#125;ans[ms];</span><br><span class="line"><span class="keyword">int</span> cnt,tot;</span><br><span class="line"><span class="keyword">int</span> trie[ms][<span class="number">3</span>],en[ms];</span><br><span class="line"><span class="keyword">int</span> bbb,minn,aaa;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//存了一下0~255的二进制表示</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> t=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c=(x&amp;<span class="number">1</span>);</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a+=(c+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(a.begin(),a.end());</span><br><span class="line">    two[t].s=a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> str)</span><span class="comment">//插入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op=str[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p][op])</span><br><span class="line">        &#123;</span><br><span class="line">            trie[p][op]=++tot;<span class="comment">//根节点不存东西</span></span><br><span class="line">        &#125;</span><br><span class="line">        p=trie[p][op];</span><br><span class="line">    &#125;</span><br><span class="line">    en[p]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sear</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op=str[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p][op]) <span class="keyword">break</span>;</span><br><span class="line">        p=trie[p][op];</span><br><span class="line">        <span class="keyword">if</span>(en[p]) aaa=en[p];<span class="comment">//只要路过的时候有点，那就更新下位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    minn=<span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">255</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        init(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)<span class="comment">//输入很奇葩</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c,d,e;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d.%d.%d.%d %d %s&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,ans[++cnt].s);</span><br><span class="line">        <span class="built_in">string</span> f,g;</span><br><span class="line">        f+=two[a].s;f+=two[b].s;f+=two[c].s;f+=two[d].s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e; i++)</span><br><span class="line">            g+=f[i];</span><br><span class="line">        insert(g);</span><br><span class="line">        <span class="keyword">if</span>(minn&gt;g.size())<span class="comment">//这个是存一下那个最短的前缀串，其实数据就给了1.1.1.1</span></span><br><span class="line">        &#123;</span><br><span class="line">            minn=g.size();</span><br><span class="line">            bbb=cnt;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d.%d.%d.%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">        <span class="built_in">string</span> f;</span><br><span class="line">        f+=two[a].s;f+=two[b].s;f+=two[c].s;f+=two[d].s;</span><br><span class="line">        aaa=<span class="number">0</span>;</span><br><span class="line">        sear(f);</span><br><span class="line">        <span class="keyword">if</span>(aaa==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ans[bbb].s);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ans[aaa].s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="keyword">int</span> ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//  cin &gt;&gt; ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维+最大素因子】21ccpc1012</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E6%9C%80%E5%A4%A7%E7%B4%A0%E5%9B%A0%E5%AD%90%E3%80%9121ccpc1012/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E6%9C%80%E5%A4%A7%E7%B4%A0%E5%9B%A0%E5%AD%90%E3%80%9121ccpc1012/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>n堆石子，数量依次为1~n，给若干个素数。对于每堆石子，每次可以对任一个素数取模，取走余数个式子，最后分别表示出取走每堆石子的所需次数。</p><p><span class="exturl"><a class="exturl__link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=7111" >HDU例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>首先，对于大于所有素数之积的石子，必无法取完，所以为0。对于其它堆的石子，可以发现一个规律：对于一个数x，以及它的一个素因子p（在给出的素数中），有了这两个东西，那么可以发现，[x+1,x+p-1]可以通过mod p转移到x来，所以[x+1,x+p-1]是x取的次数+1。那么我们就可以找到一个最大的素因子p，来最大化这个可转移的区间。</p><p>那么我们就可以发现，这个取石子的次数是非递减的。</p><p>对于每堆石子，可以通过欧拉筛快速找到它的最大素因子p。然后从前往后遍历，每次找到一个决策点，更新后面的这个区间，如果失效就向右移。复杂度约为O（n）。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e6</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[ms],a[ms],cnt;</span><br><span class="line"><span class="keyword">bool</span> isp[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ouler</span><span class="params">()</span><span class="comment">//欧拉筛法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=ms<span class="number">-9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i]) prime[++cnt]=i,a[i]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=cnt&amp;&amp;i*prime[j]&lt;=ms<span class="number">-9</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            a[i*prime[j]]=prime[j];<span class="comment">//记录i*prime[j]的最大素因子</span></span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p[ms],g[ms],f[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m; g[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) <span class="built_in">cin</span>&gt;&gt;p[i],g[<span class="number">0</span>]=max(g[<span class="number">0</span>],p[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) g[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) g[p[i]]=p[i];<span class="comment">//素数的最大素因子就是它自己</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) g[i]=max(g[a[i]],g[i/a[i]]);<span class="comment">//有可能a[i]不在给的素数中，所以再判一下i/a[i]</span></span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;i&amp;&amp;(!g[j] || f[j]==inf || i&gt;j+g[j]<span class="number">-1</span>)) j++;</span><br><span class="line">        f[i]=(i==j?inf:f[j]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ull mul=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//后面那些是0的，其实就是inf</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i; i--)<span class="comment">//据题目要求</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]!=inf) ans+=mul*f[i];</span><br><span class="line">        mul*=<span class="number">23333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> ce=<span class="number">1</span>;</span><br><span class="line">    Ouler();</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ce;</span><br><span class="line">    <span class="keyword">while</span>(ce--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维+组合数】edu113C</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E7%BB%84%E5%90%88%E6%95%B0%E3%80%91edu113C/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E7%BB%84%E5%90%88%E6%95%B0%E3%80%91edu113C/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>有多少种排列，能使得同一个发言人不能连续两次发言。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/contest/1569/problem/C" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>只看第一大和第二大的数字，若是第一大的数字-第二大的数字&gt;=2，则没有合法的。若是第一大数字出现多次，则可以全排列。否则，就要算出不合法的，用总的-合法的。</p><p>不合法的：第一大的序号出现在第二大的序号后面。组合数乱搞一下。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比如 1 2</span></span><br><span class="line"><span class="comment">1 2不行，因为发言是 1 2 2</span></span><br><span class="line"><span class="comment">2 1可以，因为发言是 2 1 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qsm</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">        x=x*x%mod;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[ms];</span><br><span class="line">ll fac[ms];</span><br><span class="line">ll infac[ms];</span><br><span class="line"><span class="keyword">int</span> num[ms];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[x]*infac[x-y]%mod*infac[y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>; infac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=<span class="number">200000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        infac[i]=qsm(fac[i],mod<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">if</span>(a[n]-a[n<span class="number">-1</span>]&gt;=<span class="number">2</span>)<span class="comment">//最后两个相差不能超过1，否则必重复</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[n]==a[n<span class="number">-1</span>])<span class="comment">//如果最后一个重复，它怎么排都行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;fac[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=fac[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>; num[<span class="number">1</span>]=<span class="number">1</span>; a[n+<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//记录一下每个数出现的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==a[i+<span class="number">1</span>]) num[cnt]++;</span><br><span class="line">            <span class="keyword">else</span> num[++cnt]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt1=cnt<span class="number">-1</span>;<span class="comment">//枚举第二大数出现的位置，样例如下</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=num[cnt1]; i&lt;=n<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> qian=i<span class="number">-1</span>,hou=n-i;</span><br><span class="line">            ans=(ans-(C(qian,num[cnt1]<span class="number">-1</span>) * fac[num[cnt1]]%mod * (ll)hou %mod * fac[n-num[cnt1]<span class="number">-1</span>] %mod) +mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">合法-不合法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">不合法的是，第二大的数字出现在第一大的数字前面。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3 3 3 _ _ 4</span></span><br><span class="line"><span class="comment">3 _ 3 _ 3 4</span></span><br><span class="line"><span class="comment">.....</span></span><br><span class="line"><span class="comment">枚举最后一个3出现的位置，为4在这个3后面选一个位置，</span></span><br><span class="line"><span class="comment">全排列所有3和其它数字，即为不合法的答案。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 组合数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超级快读</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E8%B6%85%E7%BA%A7%E5%BF%AB%E8%AF%BB/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E8%B6%85%E7%BA%A7%E5%BF%AB%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> IO&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> OUT_SIZE 100000</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">    <span class="comment">//fread-&gt;read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE],*p1=buf+BUF_SIZE,*pend=buf+BUF_SIZE;</span><br><span class="line">        <span class="keyword">if</span> (p1==pend)&#123;</span><br><span class="line">            p1=buf; pend=buf+fread(buf,<span class="number">1</span>,BUF_SIZE,<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">if</span> (pend==p1)&#123;IOerror=<span class="number">1</span>;<span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br><span class="line">            <span class="comment">//&#123;printf(&quot;IO error!\n&quot;);system(&quot;pause&quot;);for (;;);exit(0);&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;<span class="keyword">return</span> ch==<span class="string">&#x27; &#x27;</span>||ch==<span class="string">&#x27;\n&#x27;</span>||ch==<span class="string">&#x27;\r&#x27;</span>||ch==<span class="string">&#x27;\t&#x27;</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> sign=<span class="number">0</span>; <span class="keyword">char</span> ch=nc(); x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;blank(ch);ch=nc());</span><br><span class="line">        <span class="keyword">if</span> (IOerror)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">1</span>,ch=nc();</span><br><span class="line">        <span class="keyword">for</span> (;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=nc())x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (sign)x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(ll &amp;x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> sign=<span class="number">0</span>; <span class="keyword">char</span> ch=nc(); x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;blank(ch);ch=nc());</span><br><span class="line">        <span class="keyword">if</span> (IOerror)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">1</span>,ch=nc();</span><br><span class="line">        <span class="keyword">for</span> (;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=nc())x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (sign)x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span> &amp;x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> sign=<span class="number">0</span>; <span class="keyword">char</span> ch=nc(); x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;blank(ch);ch=nc());</span><br><span class="line">        <span class="keyword">if</span> (IOerror)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">1</span>,ch=nc();</span><br><span class="line">        <span class="keyword">for</span> (;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=nc())x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">double</span> tmp=<span class="number">1</span>; ch=nc();</span><br><span class="line">            <span class="keyword">for</span> (;ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>;ch=nc())tmp/=<span class="number">10.0</span>,x+=tmp*(ch-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign)x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch=nc();</span><br><span class="line">        <span class="keyword">for</span> (;blank(ch);ch=nc());</span><br><span class="line">        <span class="keyword">if</span> (IOerror)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (;!blank(ch)&amp;&amp;!IOerror;ch=nc())*s++=ch;</span><br><span class="line">        *s=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> &amp;c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (c=nc();blank(c);c=nc());</span><br><span class="line">        <span class="keyword">if</span> (IOerror)&#123;c=<span class="number">-1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Ostream_fwrite</span>&#123;</span></span><br><span class="line">        <span class="keyword">char</span> *buf,*p1,*pend;</span><br><span class="line">        Ostream_fwrite()&#123;buf=<span class="keyword">new</span> <span class="keyword">char</span>[BUF_SIZE];p1=buf;pend=buf+BUF_SIZE;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (p1==pend)&#123;</span><br><span class="line">                fwrite(buf,<span class="number">1</span>,BUF_SIZE,<span class="built_in">stdout</span>);p1=buf;</span><br><span class="line">            &#125;</span><br><span class="line">            *p1++=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">15</span>],*s1;s1=s;</span><br><span class="line">            <span class="keyword">if</span> (!x)*s1++=<span class="string">&#x27;0&#x27;</span>;<span class="keyword">if</span> (x&lt;<span class="number">0</span>)out(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">            <span class="keyword">while</span>(x)*s1++=x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(s1--!=s)out(*s1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">15</span>],*s1;s1=s;</span><br><span class="line">            <span class="keyword">if</span> (!x)*s1++=<span class="string">&#x27;0&#x27;</span>;<span class="keyword">if</span> (x&lt;<span class="number">0</span>)out(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">            <span class="keyword">while</span>(x)*s1++=x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(s1--!=s)out(*s1); out(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">25</span>],*s1;s1=s;</span><br><span class="line">            <span class="keyword">if</span> (!x)*s1++=<span class="string">&#x27;0&#x27;</span>;<span class="keyword">if</span> (x&lt;<span class="number">0</span>)out(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">            <span class="keyword">while</span>(x)*s1++=x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(s1--!=s)out(*s1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">25</span>],*s1;s1=s;</span><br><span class="line">            <span class="keyword">if</span> (!x)*s1++=<span class="string">&#x27;0&#x27;</span>;<span class="keyword">if</span> (x&lt;<span class="number">0</span>)out(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">            <span class="keyword">while</span>(x)*s1++=x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(s1--!=s)out(*s1); out(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">static</span> ll mul[]=&#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>,<span class="number">100000</span>,<span class="number">1000000</span>,<span class="number">10000000</span>,<span class="number">100000000</span>,</span><br><span class="line">                <span class="number">1000000000</span>,<span class="number">10000000000LL</span>,<span class="number">100000000000LL</span>,<span class="number">1000000000000LL</span>,<span class="number">10000000000000LL</span>,</span><br><span class="line">                <span class="number">100000000000000LL</span>,<span class="number">1000000000000000LL</span>,<span class="number">10000000000000000LL</span>,<span class="number">100000000000000000LL</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span> (x&lt;<span class="number">-1e-12</span>)out(<span class="string">&#x27;-&#x27;</span>),x=-x;x*=mul[y];</span><br><span class="line">            ll x1=(ll)<span class="built_in">floor</span>(x); <span class="keyword">if</span> (x-<span class="built_in">floor</span>(x)&gt;=<span class="number">0.5</span>)++x1;</span><br><span class="line">            ll x2=x1/mul[y],x3=x1-x2*mul[y]; print(x2);</span><br><span class="line">            <span class="keyword">if</span> (y&gt;<span class="number">0</span>)&#123;out(<span class="string">&#x27;.&#x27;</span>); <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">1</span>;i&lt;y&amp;&amp;x3*mul[i]&lt;mul[y];out(<span class="string">&#x27;0&#x27;</span>),++i); print(x3);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> y)</span></span>&#123;print(x,y);out(<span class="string">&#x27;\n&#x27;</span>);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;<span class="keyword">while</span> (*s)out(*s++);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;<span class="keyword">while</span> (*s)out(*s++);out(<span class="string">&#x27;\n&#x27;</span>);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;<span class="keyword">if</span> (p1!=buf)&#123;fwrite(buf,<span class="number">1</span>,p1-buf,<span class="built_in">stdout</span>);p1=buf;&#125;&#125;</span><br><span class="line">        ~Ostream_fwrite()&#123;flush();&#125;</span><br><span class="line">    &#125;Ostream;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;Ostream.print(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;Ostream.println(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;Ostream.out(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;Ostream.out(x);Ostream.out(<span class="string">&#x27;\n&#x27;</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(ll x)</span></span>&#123;Ostream.print(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(ll x)</span></span>&#123;Ostream.println(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> y)</span></span>&#123;Ostream.print(x,y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> y)</span></span>&#123;Ostream.println(x,y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;Ostream.print(s);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;Ostream.println(s);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">()</span></span>&#123;Ostream.out(<span class="string">&#x27;\n&#x27;</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;Ostream.flush();&#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> ll</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> OUT_SIZE</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 超级快读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超级快读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【区间dp】gym103186D</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8C%BA%E9%97%B4dp%E3%80%91gym103186D/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8C%BA%E9%97%B4dp%E3%80%91gym103186D/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>n个学生，给出高度，排成两排。每排的身高都是非递减的，且第二排的身高不低于第一排对应位置。问有多少种情况</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/103186/problem/D" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>dp，dp（i，j）表示前i个人，有j个人在第二排的情况。如果身高各不相同，很好转移。身高有相同的时候，可以将这些身高相同的看成一个整体，用dp转移状态，先不管它们内部的排序。最后乘以每组人的全排列即可。对于第二个条件，其实就是第二排的人不能多于第一排的人。</p><p>对于题目的条件，要想满足，就按身高依次选出人来排就行，每次选出来的人都是当前最低了。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e4</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[ms];</span><br><span class="line"><span class="keyword">int</span> num[ms];</span><br><span class="line">ll dp[<span class="number">5009</span>][<span class="number">5009</span>];</span><br><span class="line">ll fac[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>; fac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>; i&lt;=<span class="number">5000</span>; i++)</span><br><span class="line">        fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>; num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);<span class="comment">//giao 不能忘了排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//这个是把相同高度的合并一起</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==a[i+<span class="number">1</span>])</span><br><span class="line">            num[cnt]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            num[++cnt]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt--;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now+=num[i];<span class="comment">//now是当前总共多少人</span></span><br><span class="line">        <span class="keyword">int</span> c=num[i];<span class="comment">//把相同高度的合并一起处理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j+j&lt;=now; j++)<span class="comment">//因为第二排高度不能低于第一排，这个是为了满足这个条件。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=j&amp;&amp;k&lt;=c; k++)<span class="comment">//当第二行有j个人，其中新加的有0~c个人。因为不能超过j嘛，所以也要&lt;=j</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[now][j]=(dp[now][j]+dp[now-c][j-k])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=dp[n][n/<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++) ans=(ans*fac[num[i]])%mod;<span class="comment">//因为那些身高相同的人可以全排列</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维+队列】gym103117J</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E9%98%9F%E5%88%97%E3%80%91gym103117J/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4+%E9%98%9F%E5%88%97%E3%80%91gym103117J/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>一根水平的绳子上有n只蚂蚁，绳长1e9+1，蚂蚁一开始分布在各个整数点上，不会重合，且有初始方向。蚂蚁们移动速度均为1个单位长度/s。蚂蚁们碰头后会掉头，绳子两端分别有一个挡板，蚂蚁碰撞A、B次后会坏掉，并且当蚂蚁碰到挡板后会掉头。现在问需要多久蚂蚁才能全部掉落。</p><p>注意一开始的方向，要保证队头的蚂蚁是最靠近边界的。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/103117" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>蚂蚁碰到后掉头相当于继续沿当前方向移动，所以每过2L时间，蚂蚁们就会回到初始状态。所以我们可以先统计已经撞了多少次，最后只模拟最后一回合即可。开两个队列，分别记录向左和向右的蚂蚁，模拟它们的移动。</p><p>这里我采用了记录相对位置的方法，比如有一只碰到左隔板的蚂蚁，现在它要掉头，那么它的位置如何呢？其实，相对于向右走的蚂蚁，它们的距离是x+y，那么我就可以记录这只掉头的蚂蚁的位置为-x。向右的蚂蚁也类似。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll len=<span class="number">1e9</span>+<span class="number">1</span>;</span><br><span class="line">ll a[ms];</span><br><span class="line"><span class="keyword">int</span> dir[ms],n,A,B;</span><br><span class="line"><span class="built_in">queue</span>&lt;ll&gt; ql,qr;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!A &amp;&amp; ql.size())</span><br><span class="line">    &#123;</span><br><span class="line">        ll minn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ql.size())<span class="comment">//其实只看最后落地的蚂蚁的时间。</span></span><br><span class="line">        &#123;</span><br><span class="line">            minn=max(ql.front(),minn); ql.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(minn,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!B &amp;&amp; qr.size())</span><br><span class="line">    &#123;</span><br><span class="line">        ll minn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(qr.size())</span><br><span class="line">        &#123;</span><br><span class="line">            minn=max(len-qr.front(),minn); qr.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(minn,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;A,&amp;B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;dir[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!dir[i]) ql.push(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(dir[i]) qr.push(a[i]);</span><br><span class="line">    <span class="keyword">int</span> res=min(A/n,B/n);</span><br><span class="line">    A-=res*n; B-=res*n;<span class="comment">//先撞了res*n次</span></span><br><span class="line">    ll re=<span class="number">2ll</span>*res*len;</span><br><span class="line">    check();</span><br><span class="line">    <span class="keyword">while</span>(ql.size() || qr.size())</span><br><span class="line">    &#123;</span><br><span class="line">        ll x,y;</span><br><span class="line">        <span class="keyword">if</span>(ql.size()) x=ql.front();</span><br><span class="line">        <span class="keyword">if</span>(qr.size()) y=qr.front();</span><br><span class="line">        <span class="keyword">if</span>(ql.size() &amp;&amp;(!qr.size() || x&lt;len-y))<span class="comment">//左蚂蚁先碰到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            A--;</span><br><span class="line">            ql.pop();</span><br><span class="line">            qr.push(-x);<span class="comment">//相对位置。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qr.size())<span class="comment">//右蚂蚁先碰到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            B--;</span><br><span class="line">            qr.pop();</span><br><span class="line">            ql.push(<span class="number">2</span>*len-y);</span><br><span class="line">        &#125;</span><br><span class="line">        check();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans+re);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最小费用最大流】gym103117F</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81%E3%80%91gym103117F/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81%E3%80%91gym103117F/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/103117" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>就是给你一个n个点m条边的无向图，每个点有个值是a[i]现在你把每条边都赋予一个方向之后这个图就是有向图了，那么设第i个点的入度是d[i]，给出D的式子，现在要最小化D，问每个边的方向。</p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>费用流。注意到，每条边最终会有一个方向，所以可以把边化为点，指向u和v，容量都为1，费用都为0。设置源点，源点到所有边点有一条边，容量为1，费用为0。设置汇点，原本图中的每个点，都有两条指向汇点的边，第一条容量为a[i]，费用为0；第二条容量为inf，费用为1。</p><p>点到汇点的边的含义是：前a[i]个流量是免费的，因为max(0,d[i]-a[i])。之后的流量，每个费用都是1。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">3e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e3</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,tot;</span><br><span class="line"><span class="keyword">int</span> maxflow,mincost,cost[ms],cap[ms];</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],pre[N];</span><br><span class="line"><span class="keyword">int</span> d[N],incf[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> a[N],cnt;</span><br><span class="line"><span class="keyword">int</span> edge[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> <span class="built_in">cos</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//正向边，初始容量c，单位费用cos</span></span><br><span class="line">    to[++tot]=v; ne[tot]=head[u]; cost[tot]=<span class="built_in">cos</span>; </span><br><span class="line">    cap[tot]=c; head[u]=tot;</span><br><span class="line">    <span class="comment">//反向边，初始容量0，单位费用-c，成对存储</span></span><br><span class="line">    to[++tot]=u; ne[tot]=head[v]; cost[tot]=-<span class="built_in">cos</span>;</span><br><span class="line">    cap[tot]=<span class="number">0</span>; head[v]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=cnt+<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d[i]=inf; vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.push(s); d[s]=<span class="number">0</span>; vis[s]=<span class="number">1</span>;<span class="comment">//spfa求最短路</span></span><br><span class="line">    incf[s]=inf;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front(); vis[u]=<span class="number">0</span>; q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!cap[i]) <span class="keyword">continue</span>;<span class="comment">//不在残量网络，不遍历。</span></span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(d[v]&gt;d[u]+cost[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v]=d[u]+cost[i];</span><br><span class="line">                incf[v]=min(incf[u],cap[i]);</span><br><span class="line">                pre[v]=i;<span class="comment">//记录前驱，便于找到最长路方案</span></span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[t]==inf) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//汇点不可达</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=t;</span><br><span class="line">    <span class="keyword">while</span>(u!=s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i=pre[u];</span><br><span class="line">        cap[i]-=incf[t];</span><br><span class="line">        cap[i^<span class="number">1</span>]+=incf[t];</span><br><span class="line">        u=to[i^<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    maxflow+=incf[t];</span><br><span class="line">    mincost+=d[t]*incf[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ekcost</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(spfa()) update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    cnt=n;</span><br><span class="line">    maxflow=<span class="number">0</span>; mincost=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> tt;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;tt;</span><br><span class="line">    <span class="keyword">while</span>(tt--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            cnt++;</span><br><span class="line">            add(cnt,u,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            edge[cnt]=tot<span class="number">-1</span>;<span class="comment">//记录一下这条边标号</span></span><br><span class="line">            add(cnt,v,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        s=cnt+<span class="number">1</span>; t=cnt+<span class="number">2</span>;<span class="comment">//源点和汇点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>; i&lt;=cnt; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            add(s,i,<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//源点指向边形成的点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            add(i,t,a[i],<span class="number">0</span>);<span class="comment">//点指向汇点，这部分是免费的</span></span><br><span class="line">            add(i,t,inf,<span class="number">1</span>);<span class="comment">//点指向汇点，这部分是收费的</span></span><br><span class="line">        &#125;</span><br><span class="line">        Ekcost();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mincost);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=n+<span class="number">1</span>; u&lt;=cnt; u++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cap[edge[u]]==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);<span class="comment">//表示v——u</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费用流</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>给每条边一个单位费用。</p><p>常用的算法有EK+spfa和zkw。</p><p>蜜汁复杂度O（fnm），f是最大流量。</p><p>[放个链接](<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/ECJTUACM-873284962/p/7744943.html#:~:text=%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%B5%81%E7%9A%84%E5%90%84%E7%A7%8D%E8%BD%AC%E5%8C%96" >https://www.cnblogs.com/ECJTUACM-873284962/p/7744943.html#:~:text=最小费用流的各种转化</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>. 不少同学认为消圈算法比增广路算法使用面广%2C 可以有负边%2C 负圈%2C 每个点都能有盈余亏空等等. 实际上增广路算法也一样可以有负边%2C 负圈%2C 上下界等等%2C,(可行)流. 连边 %2C 所有点 有%2C 然后直接求. 3.最小费用 (可行)流中负权边的消除.)，可以看看。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="spfa模板"   >          <a href="#spfa模板" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spfa模板"></a> spfa模板：</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e3</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,tot;</span><br><span class="line"><span class="keyword">int</span> maxflow,mincost,cost[ms],cap[ms];</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],pre[N];</span><br><span class="line"><span class="keyword">int</span> d[N],incf[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> <span class="built_in">cos</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//正向边，初始容量c，单位费用cos</span></span><br><span class="line">    to[++tot]=v; ne[tot]=head[u]; cost[tot]=<span class="built_in">cos</span>; </span><br><span class="line">    cap[tot]=c; head[u]=tot;</span><br><span class="line">    <span class="comment">//反向边，初始容量0，单位费用-c，成对存储</span></span><br><span class="line">    to[++tot]=u; ne[tot]=head[v]; cost[tot]=-<span class="built_in">cos</span>;</span><br><span class="line">    cap[tot]=<span class="number">0</span>; head[v]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d[i]=inf; vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.push(s); d[s]=<span class="number">0</span>; vis[s]=<span class="number">1</span>;<span class="comment">//spfa求最短路</span></span><br><span class="line">    incf[s]=inf;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front(); vis[u]=<span class="number">0</span>; q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!cap[i]) <span class="keyword">continue</span>;<span class="comment">//不在残量网络，不遍历。</span></span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(d[v]&gt;d[u]+cost[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v]=d[u]+cost[i];</span><br><span class="line">                incf[v]=min(incf[u],cap[i]);</span><br><span class="line">                pre[v]=i;<span class="comment">//记录前驱，便于找到最长路方案</span></span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[t]==inf) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//汇点不可达</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=t;</span><br><span class="line">    <span class="keyword">while</span>(u!=s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i=pre[u];</span><br><span class="line">        cap[i]-=incf[t];</span><br><span class="line">        cap[i^<span class="number">1</span>]+=incf[t];</span><br><span class="line">        u=to[i^<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    maxflow+=incf[t];</span><br><span class="line">    mincost+=d[t]*incf[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,c,<span class="built_in">cos</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;c&gt;&gt;<span class="built_in">cos</span>;</span><br><span class="line">        add(u,v,c,<span class="built_in">cos</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(spfa()) update();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxflow&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mincost&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="zkw费用流"   >          <a href="#zkw费用流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#zkw费用流"></a> zkw费用流</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e3</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,tot;</span><br><span class="line"><span class="keyword">int</span> maxflow,mincost,cost[ms],cap[ms],co;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],now[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> <span class="built_in">cos</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//正向边，初始容量c，单位费用cos</span></span><br><span class="line">    to[++tot]=v; ne[tot]=head[u]; cost[tot]=<span class="built_in">cos</span>; </span><br><span class="line">    cap[tot]=c; head[u]=tot;</span><br><span class="line">    <span class="comment">//反向边，初始容量0，单位费用-c，成对存储</span></span><br><span class="line">    to[++tot]=u; ne[tot]=head[v]; cost[tot]=-<span class="built_in">cos</span>;</span><br><span class="line">    cap[tot]=<span class="number">0</span>; head[v]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aug</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> incf)</span><span class="comment">//寻找增广路</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t)</span><br><span class="line">    &#123;</span><br><span class="line">        mincost+=co*incf; maxflow+=incf; <span class="keyword">return</span> incf;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=now[u]; i; i=ne[i])<span class="comment">//当前弧优化</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(cap[i]&gt;<span class="number">0</span> &amp;&amp; cost[i]==<span class="number">0</span> &amp;&amp; !vis[v])<span class="comment">//寻访当前费用为0，流量大于0，且未访问过德点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> f=aug(v,min(cap[i],incf));</span><br><span class="line">            cap[i]-=f; cap[i^<span class="number">1</span>]-=f;<span class="comment">//构建反向流量网络</span></span><br><span class="line">            incf-=f; flow+=f;</span><br><span class="line">        &#125;</span><br><span class="line">        now[u]=i;</span><br><span class="line">        <span class="keyword">if</span>(incf==<span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//没有流量了就返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">modlabel</span><span class="params">()</span><span class="comment">//修改标号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u&lt;=n; u++)</span><br><span class="line">        <span class="keyword">if</span>(vis[u])</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])<span class="comment">//找到所有增广过的路径的点连出的流量中花费最小的，类似于km</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v=to[i];</span><br><span class="line">                <span class="keyword">if</span>(cap[i]&gt;<span class="number">0</span> &amp;&amp; !vis[v])</span><br><span class="line">                    tmp=min(tmp,cost[i]);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp==inf) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//无增广路</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u&lt;=n; u++)</span><br><span class="line">        <span class="keyword">if</span>(vis[u])<span class="comment">//否则类比km算法，至少可以增加一条边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cost[i]-=tmp; cost[i^<span class="number">1</span>]+=tmp;</span><br><span class="line">                <span class="comment">//构建反向花费</span></span><br><span class="line">            &#125;</span><br><span class="line">    co+=tmp;<span class="comment">//加上当前最小花费</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zkw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) now[i]=head[i],vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(aug(s,inf));</span><br><span class="line">    &#125;<span class="keyword">while</span>(modlabel());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,c,<span class="built_in">cos</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;c&gt;&gt;<span class="built_in">cos</span>;</span><br><span class="line">        add(u,v,c,<span class="built_in">cos</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    zkw();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxflow&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mincost&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题三测试题解</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98%E4%B8%89%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%AE%B2%E8%A7%A3/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98%E4%B8%89%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[        <h1 id="专题三测试题解"   >          <a href="#专题三测试题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题三测试题解"></a> 专题三测试题解</h1>              <h2 id="by-recognizing-these-guys-we-find-social-networks-usefulhdu3849"   >          <a href="#by-recognizing-these-guys-we-find-social-networks-usefulhdu3849" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#by-recognizing-these-guys-we-find-social-networks-usefulhdu3849"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=3849" >By Recognizing These Guys, We Find Social Networks Useful(HDU3849)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：一个图，不一定连通，问有多条割边，输出个数并按输入的顺序输出这些割边。</p><p>题解：因为是字符串，用map映射一下，不连通直接输出0即可。</p><p>注意按输入的格式输出边。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms];</span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],tot,num;</span><br><span class="line"><span class="keyword">bool</span> bridge[ms];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;mp1;<span class="comment">//字符串的序号</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;mp2;<span class="comment">//该序号对应的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> ine)</span><span class="comment">//正常求割边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i ;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v,i);</span><br><span class="line">            low[u]=min(low[v],low[u]);</span><br><span class="line">            <span class="keyword">if</span>(low[v]&gt;dfn[u])</span><br><span class="line">            &#123;</span><br><span class="line">              bridge[i]=bridge[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">              cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))</span><br><span class="line">            low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(bridge,<span class="number">0</span>,<span class="keyword">sizeof</span>(bridge));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        head[i]=dfn[i]=low[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tot=<span class="number">1</span>;num=<span class="number">0</span>;cnt=<span class="number">0</span>;</span><br><span class="line">    mp1.clear(); mp2.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> e=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> a,b;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="keyword">if</span>(mp1[a]==<span class="number">0</span>)<span class="comment">//通过map映射</span></span><br><span class="line">            &#123;</span><br><span class="line">                mp1[a]=++e;</span><br><span class="line">                mp2[e]=a;</span><br><span class="line">            &#125;</span><br><span class="line">            u=mp1[a];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(mp1[b]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mp1[b]=++e;</span><br><span class="line">                mp2[e]=b;</span><br><span class="line">            &#125;</span><br><span class="line">            v=mp1[b];</span><br><span class="line">            add(u,v);</span><br><span class="line">            add(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        tarjan(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//判是否连通</span></span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;tot; i+=<span class="number">2</span>)<span class="comment">//这个顺序就是输入的顺序了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(bridge[i]) <span class="built_in">cout</span>&lt;&lt;mp2[to[i^<span class="number">1</span>]]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mp2[to[i]]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="summer-holidayhdu1827"   >          <a href="#summer-holidayhdu1827" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#summer-holidayhdu1827"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1827" >Summer Holiday(HDU1827)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：一个有向图，找出最少要找几个点作为起点才能遍历整个图，并且输出最小的花费。因为联系起点是需要花费的。</p><p>题解：tarjan强连通缩点模板，直接找强连通分量，然后缩点，找到入度为0的强连通分量，即为需要联系的最少人数。再找到这些入度为0的连通分量里面权重最小的点，即为最开始联系的人，求和作为总的花费。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> n,m,num,cnt,top;</span><br><span class="line"><span class="keyword">int</span> s[ms],dfn[N],low[N],c[N];</span><br><span class="line"><span class="keyword">bool</span> ins[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;scc[N];</span><br><span class="line"><span class="keyword">int</span> a[N],du[N];</span><br><span class="line"><span class="keyword">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++num;</span><br><span class="line">    s[++top]=u;</span><br><span class="line">    ins[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;   </span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[v])</span><br><span class="line">            low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[u]==dfn[u])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            v=s[top--];</span><br><span class="line">            c[v]=cnt;</span><br><span class="line">            ins[v]=<span class="number">0</span>;</span><br><span class="line">            scc[cnt].push_back(v);</span><br><span class="line">        &#125;<span class="keyword">while</span>(v!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scc[i].clear();</span><br><span class="line">        head[i]=dfn[i]=low[i]=c[i]=du[i]=ins[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt=num=top=<span class="number">0</span>;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">            add(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u&lt;=n; u++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v=to[i];</span><br><span class="line">                <span class="keyword">if</span>(c[v]==c[u])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                du[c[v]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> minn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> per=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(du[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> mi=inf;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> v:scc[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    mi=min(mi,w[v]);</span><br><span class="line">                &#125;</span><br><span class="line">                per++;</span><br><span class="line">                minn+=mi;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,per,minn);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="cow-marathonpoj1985"   >          <a href="#cow-marathonpoj1985" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cow-marathonpoj1985"></a> <span class="exturl"><a class="exturl__link"   href="http://poj.org/problem?id=1985" >Cow Marathon(POJ1985)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：树的直径模板题。</p><p>注意输入，那个英文字母无用，第一个和第二个数字是点，第三个数字是边权。均为无向边。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms],cost[ms],tot;</span><br><span class="line"><span class="keyword">int</span> s,t,dis[ms];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  to[++tot]=v;</span><br><span class="line">  ne[tot]=head[u];</span><br><span class="line">  cost[tot]=w;</span><br><span class="line">  head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> v=to[i];</span><br><span class="line">    <span class="keyword">int</span> w=cost[i];</span><br><span class="line">    <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">    dis[v]=dis[u]+w;</span><br><span class="line">    <span class="keyword">if</span>(!flag&amp;&amp;dis[v]&gt;dis[s]) s=v;</span><br><span class="line">    <span class="keyword">if</span>(flag&amp;&amp;dis[v]&gt;dis[t]) t=v;</span><br><span class="line">    dfs(v,u,flag); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,w,cc;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %c&quot;</span>,&amp;u,&amp;v,&amp;w,&amp;cc);</span><br><span class="line">    add(u,v,w);</span><br><span class="line">    add(v,u,w);</span><br><span class="line">  &#125;</span><br><span class="line">  dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  dis[s]=<span class="number">0</span>;</span><br><span class="line">  dfs(s,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dis[t]);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="electricitypoj2117"   >          <a href="#electricitypoj2117" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#electricitypoj2117"></a> <span class="exturl"><a class="exturl__link"   href="http://poj.org/problem?id=2117" >Electricity(POJ2117)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：一张图，不一定连通。问，删去一个点，最多可以有多少个连通块。</p><p>题解：找割点，答案是一开始连通分量个数+割点可产生的最多连通分量的个数。</p><p>注意m==0的情况，因为必须要删除一个点，所以输出n-1。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> cut[N],dfn[N],low[N],num,root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  to[++tot]=v;</span><br><span class="line">  ne[tot]=head[u];</span><br><span class="line">  head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> ine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  dfn[u]=low[u]=++num;</span><br><span class="line">  <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> v=to[i];</span><br><span class="line">    <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">    &#123;</span><br><span class="line">      tarjan(v,i); </span><br><span class="line">      low[u]=min(low[v],low[u]);</span><br><span class="line">      <span class="keyword">if</span>(low[v]&gt;=dfn[u])</span><br><span class="line">      &#123;</span><br><span class="line">        flag++;</span><br><span class="line">        <span class="keyword">if</span>(flag&gt;<span class="number">1</span> || u!=root) cut[u]++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))</span><br><span class="line">      low[u]=min(low[u],dfn[v]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    head[i]=dfn[i]=low[i]=cut[i]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  tot=<span class="number">1</span>;</span><br><span class="line">  num=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span> &amp;&amp; n+m)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> u,v;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">      u++; v++;</span><br><span class="line">      add(u,v);</span><br><span class="line">      add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> fen=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">      &#123;</span><br><span class="line">        fen++;</span><br><span class="line">        root=i;</span><br><span class="line">        tarjan(i,<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// printf(&quot;%d **** %d\n&quot;,i,cut[i]);</span></span><br><span class="line">      maxx=max(maxx,cut[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,maxx+fen);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="street-directionspoj1515"   >          <a href="#street-directionspoj1515" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#street-directionspoj1515"></a> <span class="exturl"><a class="exturl__link"   href="http://poj.org/problem?id=1515" >Street Directions(POJ1515)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：一个无向连通图，最多能把多少条边改为有向边，使得剩下的图仍然是一个强连通分量。输出剩下的边。</p><p>题解：剩下的无向边必是割边，剩下那些边，会在某个边连通分量，每个边连通分量里的边都可以是有向边，仍然能互相到达，所以tarjan找到所有割边，dfs的顺序就作为有向边的方向即可。</p><p>注意每个样例后面有#。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e6</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms];</span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],tot,num;</span><br><span class="line"><span class="keyword">int</span> bridge[ms];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> ine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i ;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(bridge[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          bridge[i]=<span class="number">1</span>;<span class="comment">//当前边可用</span></span><br><span class="line">          bridge[i^<span class="number">1</span>]=<span class="number">-1</span>;<span class="comment">//反向边不可用</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v,i);</span><br><span class="line">            low[u]=min(low[v],low[u]);</span><br><span class="line">            <span class="keyword">if</span>(low[v]&gt;dfn[u])</span><br><span class="line">            &#123;</span><br><span class="line">              bridge[i]=bridge[i^<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//割边必是无向边</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))</span><br><span class="line">            low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        head[i]=dfn[i]=low[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span> &amp;&amp; n+m)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">            add(u,v);</span><br><span class="line">            add(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) tarjan(i,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n\n&quot;</span>,++p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=tot; i++)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(bridge[i]==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,to[i^<span class="number">1</span>],to[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="redundant-pathspoj3177"   >          <a href="#redundant-pathspoj3177" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#redundant-pathspoj3177"></a> <span class="exturl"><a class="exturl__link"   href="http://poj.org/problem?id=3177" >Redundant Paths(POJ3177)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：一个无向连通图，至少加几条边，才能使得任意两点间有两条完全不同的路径（可以有共同点）。</p><p>题解：tarjan求边双连通分量，然后缩点，记录每个点的度数。度数为1的点，即叶子节点，找到叶子的个数，那么添加的边数为（叶子数量+1）/2。可以作图看看。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms];</span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],tot,num,c[ms],du[ms];</span><br><span class="line"><span class="keyword">bool</span> bridge[ms];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> ine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])</span><br><span class="line">&#123;</span><br><span class="line">tarjan(v,i);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;dfn[u])</span><br><span class="line">&#123;</span><br><span class="line">bridge[i]=bridge[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">head[i]=dfn[i]=low[i]=c[i]=du[i]=<span class="number">0</span>;</span><br><span class="line">cnt=num=<span class="number">0</span>;</span><br><span class="line">tot=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span><span class="comment">//给连通块标号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c[u]=cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(c[v] || bridge[i]) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">add(u,v);</span><br><span class="line">add(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[i]) tarjan(i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!c[i])</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u&lt;=n; u++)<span class="comment">//记录每个连通块的度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(bridge[i])</span><br><span class="line">&#123;</span><br><span class="line">du[c[u]]++;</span><br><span class="line">du[c[v]]++;</span><br><span class="line">bridge[i]=bridge[i^<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++)<span class="comment">//叶子节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(du[i]==<span class="number">1</span>) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(ans+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 暑假图论专题训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暑假图论专题训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题二测试题解</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98%E4%BA%8C%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%AE%B2%E8%A7%A3/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98%E4%BA%8C%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[        <h1 id="专题二测试题解"   >          <a href="#专题二测试题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题二测试题解"></a> 专题二测试题解</h1>              <h2 id="the-shortest-pathhdu2807"   >          <a href="#the-shortest-pathhdu2807" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#the-shortest-pathhdu2807"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=2807" >The Shortest Path（HDU2807）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：挺有意思的一道题，n个城市，每个城市用一个矩阵表示，若是A*B=C表示AC两个城市之间有一条边，长度为1，先问是否存在一条X到Y的路。</p><p>题解：floyd变形题，处理一下矩阵即可，因为数据不大，暴力求就行，也可以采取乘法优化。注意A*B=B不能说明AB之间有边，，在这里wa了。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">111</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v[ms][ms];</span><br><span class="line">&#125;city[ms];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> e[ms][ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid[ms][ms]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)<span class="comment">//得出A*B</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                mid[i][j]+=city[u].v[i][k]*city[v].v[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//找到可达的C城镇</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==u || v==i) <span class="keyword">continue</span>;<span class="comment">//如果C=A或者C=B，不能连边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mid[j][k]!=city[i].v[j][k])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) e[u][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span> &amp;&amp; n+m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            e[i][i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                <span class="keyword">if</span>(i!=j) e[i][j]=e[j][i]=inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//读入每个城镇的矩阵</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;city[i].v[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);<span class="comment">//q次询问</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//任意两个城市是否相邻</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">                matrix(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)<span class="comment">//floyd跑所有可达城市</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(e[i][j]&gt;e[i][k]+e[k][j]) </span><br><span class="line">                        e[i][j]=e[i][k]+e[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q--)<span class="comment">//是否可达</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">            <span class="keyword">if</span>(e[a][b]!=inf) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,e[a][b]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Sorry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="find-the-longest-of-the-shortesthdu1595"   >          <a href="#find-the-longest-of-the-shortesthdu1595" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#find-the-longest-of-the-shortesthdu1595"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1595" >find the longest of the shortest（HDU1595）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：任删一条边，求删除一条边后最长的那条最短路。</p><p>题解：枚举删除每条边明显超时，仔细想想，发现删除非最短路上的边，最短路不会变化，所以先整一遍最短路标记最短路上的边，然后枚举删除最短路边即可。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1009</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],cost[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> pre[N],dis[N],vec[N],vis[N];</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;P;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    cost[tot]=w;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">        dis[i]=inf;</span><br><span class="line">        <span class="keyword">if</span>(flag) pre[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;P&gt;q;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.top().second; q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="comment">// if(del==i || (del^1==i)) continue;</span></span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+cost[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+cost[i];</span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(-dis[v],v));</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    pre[v]=i;<span class="comment">//记录前驱点</span></span><br><span class="line">                    vec[v]=u;<span class="comment">//记录和前驱点相连的边的序号</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n]==inf) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dis[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=<span class="number">1</span>;<span class="comment">//利用成对存储的技巧，i^1与i是同一条边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) head[i]=pre[i]=vec[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v,w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxx=dijkstra(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> v=n;</span><br><span class="line">        <span class="keyword">while</span>(v!=<span class="number">1</span>)<span class="comment">//根据前驱点，从后向前遍历最短路</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> w=cost[pre[v]];<span class="comment">//记录一下</span></span><br><span class="line">            cost[pre[v]]=cost[pre[v]^<span class="number">1</span>]=inf;<span class="comment">//去掉这条边</span></span><br><span class="line">            maxx=max(maxx,dijkstra(<span class="number">0</span>));</span><br><span class="line">            cost[pre[v]]=cost[pre[v]^<span class="number">1</span>]=w;</span><br><span class="line">            v=vec[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,maxx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="invitation-cardshdu1535"   >          <a href="#invitation-cardshdu1535" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#invitation-cardshdu1535"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1535" >Invitation Cards（HDU1535）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：P个车站，Q条有向边，从起点出发，分别将p-1个志愿者送往另外p-1个车站，晚上他们再回到起点车站。求最小交通费。</p><p>题解：来回两趟，第一趟从起点1跑个最短路。第二趟，反向建边，再从1跑个最短路。两次之和即为答案。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="keyword">int</span> v[M],w[M],next[M],head[M],d[M],edge;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> V)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(d,d+V,inf);</span><br><span class="line">    fill(head,head+V,<span class="number">-1</span>);</span><br><span class="line">    edge = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> x)</span><span class="comment">//主要如果是无向图的话,每条边要执行两次这个，a,b反过来就行</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[edge]=b;</span><br><span class="line">    w[edge]=x;</span><br><span class="line">    next[edge]=head[a];</span><br><span class="line">    head[a]=edge++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i!=<span class="number">-1</span>; i=next[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[v[i]]&gt;d[u]+w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v[i]]=d[u]+w[i];</span><br><span class="line">                q.push(v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> xxz</span></span><br><span class="line">    freopen(<span class="string">&quot;in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// xxz</span></span></span><br><span class="line">    <span class="keyword">int</span> n,sum,p,q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;p,&amp;q);</span><br><span class="line">        init(p+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;e[i].u,&amp;e[i].v,&amp;e[i].w);</span><br><span class="line">            addedge(e[i].u,e[i].v,e[i].w);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        SPFA(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= p; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += d[i];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        init(p+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            addedge(e[i].v,e[i].u,e[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">        SPFA(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= p; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="一个人的旅行hdu2066"   >          <a href="#一个人的旅行hdu2066" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一个人的旅行hdu2066"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=2066" >一个人的旅行（HDU2066）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：如题。</p><p>题解：与草儿家相邻的城镇距离为0。跑个最短路即可。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> T,S,D,n;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1111</span>][<span class="number">1111</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1111</span>],cast[<span class="number">1111</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">1111</span>],e[<span class="number">1111</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,minn,pos;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    vis[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">        cast[i] = <span class="built_in">map</span>[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        minn = inf;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cast[j]&lt;minn &amp;&amp; !vis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                pos = j;</span><br><span class="line">                minn = cast[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[pos] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cast[pos]+<span class="built_in">map</span>[pos][j]&lt;cast[j] &amp;&amp; !vis[j])</span><br><span class="line">                cast[j] = cast[pos]+<span class="built_in">map</span>[pos][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,x,y,z,start,end;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;T,&amp;S,&amp;D))</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">1111</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;<span class="number">1111</span>; j++)</span><br><span class="line">                <span class="built_in">map</span>[i][j] = inf;</span><br><span class="line">            <span class="built_in">map</span>[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(T--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            n = max(max(n,x),y);</span><br><span class="line">            <span class="keyword">if</span>(z&lt;<span class="built_in">map</span>[x][y])</span><br><span class="line">                <span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[y][x] = z;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> minn = inf;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;S; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">            <span class="built_in">map</span>[<span class="number">0</span>][s[i]] = <span class="built_in">map</span>[s[i]][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;D; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e[i]);</span><br><span class="line">        Dijkstra();</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;D; i++)</span><br><span class="line">            minn = min(minn,cast[e[i]]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,minn);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="find-the-mincost-routehdu1599"   >          <a href="#find-the-mincost-routehdu1599" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#find-the-mincost-routehdu1599"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1599" >find the mincost route（HDU1599）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：找一个最小环。。</p><p>题解：最小环嘛，至少三个点，只需要在跑floyd的时候更新那个最小值即可。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 9999999</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">110</span>][<span class="number">110</span>],dis[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyed</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k,j;</span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;=n;k++)&#123;                     <span class="comment">//外层k-1次循环后，</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;k;i++)&#123;<span class="comment">//floyed 变形。dis[i][j]则代表了i到j的路径中所有结点编号都小于k的最短路径  </span></span><br><span class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line">ans=min(ans,dis[i][j]+<span class="built_in">map</span>[i][k]+<span class="built_in">map</span>[k][j]);<span class="comment">//最小环 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//常规floyed 找i，j间的最短路</span></span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i==j)</span><br><span class="line"><span class="built_in">map</span>[i][j]=dis[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">map</span>[i][j]=dis[i][j]=INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[a][b]&gt;c)</span><br><span class="line"><span class="built_in">map</span>[a][b]=<span class="built_in">map</span>[b][a]=dis[a][b]=dis[b][a]=c;</span><br><span class="line">&#125;</span><br><span class="line">ans=INF;</span><br><span class="line">floyed();</span><br><span class="line"><span class="keyword">if</span> (ans&gt;=INF)</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;It&#x27;s impossible.\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>        <h2 id="world-exhibitionhdu3592"   >          <a href="#world-exhibitionhdu3592" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#world-exhibitionhdu3592"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=3592" >World Exhibition（HDU3592）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：n个人排队排一行，分别标号为1~n，可能多个人站在一个位置上；有些人关系好，间距不能超过c；有些人关系差，间距必须不小于c，问1和n间的最小距离。</p><p>题解：差分约束，将第一个人看作起始位置，d[i]表示第i个人距起始位置的距离，明显d[i]&gt;=d[i-1]。对于关系好的：d[b]-d[a]&lt;=c。关系差的：d[a]-d[b]&gt;=c。spfa求最短路。若有负环，则说明无解，若不连通，则1到n的距离可以是任意值，否则就是最短路。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms 1000010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const int Ms=1000010;</span></span><br><span class="line"><span class="keyword">int</span> n,x,y,t;</span><br><span class="line"><span class="keyword">int</span> tot,head[ms],to[ms],net[ms],cost[ms];</span><br><span class="line"><span class="keyword">int</span> dis[ms],in[ms];</span><br><span class="line"><span class="keyword">bool</span> vis[ms];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=b;</span><br><span class="line">    cost[tot]=c;</span><br><span class="line">    net[tot]=head[a];</span><br><span class="line">    head[a]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span>(in));    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    in[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i ;i=net[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// int v=to[i];</span></span><br><span class="line">            <span class="comment">// int cos=cost[i];</span></span><br><span class="line">            <span class="keyword">if</span>(dis[to[i]]&gt;dis[u]+cost[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[to[i]]=dis[u]+cost[i];</span><br><span class="line">                <span class="keyword">if</span>(!vis[to[i]])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[to[i]]=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(++in[to[i]]&gt;n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q.push(to[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n]==inf) <span class="built_in">printf</span>(<span class="string">&quot;-2\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=x; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            add(a,b,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            add(b,a,-c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            add(i,i<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">        spfa();</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 暑假图论专题训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暑假图论专题训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题四测试题解</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98%E5%9B%9B%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%AE%B2%E8%A7%A3/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98%E5%9B%9B%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[        <h1 id="专题四测试题解"   >          <a href="#专题四测试题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题四测试题解"></a> 专题四测试题解</h1>              <h2 id="genealogical-treepoj2367"   >          <a href="#genealogical-treepoj2367" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#genealogical-treepoj2367"></a> <span class="exturl"><a class="exturl__link"   href="http://poj.org/problem?id=2367" >Genealogical tree(POJ2367)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：一个火星人可以有多个子孙，一个火星人也可以有多个父亲，现在给出这些关系，给出一个合理的先后顺序，保证不违法祖先和后代的关系。</p><p>题解：拓扑模板，注意输出的是序号。多样例。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> du[N],level[N];</span><br><span class="line"><span class="keyword">int</span> ac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) head[i]=du[i]=<span class="number">0</span>;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(du[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">            level[i]=++c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            du[v]--;</span><br><span class="line">            <span class="keyword">if</span>(du[v]==<span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                level[v]=++c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u&lt;=n; u++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v)==<span class="number">1</span> &amp;&amp;v)</span><br><span class="line">            &#123;</span><br><span class="line">                add(u,v);</span><br><span class="line">                du[v]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        topsort();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ac[level[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ac[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ac[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="ordering-tasksuva10305"   >          <a href="#ordering-tasksuva10305" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ordering-tasksuva10305"></a> <span class="exturl"><a class="exturl__link"   href="https://vjudge.net/problem/UVA-10305" >Ordering Tasks(UVA10305)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：做任务，必须完成i才能做j，输出一个做任务的顺序。</p><p>题解：拓扑排序，直接写就行。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> du[N],level[N];</span><br><span class="line"><span class="keyword">int</span> ac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) head[i]=du[i]=<span class="number">0</span>;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(du[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">            level[i]=++c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            du[v]--;</span><br><span class="line">            <span class="keyword">if</span>(du[v]==<span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                level[v]=++c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span> &amp;&amp; n+m)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v,u;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">            add(u,v);</span><br><span class="line">            du[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        topsort();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ac[level[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ac[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ac[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="ollivanders-makers-of-fine-wands-since-382-bchdu1179"   >          <a href="#ollivanders-makers-of-fine-wands-since-382-bchdu1179" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ollivanders-makers-of-fine-wands-since-382-bchdu1179"></a> <span class="exturl"><a class="exturl__link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=1179" >Ollivanders: Makers of Fine Wands since 382 BC.HDU(1179)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：魔杖和巫师，每个魔杖可以匹配若干个法师，问最多组成多少对。</p><p>题解：二分图最大匹配，多样例。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> e[N][N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!p[v] || dfs(p[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                p[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(dfs(i)) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">        head[i]=p[i]=<span class="number">0</span>;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u&lt;=m; u++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">                add(u,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Hungarian());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="im-telling-the-truthhdu3729"   >          <a href="#im-telling-the-truthhdu3729" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#im-telling-the-truthhdu3729"></a> <span class="exturl"><a class="exturl__link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=3729" >I’m Telling the Truth(HDU3729)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：每个学生向老师报告自己的高考名次，在一个区间范围内，但老师发现有的学生撒谎，输出最多有多少人没有撒谎。</p><p>题解：每个学生与自己的区间里的每个数连一条边，求最大匹配数。因为字典序最大，所以匹配的时候从大到小。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms*<span class="number">60</span>],ne[ms*<span class="number">60</span>],tot;</span><br><span class="line"><span class="keyword">int</span> p[ms];</span><br><span class="line"><span class="keyword">bool</span> vis[ms];</span><br><span class="line"><span class="keyword">bool</span> vis1[<span class="number">66</span>];</span><br><span class="line"><span class="keyword">int</span> ac[<span class="number">66</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!p[v] || dfs(p[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                p[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(dfs(i)) </span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            vis1[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(vis1,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis1));</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u&lt;=n; u++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v=x; v&lt;=y; v++)</span><br><span class="line">                add(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=Hungarian();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis1[i]) ac[++cnt]=i;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;cnt; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ac[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ac[cnt]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="special-fishhdu3395"   >          <a href="#special-fishhdu3395" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#special-fishhdu3395"></a> <span class="exturl"><a class="exturl__link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=3395" >Special Fish(HDU3395)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：一种鱼，可以被其它鱼攻击，也可以攻击其它鱼，但只能和一条鱼有关系。每当两条鱼有关系之后，可以产生后代，后代的价值通过异或运算获得，求可以得到的最大价值。</p><p>题解：直接得到一个二分图，可以通过km来跑最大权匹配，得到答案。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e2</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">5e4</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> w[N][N];</span><br><span class="line"><span class="keyword">int</span> la[N],lb[N];</span><br><span class="line"><span class="keyword">bool</span> va[N],vb[N];</span><br><span class="line"><span class="keyword">int</span> match[N];</span><br><span class="line"><span class="keyword">int</span> delta,upd[N];</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="keyword">int</span> value[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,v=<span class="number">0</span>,vv=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=<span class="number">0</span>;</span><br><span class="line">upd[i]=inf;</span><br><span class="line">&#125;</span><br><span class="line">match[v]=u;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">a=match[v];</span><br><span class="line">delta=inf;</span><br><span class="line">vb[v]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>; b&lt;=n; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vb[b]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(upd[b]&gt;la[a]+lb[b]-w[a][b])</span><br><span class="line">&#123;</span><br><span class="line">upd[b]=la[a]+lb[b]-w[a][b];</span><br><span class="line">p[b]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(upd[b]&lt;delta)</span><br><span class="line">&#123;</span><br><span class="line">delta=upd[b];</span><br><span class="line">vv=b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;=n; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vb[b])</span><br><span class="line">&#123;</span><br><span class="line">la[match[b]]-=delta;</span><br><span class="line">lb[b]+=delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> upd[b]-=delta;</span><br><span class="line">&#125;</span><br><span class="line">v=vv;</span><br><span class="line">&#125;<span class="keyword">while</span>(match[v]);</span><br><span class="line"><span class="keyword">while</span>(v)</span><br><span class="line">&#123;</span><br><span class="line">match[v]=match[p[v]];</span><br><span class="line">v=p[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">km</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">match[i]=la[i]=lb[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(vb,<span class="number">0</span>,<span class="keyword">sizeof</span>(vb));</span><br><span class="line">bfs(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) ans+=w[match[i]][i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> sss[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span>(w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)==<span class="number">1</span> &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;value[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,sss+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sss[j]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">w[i][j]=(value[i]^value[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,km());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="interesting-housing-problemhdu2426"   >          <a href="#interesting-housing-problemhdu2426" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#interesting-housing-problemhdu2426"></a> <span class="exturl"><a class="exturl__link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=2426" >Interesting Housing ProblemHDU(2426)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：n个学生，m个房间，每个房间只能装一个学生，每个学生只能进一个房间。学生们会对一些房间进行评价，评分有正有负。学生们只能住进自己评价过，并且评分为非负数的房间。问学生们是否都有房住，若有，则输出评分总和，否则输出-1。</p><p>题解：n&lt;m显然无解。对于边权为负的边，可以忽略。另外，n可能不等于m，所以将不能选的边全部赋值为负无穷，表示不能选，若最终每个学生都能分到房间，输出总和即可。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e2</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">5e4</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,e;</span><br><span class="line"><span class="keyword">int</span> w[N][N];</span><br><span class="line"><span class="keyword">int</span> la[N],lb[N];</span><br><span class="line"><span class="keyword">bool</span> va[N],vb[N];</span><br><span class="line"><span class="keyword">int</span> match[N];</span><br><span class="line"><span class="keyword">int</span> delta,upd[N];</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,y=<span class="number">0</span>,yy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i]=<span class="number">0</span>;</span><br><span class="line">        upd[i]=inf;</span><br><span class="line">    &#125;</span><br><span class="line">    match[y]=x;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        a=match[y];</span><br><span class="line">        delta=inf;</span><br><span class="line">        vb[y]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>; b&lt;=m; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vb[b]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(upd[b]&gt;la[a]+lb[b]-w[a][b])</span><br><span class="line">            &#123;</span><br><span class="line">                upd[b]=la[a]+lb[b]-w[a][b];</span><br><span class="line">                p[b]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(upd[b]&lt;delta)</span><br><span class="line">            &#123;</span><br><span class="line">                delta=upd[b];</span><br><span class="line">                yy=b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;=m; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vb[b])</span><br><span class="line">            &#123;</span><br><span class="line">                la[match[b]]-=delta;</span><br><span class="line">                lb[b]+=delta;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> upd[b]-=delta;</span><br><span class="line">        &#125;</span><br><span class="line">        y=yy;</span><br><span class="line">    &#125;<span class="keyword">while</span>(match[y]);</span><br><span class="line">    <span class="keyword">while</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">        match[y]=match[p[y]];</span><br><span class="line">        y=p[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">km</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">match[i]=la[i]=lb[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(vb,<span class="number">0</span>,<span class="keyword">sizeof</span>(vb));</span><br><span class="line">bfs(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(match[i]==<span class="number">0</span> || w[match[i]][i]==<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">c++;</span><br><span class="line">ans+=w[match[i]][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c&lt;n) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">w[i][j]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;e)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=e; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;z);</span><br><span class="line"><span class="keyword">if</span>(z&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">u++; v++;</span><br><span class="line">w[u][v]=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case %d: &quot;</span>,++p);</span><br><span class="line"><span class="keyword">if</span>(n&gt;m) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,km());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 暑假图论专题训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暑假图论专题训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题一测试题解</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98%E4%B8%80%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%AE%B2%E8%A7%A3/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98%E4%B8%80%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[        <h1 id="专题一测试题解"   >          <a href="#专题一测试题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题一测试题解"></a> 专题一测试题解</h1>              <h2 id="oil-depositsuva572"   >          <a href="#oil-depositsuva572" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#oil-depositsuva572"></a> <span class="exturl"><a class="exturl__link"   href="https://172.16.72.183/problem/visitOriginUrl.action?id=23349" >Oil Deposits（UVA572）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：@是油田，判有几个连通块。</p><p>题解：八个方向，bfs或者dfs都行。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">111</span>][<span class="number">111</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">111</span>][<span class="number">111</span>];</span><br><span class="line"><span class="keyword">int</span> dix[]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;<span class="comment">//表示方向</span></span><br><span class="line"><span class="keyword">int</span> diy[]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;m&amp;&amp;!vis[x][y]&amp;&amp;s[x][y]==<span class="string">&#x27;@&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> dx=x+dix[i];</span><br><span class="line">        <span class="keyword">int</span> dy=y+diy[i];</span><br><span class="line">        <span class="keyword">if</span>(check(dx,dy))<span class="comment">//判断是否可以扩散</span></span><br><span class="line">        &#123;</span><br><span class="line">            vis[dx][dy]=<span class="number">1</span>;</span><br><span class="line">            dfs(dx,dy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span> &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]);   </span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[i][j]==<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;<span class="comment">//说明有一个新的连通块</span></span><br><span class="line">                    vis[i][j]=<span class="number">1</span>;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="lift-hoppinguva10801"   >          <a href="#lift-hoppinguva10801" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lift-hoppinguva10801"></a> <span class="exturl"><a class="exturl__link"   href="https://vjudge.net/problem/UVA-10801" >Lift Hopping（UVA10801）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：有一层不超过100层的大楼， 有n个电梯，它们的速度都不同。  而且每个电梯只能到达指定的那些楼层，而且它们都有各自的速度（即上升一层或下降一层所用的时间）。  如果一个人在某层走出电梯，要换一个电梯乘，那么他要等60秒（不管要等的是那个电梯，即使是刚刚出来的那个电梯也要等60秒）。在0层搭电梯出发时不需要等待。</p><p>题解：建图，层为点，每个电梯可以到达的层之间建立边，边权为到达的时间。一开始从0出发，更新dis时，若是可以通过换乘，则需要+60妙，其实就是松弛操作。建议dij吧。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN= <span class="number">100</span> + <span class="number">5</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> speed[MAXN],floors[MAXN];<span class="comment">//输入数据，</span></span><br><span class="line"><span class="keyword">int</span> w[MAXN][MAXN],d[MAXN];<span class="comment">//w是各点的权值 d是0到任意点的路径</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];<span class="comment">//vis是是否走过</span></span><br><span class="line"><span class="keyword">int</span> n,k,num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildG</span><span class="params">(<span class="keyword">int</span> ss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;num; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过楼之差乘时间，求权值，取最短</span></span><br><span class="line">            <span class="keyword">int</span> dis=<span class="built_in">abs</span>(floors[i]-floors[j])*speed[ss];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//因为是双向的，所以如此建图</span></span><br><span class="line">            <span class="keyword">if</span> (dis&lt;w[floors[i]][floors[j]])</span><br><span class="line">                w[floors[i]][floors[j]]=w[floors[j]][floors[i]]=dis;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//dij算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)<span class="comment">//初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        d[i]=i==<span class="number">0</span>?<span class="number">0</span>:INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)<span class="comment">//dij</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,m=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;<span class="number">100</span>; y++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[y]&amp;&amp;d[y]&lt;m)</span><br><span class="line">            &#123;</span><br><span class="line">                m=d[x=y];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vis[x]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;<span class="number">100</span>; y++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[y]&gt;d[x]+w[x][y]+<span class="number">60</span>)<span class="comment">//换乘电梯更快，从x层换乘电梯达到y层</span></span><br><span class="line">            &#123;</span><br><span class="line">                d[y]=d[x]+w[x][y]+<span class="number">60</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d[k]==INF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;IMPOSSIBLE\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d[k]<span class="number">-60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(w,INF,<span class="keyword">sizeof</span>(w));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;speed[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//注意输入，这样处理很好，要借鉴</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;floors[num++]);</span><br><span class="line">                <span class="keyword">if</span> (getchar()==‘\n‘)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            buildG(i);</span><br><span class="line">        &#125;</span><br><span class="line">        dijk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="非常可乐hdu1495"   >          <a href="#非常可乐hdu1495" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#非常可乐hdu1495"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1495" >非常可乐（HDU1495）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：三个容器，体积分别为S，N，M，问怎么倒可以将体积为S的饮料均分为两份，一开始饮料在S中。</p><p>题解：如果为奇数，肯定不行。有六种转移状态，S，N，M分别作为倒入或者倒出的容器，每次要么倒完，要么倒满，bfs求出最少次数即可。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">int</span> step;</span><br><span class="line">&#125; ty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> now[<span class="number">3</span>]; <span class="comment">// 存放目前的情况</span></span><br><span class="line"><span class="keyword">int</span> lim[<span class="number">3</span>]; <span class="comment">// 存放容器大小</span></span><br><span class="line"><span class="keyword">int</span> tt[<span class="number">3</span>];  <span class="comment">// 暂存</span></span><br><span class="line"><span class="keyword">int</span> via[<span class="number">102</span>][<span class="number">102</span>][<span class="number">102</span>]; <span class="comment">// 判断此情况是否出现过</span></span><br><span class="line">ty t,d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t.x = now[<span class="number">0</span>];</span><br><span class="line">    t.y = now[<span class="number">1</span>];</span><br><span class="line">    t.z = now[<span class="number">2</span>];</span><br><span class="line">    t.step = <span class="number">0</span>;</span><br><span class="line">    via[t.x][t.y][t.z] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span> &lt;ty&gt; Q;</span><br><span class="line">    Q.push(t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( !Q.empty() ) &#123;</span><br><span class="line">        t = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line"></span><br><span class="line">        now[<span class="number">0</span>] = t.x;  <span class="comment">// 这个地方不要漏掉</span></span><br><span class="line">        now[<span class="number">1</span>] = t.y;  <span class="comment">// 这种状态下进行操作，作为初始状态</span></span><br><span class="line">        now[<span class="number">2</span>] = t.z;   <span class="comment">// 做下面6种操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( (t.x==t.y&amp;&amp;t.z==<span class="number">0</span>) || (t.x==t.z&amp;&amp;t.y==<span class="number">0</span>) || (t.y==t.z&amp;&amp;t.x==<span class="number">0</span>) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> t.step ;  <span class="comment">// 判断是否均分</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++ ) &#123; <span class="comment">// 倒入</span></span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++ ) &#123; <span class="comment">// 被倒</span></span><br><span class="line">                <span class="keyword">if</span> ( i!=j &amp;&amp; now[i]&gt;<span class="number">0</span> ) &#123;</span><br><span class="line">                    tt[<span class="number">0</span>] = now[<span class="number">0</span>];  <span class="comment">// 暂存一下，这次结束恢复初始状态</span></span><br><span class="line">                    tt[<span class="number">1</span>] = now[<span class="number">1</span>]; </span><br><span class="line">                    tt[<span class="number">2</span>] = now[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ( lim[j]&gt;now[i]+now[j] ) &#123;</span><br><span class="line">                        now[j] += now[i];</span><br><span class="line">                        now[i] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        now[i] -= lim[j]-now[j];</span><br><span class="line">                        now[j] = lim[j];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    d.x = now[<span class="number">0</span>];</span><br><span class="line">                    d.y = now[<span class="number">1</span>];</span><br><span class="line">                    d.z = now[<span class="number">2</span>];</span><br><span class="line">                    d.step = t.step + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> ( via[d.x][d.y][d.z]==<span class="number">0</span> ) &#123;</span><br><span class="line">                        via[d.x][d.y][d.z] = <span class="number">1</span>;</span><br><span class="line">                        Q.push(d);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    now[<span class="number">0</span>] = tt[<span class="number">0</span>];</span><br><span class="line">                    now[<span class="number">1</span>] = tt[<span class="number">1</span>];</span><br><span class="line">                    now[<span class="number">2</span>] = tt[<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span>&gt;&gt;lim[<span class="number">0</span>]&gt;&gt;lim[<span class="number">1</span>]&gt;&gt;lim[<span class="number">2</span>] &amp;&amp; lim[<span class="number">0</span>]!=<span class="number">0</span> ) &#123;</span><br><span class="line">        now[<span class="number">0</span>] = lim[<span class="number">0</span>];</span><br><span class="line">        now[<span class="number">1</span>] = now[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( lim[<span class="number">0</span>]%<span class="number">2</span>==<span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">memset</span>(via,<span class="number">0</span>,<span class="keyword">sizeof</span>(via));</span><br><span class="line">            <span class="keyword">int</span> ans = bfs();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( ans==<span class="number">-1</span> ) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="六度分离hdu1869"   >          <a href="#六度分离hdu1869" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#六度分离hdu1869"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1869" >六度分离（HDU1869）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：给出点和边，判断两个人直接的距离是否小于等于7（因为隔着6个人）。</p><p>题解：floyd跑一遍，多源最短路，然后判断任意两个人之间的距离是否小于等于7，若都小于等于，则满足条件。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">109</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> e[<span class="number">109</span>][<span class="number">109</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j) e[i][j]=<span class="number">0</span>;<span class="comment">//自己到自己的距离为0</span></span><br><span class="line">                <span class="keyword">else</span> e[i][j]=<span class="number">1000000000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">            e[u][v]=e[v][u]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(e[i][k]+e[k][j]&lt;e[i][j])</span><br><span class="line">                        e[i][j]=e[i][k]+e[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">                <span class="keyword">if</span>(e[i][j]&gt;<span class="number">7</span>) flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>        <h2 id="constructing-roadshdu1102"   >          <a href="#constructing-roadshdu1102" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#constructing-roadshdu1102"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1102" >Constructing Roads（HDU1102）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：n个村子，需要建路使得所有村子连通，已经存在了一些道路，现在让你建一些道路，使得建的路的总长度最小。</p><p>题解：最小生成树。已经存在的路的权值视为0，然后去选择另外的边，套个最小生成树板子即可。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> fa[ms];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>//存边</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">&#125;e[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span><span class="comment">//排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.w&lt;y.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=find(e[i].u);</span><br><span class="line">        <span class="keyword">int</span> y=find(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">        fa[x]=y;</span><br><span class="line">        ans+=e[i].w;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> w;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)<span class="comment">//该村庄到其它村庄的长度</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w);</span><br><span class="line">                m++;</span><br><span class="line">                e[m].u=i; e[m].v=j;</span><br><span class="line">                e[m].w=w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=q; i++)<span class="comment">//已经存在的道路</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++m;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;e[m].u,&amp;e[m].v);</span><br><span class="line">            e[m].w=<span class="number">0</span>;<span class="comment">//边权为0</span></span><br><span class="line">        &#125;</span><br><span class="line">        sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            fa[i]=i;</span><br><span class="line">        kruskal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="bubble-shooterhdu1547"   >          <a href="#bubble-shooterhdu1547" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bubble-shooterhdu1547"></a> <span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1547" >Bubble Shooter（HDU1547）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h2>      <p>题意：这个题就是一个泡泡龙消除泡泡的游戏，只要新发射的泡泡所处在的位置，与其相邻且包括其自身同种颜色的泡泡数&gt;=3时，就可被消去。消去之后，那些没有与第一层直接或间接相连的泡泡也会被消去。</p><p>题解：  事先根据新发射泡泡的位置，将所有与之直接或间接相邻泡泡且颜色相同的泡泡的位置做上标记，然后在将这些标记上的泡泡化为’E’且记录标记的数量。然后遍历第1行所有的泡泡，用DFS搜出所有与第一行还存在的泡泡有着直接或间接相连的，并给他们做上标记。最后根据这些标记，即可得到最终结果。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">111</span>][<span class="number">111</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">char</span> st;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dox[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;<span class="comment">//行是偶数时</span></span><br><span class="line"><span class="keyword">int</span> doy[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dex[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;<span class="comment">//行是奇数时</span></span><br><span class="line"><span class="keyword">int</span> dey[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//找到所有相邻的同颜色球</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dx,dy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dx=x+dox[i];</span><br><span class="line">            dy=y+doy[i];                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dx=x+dex[i];</span><br><span class="line">            dy=y+dey[i];            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[dx][dy]==st)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            s[dx][dy]=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">            dfs(dx,dy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//与第一层连接的球</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dx,dy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dx=x+dox[i];</span><br><span class="line">            dy=y+doy[i];                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dx=x+dex[i];</span><br><span class="line">            dy=y+dey[i];            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[dx][dy]!=<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[dx][dy]=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">            dfs1(dx,dy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sx,sy;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;n,&amp;m,&amp;sx,&amp;sy)==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n+<span class="number">1</span>; i++)</span><br><span class="line">            s[i][<span class="number">0</span>]=s[i][m+<span class="number">1</span>]=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m+<span class="number">1</span>; i++)</span><br><span class="line">            s[<span class="number">0</span>][i]=s[n+<span class="number">1</span>][i]=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i+=<span class="number">2</span>)</span><br><span class="line">            s[i][m]=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        st=s[sx][sy];</span><br><span class="line">        s[sx][sy]=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        ans++;</span><br><span class="line">        dfs(sx,sy);</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;=<span class="number">2</span>)<span class="comment">//说明新加的球不能被消</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)<span class="comment">//遍历第一层</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">1</span>][i]==<span class="string">&#x27;E&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            s[<span class="number">1</span>][i]=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">            dfs1(<span class="number">1</span>,i);           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//查看哪些是断开的</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i][j]!=<span class="string">&#x27;E&#x27;</span>) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 暑假图论专题训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暑假图论专题训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【二分】20上海D</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E8%AE%B0%E5%BD%95%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E3%80%91HDU1595/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E8%AE%B0%E5%BD%95%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E3%80%91HDU1595/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=1595" >find the longest of the shortest（HDU1595）*</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>很简单，开一个数组记录前驱即可。</p><p>最近还看到一道题，要求任删一条边，求出删除一条边后的最长的最短路。</p><p>明显，只有删除最短路上的边才会对结果造成影响，所以先一遍最短路，记录所有点和边，枚举删除每条最短路的边，找到最长最短路即可。用前向星存边，成对存储。可以处理重边的情况。但这道题好像没有重边。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1009</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[ms],cost[ms],ne[ms],tot;</span><br><span class="line"><span class="keyword">int</span> pre[N],dis[N],vec[N],vis[N];</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;P;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    cost[tot]=w;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">bool</span> flag,<span class="keyword">int</span> del)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">        dis[i]=inf;</span><br><span class="line">        <span class="keyword">if</span>(flag) pre[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;P&gt;q;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.top().second; q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>((del==i) || ((del^<span class="number">1</span>)==i)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+cost[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+cost[i];</span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(-dis[v],v));</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    pre[v]=i;<span class="comment">//记录前驱点</span></span><br><span class="line">                    vec[v]=u;<span class="comment">//记录和前驱点相连的边的序号</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n]==inf) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dis[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=<span class="number">1</span>;<span class="comment">//利用成对存储的技巧，i^1与i是同一条边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) head[i]=pre[i]=vec[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v,w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxx=dijkstra(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> v=n;</span><br><span class="line">        <span class="keyword">while</span>(v!=<span class="number">1</span>)<span class="comment">//根据前驱点，从后向前遍历最短路</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> w=cost[pre[v]];<span class="comment">//记录一下</span></span><br><span class="line">            <span class="comment">// cost[pre[v]]=cost[pre[v]^1]=inf;//去掉这条边</span></span><br><span class="line">            maxx=max(maxx,dijkstra(<span class="number">0</span>,pre[v]));</span><br><span class="line">            <span class="comment">// cost[pre[v]]=cost[pre[v]^1]=w;</span></span><br><span class="line">            v=vec[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,maxx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 区域赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分或三分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无向图最大团</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%97%A0%E5%90%91%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%9B%A2/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%97%A0%E5%90%91%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%9B%A2/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p><strong>Bron-Kerbosch算法</strong></p><p>啊，这个真的没看明白怎么搞得，先记下来吧，等有时间再看。。。啊啊，差不多明白了。（其实对代码的某些细节还是不太清楚）</p><p>其实就是从n开始向1枚举，每次添加i点作为初始点，然后判断i+1~n有没有和它相邻的点，若是有，则递归判断这个和它相邻的点与哪些点能成极大团。emmm挺妙的。</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/SparkFucker/article/details/83051133" >1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/yo_bc/article/details/77453478" >2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_30786657/article/details/96223077?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-12.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-12.baidujs" >3</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_31971181/article/details/113413419?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.baidujs" >4</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> a[N][N];<span class="comment">//a为图的邻接表(从1开始) </span></span><br><span class="line"><span class="keyword">int</span> ans, cnt[N], group[N], n, m, vis[N];<span class="comment">//ans表示最大团，cnt[N]表示当前最大团的节点数，group[N]用以寻找一个最大团集合 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">( <span class="keyword">int</span> u, <span class="keyword">int</span> pos )</span><span class="comment">//u为当从前顶点开始深搜，pos为深搜深度（即当前深搜树所在第几层的位置） </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>( i = u+<span class="number">1</span>; i &lt;= n; i++)<span class="comment">//按递增顺序枚举顶点 </span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>( cnt[i]+pos &lt;= ans ) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//剪枝 </span></span><br><span class="line">        <span class="keyword">if</span>( a[u][i] ) </span><br><span class="line">&#123;</span><br><span class="line">             <span class="comment">// 与目前团中元素比较，取 Non-N(i) </span></span><br><span class="line">            <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; pos; j++ ) <span class="keyword">if</span>( !a[i][ vis[j] ] ) <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">if</span>( j == pos )</span><br><span class="line">&#123;     <span class="comment">// 若为空，则皆与 i 相邻，则此时将i加入到 最大团中 </span></span><br><span class="line">                vis[pos] = i;<span class="comment">//深搜层次也就是最大团的顶点数目，vis[pos] = i表示当前第pos小的最大团元素为i（因为是按增顺序枚举顶点 ） </span></span><br><span class="line">                <span class="keyword">if</span>( dfs( i, pos+<span class="number">1</span> ) ) <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span>( pos &gt; ans )</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; pos; i++ )</span><br><span class="line">                group[i] = vis[i]; <span class="comment">// 更新最大团元素 </span></span><br><span class="line">            ans = pos;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxclique</span><span class="params">()</span><span class="comment">//求最大团 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[<span class="number">0</span>]=i;</span><br><span class="line">        dfs(i,<span class="number">1</span>);</span><br><span class="line">        cnt[i]=ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//求原图的补图 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">       maxclique();<span class="comment">//求最大团 </span></span><br><span class="line">        <span class="keyword">if</span>( ans &lt; <span class="number">0</span> ) ans = <span class="number">0</span>;<span class="comment">//ans表示最大团</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">0 1 1 0 1 0 0</span></span><br><span class="line"><span class="comment">1 0 0 1 1 1 0</span></span><br><span class="line"><span class="comment">1 0 0 1 0 0 0</span></span><br><span class="line"><span class="comment">0 1 1 0 0 0 1</span></span><br><span class="line"><span class="comment">1 1 0 0 0 0 0</span></span><br><span class="line"><span class="comment">0 1 0 0 0 0 1</span></span><br><span class="line"><span class="comment">0 0 0 1 0 1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无向图最大团 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匈牙利算法</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/96229700" >匈牙利算法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>很好的一个介绍，只是知乎上那种写法相当于是二分有向图，而下面这种是我稍加改动，适用于二分无向图，但是结果是最大匹配数的二倍。</p><p>复杂度O(nm)</p><p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/12606/B" >一道题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>这是一道对应的题目，看似是一个随机的无向图，但根据题意其实可以推出是一个二分无向图，emmm因为题意特殊，给出的每个字符串至多与一个字符串无法swap-free。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> M, N;            <span class="comment">//M, N分别表示左、右侧集合的元素数量</span></span><br><span class="line"><span class="keyword">int</span> Map[MAXM][MAXN]; <span class="comment">//邻接矩阵存图，无向图</span></span><br><span class="line"><span class="keyword">int</span> p[MAXN];         <span class="comment">//记录当前右侧元素所对应的左侧元素</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];      <span class="comment">//记录右侧元素是否已被访问过</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j)</span><br><span class="line">        <span class="keyword">if</span> (Map[i][j] &amp;&amp; !vis[j]) <span class="comment">//有边且未访问</span></span><br><span class="line">        &#123;</span><br><span class="line">            vis[j] = <span class="literal">true</span>;                 <span class="comment">//记录状态为访问过</span></span><br><span class="line">            <span class="keyword">if</span> (p[j] == <span class="number">0</span> || match(p[j])) <span class="comment">//如果暂无匹配，或者原来匹配的左侧元素可以找到新的匹配</span></span><br><span class="line">            &#123;</span><br><span class="line">                p[j] = i;    <span class="comment">//当前左侧元素成为当前右侧元素的新匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//返回匹配成功</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//循环结束，仍未找到匹配，返回匹配失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis)); <span class="comment">//重置vis数组</span></span><br><span class="line">        <span class="keyword">if</span> (match(i))</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;<span class="comment">//最大匹配数的二倍</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 匈牙利算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【单调栈】gym102483A</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%91gym102483A/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%91gym102483A/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>二维平面，给出n个接口，第i个队伍必须使用第i个接口。对于队伍号i&lt;j，那么第j个队伍必须在第i个队伍的右上方，可以处于同一点，求队伍与接口曼哈顿距离的平方的和。</p><p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/102483/problem/A" >CF例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>式子写出来</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mi>n</mi><mi>i</mi></munderover><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mi mathvariant="normal">−</mi><msub><mi>x</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><munderover><mo>∑</mo><mi>n</mi><mi>i</mi></munderover><mo stretchy="false">(</mo><msub><mi>Y</mi><mi>i</mi></msub><mi mathvariant="normal">−</mi><msub><mi>y</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">∑_n^i(X_i−x_i)^2+∑_n^i(Y_i−y_i)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.061674em;vertical-align:-1.250005em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000002em;"><span style="top:-1.8999949999999999em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.250005em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.061674em;vertical-align:-1.250005em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000002em;"><span style="top:-1.8999949999999999em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.250005em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>可以看出横纵坐标能分别求解。现在看横坐标，对于任意两点，可以猜出来，当两支队伍位于同一点时，会使得距离，设为d，</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mi mathvariant="normal">−</mi><mi>d</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>X</mi><mi>j</mi></msub><mi mathvariant="normal">−</mi><mi>d</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(X_i−d)^2+(X_j−d)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathdefault">d</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.150216em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathdefault">d</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>可知当</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><msub><mi>X</mi><mi>i</mi></msub><mo>+</mo><msub><mi>X</mi><mi>J</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">d=(2X_i+X_J)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.09618em;">J</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span></span></p><p>时有最小值，对于n个点，就是求和除以n了，其实就是平均值。现在题目要求比较特殊，可以用单调栈维护这个平均值，如果新加入的值小于这个平均值，那么将他们合并，若是大于，直接加入栈中即可。之后再计算曼哈顿距离的平方和。</p><p>注意cf不能用cout输出有精度要求的输出。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e2</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll aa[ms];</span><br><span class="line">ll bb[ms];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    ll ave;</span><br><span class="line">&#125;s1[ms],s2[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(ll a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll ave=a[i];</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">1</span> &amp;&amp; (s1[top].ave*num)&gt;=(ave*s1[top].num))<span class="comment">//若是栈顶数据大于新加的</span></span><br><span class="line">        &#123;</span><br><span class="line">            ave+=s1[top].ave;<span class="comment">//加上去</span></span><br><span class="line">            num+=s1[top].num;</span><br><span class="line">            top--;<span class="comment">//弹出</span></span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        s1[top].ave=ave;<span class="comment">//入栈</span></span><br><span class="line">        s1[top].num=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=top; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num=s1[i].num;</span><br><span class="line">        <span class="keyword">double</span> ave=(<span class="keyword">double</span>)s1[i].ave/(<span class="keyword">double</span>)num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=num; j++,k++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=(a[k]-ave)*(a[k]-ave);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;aa[i],&amp;bb[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    gao(aa);</span><br><span class="line">    gao(bb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.8f\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【双指针(尺取法)】21ccpc网赛B</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8F%8C%E6%8C%87%E9%92%88(%E5%B0%BA%E5%8F%96%E6%B3%95)%E3%80%9121ccpc%E7%BD%91%E8%B5%9BB/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8F%8C%E6%8C%87%E9%92%88(%E5%B0%BA%E5%8F%96%E6%B3%95)%E3%80%9121ccpc%E7%BD%91%E8%B5%9BB/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>挺恶心的题意，n个字符串，最长为12，根据题意是每次依次从每个字符串选出一个字符，会形成一个无限长的字符串，现在问最少需要多长可以包含所有种类的字符。</p><p><span class="exturl"><a class="exturl__link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=7101" >杭电2021ccpc网赛B</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>最长为12，1~12的lcm只有27720（为什么求lcm？因为这样能找出它的最长循环节），而由于可能有长度相同的字符串，所以建议每次构造时构造的字符串长度为27720*n，这样也不会爆掉。然后双指针滑一滑就行。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e2</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">string</span> ss;</span><br><span class="line"><span class="keyword">int</span> poi[N];</span><br><span class="line"><span class="keyword">int</span> l[N];</span><br><span class="line"><span class="keyword">char</span> a[N][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        s.clear();</span><br><span class="line">        <span class="built_in">memset</span>(poi,<span class="number">0</span>,<span class="keyword">sizeof</span>(poi));</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> kind=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i]);</span><br><span class="line">            l[i]=<span class="built_in">strlen</span>(a[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;l[i]; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[a[i][j]]) <span class="keyword">continue</span>;</span><br><span class="line">                vis[a[i][j]]=<span class="number">1</span>; kind++;<span class="comment">//几种类型的字符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lcm=<span class="number">27720</span>*n;<span class="comment">//总长度</span></span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)<span class="comment">//构造这个字符串</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                s+=a[i][poi[i]];</span><br><span class="line">                poi[i]++; <span class="keyword">if</span>(poi[i]==l[i]) poi[i]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(++cnt==lcm)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ss=s; s=s+ss;<span class="comment">//因为最短的部分可能与两次循环相交，所以再延长一倍。</span></span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minn=inf;</span><br><span class="line">        k=<span class="number">1</span>; c[s[<span class="number">0</span>]]++;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(right&lt;s.size()<span class="number">-1</span> &amp;&amp; k&lt;kind)<span class="comment">//类型不够，并且可以右滑</span></span><br><span class="line">            &#123;</span><br><span class="line">                c[s[++right]]++;</span><br><span class="line">                <span class="keyword">if</span>(c[s[right]]==<span class="number">1</span>) k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;kind) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">while</span>(k==kind)<span class="comment">//类型够了，左指针右滑</span></span><br><span class="line">            &#123;</span><br><span class="line">                minn=min(right-left+<span class="number">1</span>,minn);</span><br><span class="line">                c[s[left]]--;</span><br><span class="line">                <span class="keyword">if</span>(c[s[left++]]==<span class="number">0</span>) k--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,minn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判环</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%88%A4%E7%8E%AF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%88%A4%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>判环主要有三种方法</p><p>1.拓扑排序</p><p>2.dfs</p><p>3.并查集</p><p>前两种用的比较多，并查集可以有很多操作。另外floyd也可以判环。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="拓扑排序"   >          <a href="#拓扑排序" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h2>      <ul><li>在判断无向图中是否存在环时，是将所有<strong>度 = 1</strong> 的结点入队，剩下的度大于等于2的点即是环上的点；</li><li>在判断有向图中是否存在环时，是将所有<strong>入度 = 0</strong> 的结点入队，剩下的度不为0的点即在环上。</li></ul><p>这里有一道无向图判环的题：<span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=7050" >HDU7050</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，看着像一道数学题，其实变换一下那个式子，就能发现很像置换，再化一化就能看出来和环有关，判断各个环的权值平均值是否相等，用top序过滤一下不在环上的边，因为这些边一定可以走到环上，之后模拟置换过程，算环的权值平均值，自环也算。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">500009</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> du[ms];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y;</span><br><span class="line">    ne[tot]=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span><span class="comment">//无向图拓扑，过滤图，只剩环</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(du[i]==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y=to[i];</span><br><span class="line">            du[y]--;</span><br><span class="line">            <span class="keyword">if</span>(du[y]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            head[i]=<span class="number">0</span>;</span><br><span class="line">            du[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        ll av=<span class="number">0</span>;<span class="comment">//分子</span></span><br><span class="line">        ll shu=<span class="number">0</span>;<span class="comment">//分母</span></span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line">            x=i;</span><br><span class="line">            add(x,y);</span><br><span class="line">            add(y,x);</span><br><span class="line">            f[x]=y;</span><br><span class="line">            du[x]++; du[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">        topsort();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(du[i]&lt;=<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ll cnt;</span><br><span class="line">            ll sum;</span><br><span class="line">            <span class="keyword">int</span> x=i,y=f[i];</span><br><span class="line">            cnt=<span class="number">1</span>;</span><br><span class="line">            sum=x;</span><br><span class="line">            du[x]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(du[y]&gt;=<span class="number">2</span>)<span class="comment">//置换，直到走回原位置</span></span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                sum+=y;</span><br><span class="line">                du[y]=<span class="number">0</span>;</span><br><span class="line">                x=y;</span><br><span class="line">                y=f[y];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(shu==<span class="number">0</span>)<span class="comment">//之前还没环，则先赋值</span></span><br><span class="line">            &#123;</span><br><span class="line">                shu=cnt;</span><br><span class="line">                av=sum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(shu*sum!=av*cnt)<span class="comment">//如果两个环的均值不相等，说明不行。</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="dfs"   >          <a href="#dfs" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dfs"></a> dfs</h2>      <p>使用 DFS 可以判断一个无向图和有向中是否存在环。深度优先遍历图，如果在遍历的过程中，发现某个结点有一条边指向已访问过的结点，并且这个已访问过的结点不是上一步访问的结点，则表示存在环。</p><p>我们不能仅仅使用一个 bool 数组来表示结点是否访问过。规定每个结点都拥有三种状态，白、灰、黑。开始时所有结点都是白色，当访问过某个结点后，该结点变为灰色，当该结点的所有邻接点都访问完，该节点变为黑色。</p><p>那么我们的算法可以表示为：如果在遍历的过程中，发现某个结点有一条边指向灰色节点，并且这个灰色结点不是上一步访问的结点，那么存在环。</p>        <h2 id="并查集"   >          <a href="#并查集" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2>      <p>之前用并查集写过一到最小环的题，感觉上面可以进行的操作还是挺多的。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P2661" >P2661</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cnt++;</span></span><br><span class="line"><span class="keyword">return</span> (f[x]==x)?x:(get(f[x]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 判环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rmq和st</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/rmq%E5%92%8Cst/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/rmq%E5%92%8Cst/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>rmq区间最值问题，著名的st算法常被用来解决这个问题，需要先了解一下倍增思想。</p><p>可以O（NlogN）预处理出区间，然后O（1）查询。</p><p>st[i,j]表示子区间[i,i+2<sup>j−1]里的最大值，那么我们可以得出一个递推式子st[i,j]=max(st[i,j−1],st[i+2</sup>(j-1),j−1])。即子区间的长度成倍增长，长度为2<sup>j的子区间是左右两半长度为2</sup>(j-1)的子区间中最大值较大的一个。这样就能处理出所有区间最值。</p><p>询问时，先算一个k，满足2<sup>k&lt;=r−l+1&lt;2</sup>(k+1)，也就是2的k次幂小于区间长度下的最大k，然后从l开始的2<sup>k个数和以r结尾的2</sup>k的个数这两段一定覆盖了整个区间[l,r]，重叠一部分也没关系。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//rmq询问</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="built_in">log</span>(r-l+<span class="number">1</span>)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> max(st[l][k],st[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initrmq</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        st[i][<span class="number">0</span>]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tt=<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>);<span class="comment">//rmq预处理区间最值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=tt; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)&lt;=n+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[i][j]=max(st[i][j<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>下面是21牛客多校8的J题：<span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/11259/J" >21牛客8J</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>是一道树上博弈与rmq结合的题目，其实不用rmq也行，很容易优化成线性的。</p><p>树上博弈，无非是两个人轮流走，递归搜索，走到每个位置的时候，会有多个选择，那么就递归选择最有利于自己的情况，这道题的部分看代码吧。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1000009</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,s,t;</span><br><span class="line"><span class="keyword">int</span> f[ms]; </span><br><span class="line"><span class="keyword">int</span> vis[ms];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;road;</span><br><span class="line"><span class="keyword">int</span> len[ms];</span><br><span class="line"><span class="keyword">int</span> st[<span class="number">3</span>][ms/<span class="number">2</span>][<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y;</span><br><span class="line">    ne[tot]=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span><span class="comment">//得到一棵树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[u]=fa;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v!=fa) dfs(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getlen</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span><span class="comment">//得到s~t上每点可以到达的最大深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v==fa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        ans=max(ans,getlen(v,u)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//rmq询问</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="built_in">log</span>(r-l+<span class="number">1</span>)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(id==<span class="number">1</span>) <span class="keyword">return</span> max(st[<span class="number">1</span>][l][k],st[<span class="number">1</span>][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> max(st[<span class="number">2</span>][l][k],st[<span class="number">2</span>][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>)<span class="comment">//第一个人想让差值尽量大，是max</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> score=st[<span class="number">1</span>][l][<span class="number">0</span>]-query(<span class="number">2</span>,l+<span class="number">1</span>,r);<span class="comment">//他从第i个点离开时的得分</span></span><br><span class="line">        <span class="keyword">if</span>(l+<span class="number">1</span>==r) <span class="keyword">return</span> score;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(score,solve(l+<span class="number">1</span>,r,<span class="number">2</span>));<span class="comment">//不从第i个点离开，继续在s~t路经上走1步</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//第二个人想让差值尽量大，是min</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> score=query(<span class="number">1</span>,l,r<span class="number">-1</span>)-st[<span class="number">2</span>][r][<span class="number">0</span>];<span class="comment">//他从第i个点离开时的得分</span></span><br><span class="line">        <span class="keyword">if</span>(l+<span class="number">1</span>==r) <span class="keyword">return</span> score;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(score,solve(l,r<span class="number">-1</span>,<span class="number">1</span>));<span class="comment">//不从第i个点离开，继续在s~t路经上走1步</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;s,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        add(x,y);</span><br><span class="line">        add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(s,<span class="number">0</span>);<span class="comment">//以s为根，建一棵树</span></span><br><span class="line">    <span class="keyword">while</span>(t)<span class="comment">//得到从s到t的路径</span></span><br><span class="line">    &#123;</span><br><span class="line">        road.push_back(t);</span><br><span class="line">        vis[t]=<span class="number">1</span>;<span class="comment">//表示这个点用过</span></span><br><span class="line">        t=f[t];</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(road.begin(),road.end());<span class="comment">//翻转一下方便我想</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;road.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        len[i+<span class="number">1</span>]=getlen(road[i],<span class="number">0</span>);<span class="comment">//s~t这条路径。得到以road[i]为根的子树的最大深度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l=road.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        st[<span class="number">1</span>][i][<span class="number">0</span>]=len[i]+i;<span class="comment">//这是从s出发，然后在i点离开s~t路径的深度</span></span><br><span class="line">        st[<span class="number">2</span>][i][<span class="number">0</span>]=len[i]+l-i+<span class="number">1</span>;<span class="comment">//这是从t出发，然后在i点离开s~t路径的深度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tt=<span class="built_in">log</span>(l)/<span class="built_in">log</span>(<span class="number">2</span>);<span class="comment">//rmq预处理区间最值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=tt; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)&lt;=l+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[<span class="number">1</span>][i][j]=max(st[<span class="number">1</span>][i][j<span class="number">-1</span>],st[<span class="number">1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">            st[<span class="number">2</span>][i][j]=max(st[<span class="number">2</span>][i][j<span class="number">-1</span>],st[<span class="number">2</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,solve(<span class="number">1</span>,l,<span class="number">1</span>));<span class="comment">//递归搜索，树上博弈</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rmq </tag>
            
            <tag> st </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd原理</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/Floyd%E5%8E%9F%E7%90%86/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/Floyd%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>floyd算法是一个经典的动态规划算法。用通俗的语言来描述的话，首先我们的目标是寻找从点i到点j的最短路径。从动态规划的角度看问题，我们需要为这个目标重新做一个诠释（这个诠释正是动态规划最富创造力的精华所在），floyd算法加入了这个概念。（来源于网络）</p><p>为什么说floyd是经典的dp？因为它暗含这个东西：Ak(i,j)</p><p>Ak(i,j)表示从i到j中途不经过索引比k大的点的最短路径。</p><p>在枚举到k的时候，其实已经得到了：前k-1个点的最短路径。</p><p>假设我们想要得到Ak(i,j)</p><p>Ak(i,j)，那么有两种情况，一种是Ak(i,j)沿途经过k点，另一种是不经过k点。对于前者来说，那么我们就可以以k为中间点得到 Ak−1(i,k)+Ak−1(k,j)，为什么是Ak−1？，因为对(i,k)和(k,j)来说，k本来就是源点和终点，满足不经过比k大的条件，所以就有了Ak−1。对于后者而言，那么就是Ak−1(i,j)</p><p>Ak−1(i,j)。所以递推式就是二者取min。</p><p>那么为什么k一定要放在最外层呢？</p><p>两句话解释一下：因为内两层是用来遍历i，j，而外层k才是用来递归i到j的路线。其实也就是，如果将k放到内部，那么每次更新的最短路都是假最短路，是更新不完全的，因为它没有借助其它路线的更新，只是简单地更新了一部分路线，就草草结束。</p><p><strong>贴一道牛客题目</strong></p><p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/11258/J" >21牛客多校7J</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>题意：使用错误的floyd，还能有多少条路径是正确的最短路。</p><p>题解：有两种情况是在使用错误的情况下仍然正确的</p><p>1.原本i-&gt;j这条边就是最短路。</p><p>2.i-&gt;k和k-&gt;j属于都属于情况1，而且d[i,j]=d[i,k]+d[k,j]，那么i-&gt;j也有一条最短路，并且可以供接下来使用。</p><p>这题可以先处理出所有正确的最短路，先判断情况1，并且存下这些正确的最短路，然后使用floyd模拟错误情况下的过程，如果有情况2，则存下这条新的最短路，接下来还能使用，注意剪枝，因为边不多，所以很多情况可以被剪掉。详见代码。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1000009</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    node(<span class="keyword">int</span> v=<span class="number">0</span>,<span class="keyword">int</span> w=<span class="number">0</span>):v(v),w(w)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.w&gt;b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; e[<span class="number">2009</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">2009</span>][<span class="number">2008</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2009</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ac[<span class="number">2009</span>];</span><br><span class="line"><span class="keyword">bool</span> vis1[<span class="number">2009</span>][<span class="number">2009</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> s)</span><span class="comment">//得到正确的路径</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[s][s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    q.push(&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.top().v;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:e[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=i.v;</span><br><span class="line">            <span class="keyword">int</span> w=i.w;</span><br><span class="line">            <span class="keyword">if</span>(dis[s][v]&gt;dis[s][u]+w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[s][v]=dis[s][u]+w;</span><br><span class="line">                q.push(&#123;v,dis[s][v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:e[s])<span class="comment">//把正确路径中，符合第一种情况的边存下来，并且标记好</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[s][i.v]==i.w)</span><br><span class="line">        &#123;</span><br><span class="line">            vis1[s][i.v]=<span class="number">1</span>;</span><br><span class="line">            ac[s].push_back(i.v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            dis[i][j]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        e[x].push_back(&#123;y,z&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        dij(i);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i][j]==inf || i==j ||vis1[i][j])<span class="comment">//这三种情况属于已经是最短路了</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> k:ac[i])<span class="comment">//i-&gt;k-&gt;j是否存在一条最短路</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis1[k][j] &amp;&amp; dis[i][j]==dis[i][k]+dis[k][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                    vis1[i][j]=<span class="number">1</span>;</span><br><span class="line">                    ac[i].push_back(j);<span class="comment">//根据错误的floyd，发现这条边是要加进去的，因为之后可能会用到</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo添加本地搜索和访问计数功能</title>
      <link href="/2022/01/26/%E5%8D%9A%E5%AE%A2/hexo%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%92%8C%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/01/26/%E5%8D%9A%E5%AE%A2/hexo%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%92%8C%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[        <h1 id="添加本地搜索和计数功能"   >          <a href="#添加本地搜索和计数功能" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#添加本地搜索和计数功能"></a> <strong>添加本地搜索和计数功能</strong></h1>      <p>选了个小众的hexo主题，每次遇到问题都要自己摸索好久，唉。</p>        <h2 id="本地搜索功能"   >          <a href="#本地搜索功能" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#本地搜索功能"></a> 本地搜索功能</h2>              <h2 id="安装本地搜索插件"   >          <a href="#安装本地搜索插件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装本地搜索插件"></a> 安装本地搜索插件</h2>      <p>打开git，在根目录下：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></div></figure><p>可以在根目录下的package.json查看是否安装成功。</p>        <h2 id="修改根目录的配置文件"   >          <a href="#修改根目录的配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#修改根目录的配置文件"></a> 修改根目录的配置文件</h2>      <p>打开根目录的_config.yml，添加下面的内容，有的可能是search.json，根据需求修改。post表示搜索范围只包括文章。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>我自己配置的时候，发现就是json我不能用，本地可以用，但是部署上去却失效了，给我恶心坏了，后来不知道改了什么东西，就莫名其妙能用了。。。</p>        <h2 id="修改主题配置文件"   >          <a href="#修改主题配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#修改主题配置文件"></a> 修改主题配置文件</h2>      <p>打开主题目录下的_config.yml，将false改为true。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: <span class="literal">true</span></span><br></pre></td></tr></table></div></figure>        <h2 id="优缺点"   >          <a href="#优缺点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点</h2>      <ul><li>搜索次数无限制</li><li>支持多关键词搜素（在搜索框中，用空格将关键词隔开）</li><li>既能搜索文章标题，又能搜索文章内容</li><li>搜索速度快</li><li>但是当博客内容过多时，会出问题</li></ul>        <h2 id="注"   >          <a href="#注" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注"></a> 注</h2>      <p>如果搜索内容失效，大概率是search.xml文件里的内容出问题了，这部分我也不会搞，毕竟不懂它的语法，可以百度试试。</p>        <h2 id="访问计数"   >          <a href="#访问计数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#访问计数"></a> 访问计数</h2>      <p>使用的是第三方插件：不蒜子，主要是免费，很多博客都用的这个，虽然有些缺陷，但是也勉强能用。</p>        <h3 id="改主题配置文件"   >          <a href="#改主题配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#改主题配置文件"></a> 改主题配置文件</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line"> enable: <span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>我这个主题只要修改这里就行了，但是有很多不足，具体我也不会改，之后再看。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加友链</title>
      <link href="/2022/01/26/%E5%8D%9A%E5%AE%A2/%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE/"/>
      <url>/2022/01/26/%E5%8D%9A%E5%AE%A2/%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[        <h2 id="添加友链低配版"   >          <a href="#添加友链低配版" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#添加友链低配版"></a> 添加友链(低配版)</h2>              <h3 id="新增文件"   >          <a href="#新增文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#新增文件"></a> 新增文件</h3>      <p>在主目录下打开source，然后新建文件夹links，打开links，新建index，后缀为md。输入以下内容：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友链</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;post-body&quot;</span>&gt;</span><br><span class="line">   &lt;div id=<span class="string">&quot;links&quot;</span>&gt;</span><br><span class="line">      &lt;style&gt;</span><br><span class="line">         .links-content&#123;</span><br><span class="line">         margin-top:<span class="number">1</span>rem;</span><br><span class="line">         &#125;</span><br><span class="line">         .link-navigation::after &#123;</span><br><span class="line">         content: <span class="string">&quot; &quot;</span>;</span><br><span class="line">         display: block;</span><br><span class="line">         clear: both;</span><br><span class="line">         &#125;</span><br><span class="line">         .card &#123;</span><br><span class="line">         width: <span class="number">45</span>%;</span><br><span class="line">         font-size: <span class="number">1</span>rem;</span><br><span class="line">         padding: <span class="number">10</span>px <span class="number">20</span>px;</span><br><span class="line">         border-radius: <span class="number">4</span>px;</span><br><span class="line">         transition-duration: <span class="number">0.15</span>s;</span><br><span class="line">         margin-bottom: <span class="number">1</span>rem;</span><br><span class="line">         display:flex;</span><br><span class="line">         &#125;</span><br><span class="line">         .card:nth-child(odd) &#123;</span><br><span class="line">         <span class="keyword">float</span>: left;</span><br><span class="line">         &#125;</span><br><span class="line">         .card:nth-child(even) &#123;</span><br><span class="line">         <span class="keyword">float</span>: right;</span><br><span class="line">         &#125;</span><br><span class="line">         .card:hover &#123;</span><br><span class="line">         transform: scale(<span class="number">1.1</span>);</span><br><span class="line">         box-shadow: <span class="number">0</span> <span class="number">2</span>px <span class="number">6</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.04</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         .card a &#123;</span><br><span class="line">         border:none;</span><br><span class="line">         &#125;</span><br><span class="line">         .card .ava &#123;</span><br><span class="line">         width: <span class="number">3</span>rem!important;</span><br><span class="line">         height: <span class="number">3</span>rem!important;</span><br><span class="line">         margin:<span class="number">0</span>!important;</span><br><span class="line">         margin-right: <span class="number">1</span>em!important;</span><br><span class="line">         border-radius:<span class="number">4</span>px;</span><br><span class="line">         &#125;</span><br><span class="line">         .card .card-header &#123;</span><br><span class="line">         font-style: italic;</span><br><span class="line">         overflow: hidden;</span><br><span class="line">         width: <span class="number">100</span>%;</span><br><span class="line">         &#125;</span><br><span class="line">         .card .card-header a &#123;</span><br><span class="line">         font-style: normal;</span><br><span class="line">         color: #<span class="number">2b</span>bc8a;</span><br><span class="line">         font-weight: bold;</span><br><span class="line">         text-decoration: none;</span><br><span class="line">         &#125;</span><br><span class="line">         .card .card-header a:hover &#123;</span><br><span class="line">         color: #d480aa;</span><br><span class="line">         text-decoration: none;</span><br><span class="line">         &#125;</span><br><span class="line">         .card .card-header .info &#123;</span><br><span class="line">         font-style:normal;</span><br><span class="line">         color:#a3a3a3;</span><br><span class="line">         font-size:<span class="number">14</span>px;</span><br><span class="line">         min-width: <span class="number">0</span>;</span><br><span class="line">         overflow: hidden;</span><br><span class="line">         white-space: nowrap;</span><br><span class="line">         &#125;</span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;links-content&quot;</span>&gt;</span><br><span class="line">         &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;link-navigation&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;card&quot;</span>&gt;</span><br><span class="line">               &lt;img <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;ava&quot;</span> src=<span class="string">&quot;图片地址&quot;</span> /&gt;</span><br><span class="line">               &lt;div class=<span class="string">&quot;card-header&quot;</span>&gt;</span><br><span class="line">                  &lt;div&gt;</span><br><span class="line">                     &lt;a href=<span class="string">&quot;博客链接&quot;</span>&gt;名称&lt;/a&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                  &lt;div class=<span class="string">&quot;info&quot;</span>&gt;描述&lt;/div&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure><p>其实就是html语句，在页面上生成我们想要的内容，简单快捷，其实是不会修改pug文件的内容。</p><p>如果想要增加友链，复制以下内容即可：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;card&quot;</span>&gt;</span><br><span class="line">   &lt;img <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;ava&quot;</span> src=<span class="string">&quot;图片地址&quot;</span> /&gt;</span><br><span class="line">   &lt;div class=<span class="string">&quot;card-header&quot;</span>&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         &lt;a href=<span class="string">&quot;博客链接&quot;</span>&gt;名称&lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=<span class="string">&quot;info&quot;</span>&gt;描述&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="修改主题配置文件"   >          <a href="#修改主题配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#修改主题配置文件"></a> 修改主题配置文件</h3>      <p>打开主题文件下的_config_yml文件，添加下列语句：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fas fa-home</span><br><span class="line">  archives: /archives/ || fas fa-folder-open</span><br><span class="line">  categories: /categories/ || fas fa-layer-group</span><br><span class="line">  tags: /tags/ || fas fa-tags</span><br><span class="line">  # You can add a secondary menu like follow.</span><br><span class="line">  # xxx1: javascript:; || fa(s|r|l|d|b) fa-xxx</span><br><span class="line">  # 在这个menu下面添加这一行东西</span><br><span class="line">  links: /links/ || fas fa-link</span><br></pre></td></tr></table></div></figure>        <h3 id="修改翻译文件"   >          <a href="#修改翻译文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#修改翻译文件"></a> 修改翻译文件</h3>      <p>进入\themes\stun\languages中打开zh-CN_yml，找到menu，添加这一行内容：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">links: 友链</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上dfs序</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%A0%91%E4%B8%8Adfs%E5%BA%8F/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%A0%91%E4%B8%8Adfs%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>定义两个数组，dfn[x]，edn[x]。dfs从根结点开始，每个结点分别记录两个信息：dfn[x]，edn[x]，dfn[x]为dfs进入结点x时的时间戳，end[x]为dfs离开结点x时的时间戳。</p><p>dfs序可以把一棵树区间化，即可以求出每个节点的管辖区间。对于一棵树的dfs序而言，同一棵子树所对应的一定是dfs序中连续的一段。很方便之后的区间操作。</p><p>如下图：</p><p><img src="%E5%9B%BE1.png" alt="图1" /></p><p>形成的ｄｆｓ序：</p><p><img src="%E5%9B%BE2.png" alt="图2" /></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsn</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    dfn[u]=cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:e2[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfsn(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    edn[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>放一道牛客多校的题目：<span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/11258/F" >21牛客多校7F</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>这道题用到了ｄｆｓ序、树上滑动窗口、线段树。</p><p>题意：两棵树，点数一样，现在选出一个点集，使得点集中点的点在树1中是连通的，且对于任意两点，一点必是另一点的祖先；对于树2，则不能是另一方的祖先。输出点集中最多有几个点。</p><p>题解：两棵树不同，所以要分别进行处理。很明显，对于条件2，一方不能作为另一方的祖先，那它们一定不在通一棵子树下，这点我们可以使用dfs序，如果两个点的时间有重合，那么明显不能满足条件2，这个可以用dfs序+线段树维护。而对于第一棵树，连通且有祖先关系，这样明显是一条链，最暴力的情况我们可以枚举每一条链，但这必超时啊，所以就妙妙妙，我们可以用滑动窗口维护这条链。  当加入一个新的点，如果违法，则可以删掉首节点，然后接着搜，搜完之后再回溯。这样做的正确性，其实是因为当删掉了最上面的点，其实它已经被使用过了，不是当前较优的选择，而且如果出现更长的链，也不会是包含它的，这样选择可以大大降低复杂度，接近O(N)，在树上优美地滑着走。如果不违法，则加进点集，更新结果。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">3e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,cnt,ans;</span><br><span class="line"><span class="keyword">int</span> edn[ms],dfn[ms],way[ms],vis[ms],dp[ms];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;e1[ms],e2[ms];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,f,inc;</span><br><span class="line">&#125;p[ms&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[rt].l=l;</span><br><span class="line">    p[rt].r=r;</span><br><span class="line">    p[rt].f=p[rt].inc=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls,l,mid); build(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[rt].f=max(p[ls].f,p[rs].f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[rt].inc)</span><br><span class="line">    &#123;</span><br><span class="line">        p[ls].f+=p[rt].inc;</span><br><span class="line">        p[rs].f+=p[rt].inc;</span><br><span class="line">        p[ls].inc+=p[rt].inc;</span><br><span class="line">        p[rs].inc+=p[rt].inc;</span><br><span class="line">        p[rt].inc=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[rt].l&gt;=l &amp;&amp; p[rt].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        p[rt].f+=val;</span><br><span class="line">        p[rt].inc+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=(p[rt].l+p[rt].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) update(ls,l,r,val);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) update(rs,l,r,val);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[rt].l&gt;=l &amp;&amp; p[rt].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p[rt].f;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=p[rt].l+p[rt].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) res=max(res,query(ls,l,r));</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) res=max(res,query(rs,l,r));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct node&#123;</span></span><br><span class="line"><span class="comment">//     int l,r,f,inc;</span></span><br><span class="line"><span class="comment">// &#125;segtree[ms&lt;&lt;2];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void pushup(int x)&#123;segtree[x].f=max(segtree[x&lt;&lt;1].f,segtree[x&lt;&lt;1|1].f);&#125;//取较大者返回,我们需要的是判断是否有重复染色</span></span><br><span class="line"><span class="comment">// void pushdown(int x)&#123;//将懒惰标记往下传递</span></span><br><span class="line"><span class="comment">//     segtree[x&lt;&lt;1].f+=segtree[x].inc;</span></span><br><span class="line"><span class="comment">//     segtree[x&lt;&lt;1|1].f+=segtree[x].inc;</span></span><br><span class="line"><span class="comment">//     segtree[x&lt;&lt;1].inc+=segtree[x].inc;</span></span><br><span class="line"><span class="comment">//     segtree[x&lt;&lt;1|1].inc+=segtree[x].inc;</span></span><br><span class="line"><span class="comment">//     segtree[x].inc=0;//清空</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// void build(int x,int l,int r)&#123;//建树</span></span><br><span class="line"><span class="comment">//     segtree[x].l=l,segtree[x].r=r,segtree[x].f=segtree[x].inc=0;//初始化</span></span><br><span class="line"><span class="comment">//     if(l==r)return;</span></span><br><span class="line"><span class="comment">//     int mid=l+r&gt;&gt;1;</span></span><br><span class="line"><span class="comment">//     build(x&lt;&lt;1,l,mid);</span></span><br><span class="line"><span class="comment">//     build(x&lt;&lt;1|1,mid+1,r);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// void update(int x,int l,int r,int inc)&#123;</span></span><br><span class="line"><span class="comment">//     if(segtree[x].l==l&amp;&amp;segtree[x].r==r)&#123;</span></span><br><span class="line"><span class="comment">//         segtree[x].f+=inc;</span></span><br><span class="line"><span class="comment">//         segtree[x].inc+=inc;//标记</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     if(segtree[x].inc)pushdown(x);//下传标记</span></span><br><span class="line"><span class="comment">//     int mid=segtree[x].l+segtree[x].r&gt;&gt;1;</span></span><br><span class="line"><span class="comment">//     if(r&lt;=mid)update(x&lt;&lt;1,l,r,inc);</span></span><br><span class="line"><span class="comment">//     else if(l&gt;mid)update(x&lt;&lt;1|1,l,r,inc);</span></span><br><span class="line"><span class="comment">//     else update(x&lt;&lt;1,l,mid,inc),update(x&lt;&lt;1|1,mid+1,r,inc);</span></span><br><span class="line"><span class="comment">//     pushup(x);//更新</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int query(int x,int l,int r)&#123;//询问</span></span><br><span class="line"><span class="comment">//     if(segtree[x].l==l&amp;&amp;segtree[x].r==r)&#123;</span></span><br><span class="line"><span class="comment">//         return segtree[x].f;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     if(segtree[x].inc)pushdown(x);//下传标记</span></span><br><span class="line"><span class="comment">//     int mid=segtree[x].l+segtree[x].r&gt;&gt;1;</span></span><br><span class="line"><span class="comment">//     if(r&lt;=mid)return query(x&lt;&lt;1,l,r);</span></span><br><span class="line"><span class="comment">//     else if(l&gt;mid)return query(x&lt;&lt;1|1,l,r);</span></span><br><span class="line"><span class="comment">//     else return max(query(x&lt;&lt;1,l,mid),query(x&lt;&lt;1|1,mid+1,r));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsn</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    dfn[u]=cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:e2[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfsn(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    edn[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> anc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    update(<span class="number">1</span>,dfn[u],edn[u],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> tmp=query(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">if</span>(tmp&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[u]=dp[fa];</span><br><span class="line">        update(<span class="number">1</span>,dfn[anc],edn[anc],<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:e1[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">            way[u]=v;</span><br><span class="line">            dfs(v,u,way[anc]);</span><br><span class="line">        &#125;</span><br><span class="line">        update(<span class="number">1</span>,dfn[u],edn[u],<span class="number">-1</span>);</span><br><span class="line">        update(<span class="number">1</span>,dfn[anc],edn[anc],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        dp[u]=dp[fa]+<span class="number">1</span>;</span><br><span class="line">        ans=max(ans,dp[u]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:e1[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">            way[u]=v;</span><br><span class="line">            dfs(v,u,anc);</span><br><span class="line">        &#125;</span><br><span class="line">        update(<span class="number">1</span>,dfn[u],edn[u],<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        e1[i].clear();</span><br><span class="line">        e2[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    way[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">            e1[u].push_back(v);</span><br><span class="line">            e1[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">            e2[u].push_back(v);</span><br><span class="line">            e2[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        dfsn(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上启发式合并</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>启发式是一种思想。</p><p>启发式，顾名思义，就是从一些特性获得启发，然后来对算法进行优化，从而达到降低复杂度的效果。</p><p>就如A*算法和并查集按秩合并。就是启发式算法。</p><p>这里要说一种常见的启发式合并，即dsu on tree。（但是它和按秩合并有着很大区别，按秩是按树的高度）</p><p>dsu就是并查集的意思。</p><p>假如现由N个集合，M个元素分布在这N个集合中，我们通过什么操作来讲这N个集合合并到一起？</p><p>最坏的情况，第一个集合就有M元素，然后与其它空集分别合并，在合并时，我们又是采取将大集合并入小集合的操作，这样复杂度达到O（NM）。</p><p>启发式合并可以如何操作呢？</p><p>简单，我们每次将小集合并入大集合即可，那么合并之后的集合中元素数量必是小集合的两倍或以上，这样复杂度就降为O（logN）。这就是它的基本思想。</p><p>树上启发式合并，就是在树上采取这个操作。这里就结合一道题来看看。<span class="exturl"><a class="exturl__link"   href="https://codeforces.com/problemset/problem/600/E" >CF600E</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>可以看看这位大佬的讲解，很详细。<span class="exturl"><a class="exturl__link"   href="https://space.bilibili.com/120174936?spm_id_from=333.788.b_765f7570696e666f.1" >不分解的AgOH</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll p[ms&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll n,m;</span><br><span class="line">ll la[ms&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (l&lt;=r)&amp;&amp;(L&lt;=l)&amp;&amp;(r&lt;=R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[rt]=p[rt&lt;&lt;<span class="number">1</span>]+p[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(la[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        p[rt&lt;&lt;<span class="number">1</span>]+=la[rt]*(m-l+<span class="number">1</span>);<span class="comment">//更新左子区间</span></span><br><span class="line">        p[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=la[rt]*(r-m);<span class="comment">//更新右子区间</span></span><br><span class="line">        la[rt&lt;&lt;<span class="number">1</span>]+=la[rt];<span class="comment">//下传标记</span></span><br><span class="line">        la[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=la[rt];</span><br><span class="line">        la[rt]=<span class="number">0</span>;<span class="comment">//取消标记</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(in(L,l,r,R))<span class="comment">//若L，R覆盖了当前的区间，那么更新一下，并且标记</span></span><br><span class="line">    &#123;</span><br><span class="line">        p[rt]+=(r-l+<span class="number">1</span>)*val;</span><br><span class="line">        la[rt]+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(rt,l,r);<span class="comment">//下传标记</span></span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;=L) update(L,R,l,m,rt&lt;&lt;<span class="number">1</span>,val);<span class="comment">//递归更新</span></span><br><span class="line">    <span class="keyword">if</span>(m&lt;R) update(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(in(L,l,r,R))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(rt,l,r);</span><br><span class="line">    ll cc=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;=L) cc+=getsum(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(m&lt;R) cc+=getsum(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        update(i,i,<span class="number">1</span>,n,<span class="number">1</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c,l,r;</span><br><span class="line">        ll d;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;d;</span><br><span class="line">            update(l,r,<span class="number">1</span>,n,<span class="number">1</span>,d);<span class="comment">//更新，l，r表示要更新的区间。1，n表示当前的区间。1是表示当前的区间编号，d是要更新的val</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            ll ans=getsum(l,r,<span class="number">1</span>,n,<span class="number">1</span>);<span class="comment">//同上</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树上启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>提到图论，网络流是绝不能被忽视的东西，这方面我也得多练额，有些套路题现在还搞不出来。</p><p>涉及到网络流，有一个要引入的新概念：残量网络。</p><p>残量网络其实就是除去当前的流量以外，在网络中仍然剩余的流量。</p><p>另外，网络流中还会定义一个流函数f(x,y)，容量c(x,y)。前者表示当前边的流量，后者表示当前边的容量。</p><p>流函数有三个性质：</p><p>1.容量限制，即f(x,y)&lt;=c(x,y)</p><p>2.斜对称，f(x,y)=-f(y,x)</p><p>3.流量守恒，从源点到汇点的流量一样</p><p>注意，每条边都会定义一条反向边，反向边有一个≤0的流量，同时反向边的容量为0，c(y,x)=0。f(y,x)=c(y,x)-f(x,y)。（加入反向边意义是重大的）</p><p>最大流=最小割。</p><p>最大流可以用来解决二分图匹配问题。</p><p>常用的最大流算法有：Edmonds-Karp算法和dinic算法。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="edmonds-karp算法"   >          <a href="#edmonds-karp算法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#edmonds-karp算法"></a> Edmonds-Karp算法</h2>      <p>思想就是不断用bfs寻找增广路，直到网络上不存在增广路为止。</p><p>每找到一套增广路就立刻增广。</p><p>复杂度O(nm^2)，实际上效率挺高，可以处理1e3~1e4的网络。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],cap[ms],vis[N],<span class="comment">/*当前增广路最小容量*/</span>incf[N],pre[N];<span class="comment">//记录前驱</span></span><br><span class="line"><span class="keyword">int</span> n,m,s,t,tot,maxflow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v; cap[tot]=c; ne[tot]=head[u]; head[u]=tot;</span><br><span class="line">    to[++tot]=u; cap[tot]=<span class="number">0</span>; ne[tot]=head[v]; head[v]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.push(s); vis[s]=<span class="number">1</span>;</span><br><span class="line">    incf[s]=inf;<span class="comment">//增广路上各边的最小剩余容量</span></span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(cap[i] &amp;&amp; !vis[v])<span class="comment">//可以增广</span></span><br><span class="line">            &#123;</span><br><span class="line">                incf[v]=min(incf[u],cap[i]);</span><br><span class="line">                pre[v]=i;<span class="comment">//记录前驱，可找增广路，便于找到最长路</span></span><br><span class="line">                q.push(v);</span><br><span class="line">                vis[v]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(v==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=t;</span><br><span class="line">    <span class="keyword">while</span>(u!=s)<span class="comment">//更新增广路及其反向边剩余流量</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i=pre[u];</span><br><span class="line">        cap[i]-=incf[t];</span><br><span class="line">        cap[i^<span class="number">1</span>]+=incf[t];</span><br><span class="line">        u=to[i^<span class="number">1</span>];<span class="comment">//这条边的另一个端点</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxflow+=incf[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">        head[i]=<span class="number">0</span>;</span><br><span class="line">    s=u; t=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="dinic算法"   >          <a href="#dinic算法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dinic算法"></a> dinic算法</h2>      <p>EK算法由于每次只找一条增广路，每轮都可能遍历整个残量网络，效率低，可以进一步优化。</p><p>所以我们可以引入分层图思想，分层图明显是一个有向无环图。</p><p>重复以下步骤：</p><p>1.在残量网络bfs，构造分层图。</p><p>2.在分层图找增广路，回溯时更新剩余流量，每个点可以流向多条出边。</p><p>加入了部分优化。</p><p>复杂度O(n^2m)，可处理1e4~1e5的网络，对于二分图最大匹配可达O(m根号n)，实际更快。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> head[N],to[ms],ne[ms],cap[ms],d[N],now[N];<span class="comment">//当前弧优化</span></span><br><span class="line"><span class="keyword">int</span> n,m,s,t,tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v; cap[tot]=c; ne[tot]=head[u]; head[u]=tot;</span><br><span class="line">    to[++tot]=u; cap[tot]=<span class="number">0</span>; ne[tot]=head[v]; head[v]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">        d[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.push(s); d[s]=<span class="number">1</span>; now[s]=head[s];<span class="comment">//当前弧优化</span></span><br><span class="line">    <span class="keyword">while</span>(q.size())<span class="comment">//构造分层图</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(cap[i] &amp;&amp; !d[v])</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">                now[v]=head[v];</span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(v==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> rest=flow,k,i;</span><br><span class="line">    <span class="keyword">for</span>(i=now[u]; i&amp;&amp;rest; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(cap[i] &amp;&amp; d[v]==d[u]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k=dinic(v,min(rest,cap[i]));</span><br><span class="line">            <span class="keyword">if</span>(!k) d[v]=<span class="number">0</span>; <span class="comment">//剪枝，当前点已增广完毕</span></span><br><span class="line">            cap[i]-=k;</span><br><span class="line">            cap[i^<span class="number">1</span>]+=k;</span><br><span class="line">            rest-=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    now[u]=i;<span class="comment">//当前弧优化，避免重复遍历从u出发不可扩展的边</span></span><br><span class="line">    <span class="keyword">return</span> flow-rest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">net</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())</span><br><span class="line">        <span class="keyword">while</span>(flow=dinic(s,inf)) maxflow+=flow;</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">        head[i]=<span class="number">0</span>;</span><br><span class="line">    s=u; t=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KM模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/KM%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/KM%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>大概分四步，具体思想和原理建议去百度搜一搜。</p><p>1、初始化可行标杆<br />2、用匈牙利算法寻找完备匹配<br />3、若未找到完备匹配则修改可行标杆<br />4、重复（2）（3）直到找到相等子图的完备匹配</p><p>求二分图最大权匹配。要求最大权匹配必须是完备匹配（所有点用上）。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="on4的dfs版本"   >          <a href="#on4的dfs版本" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#on4的dfs版本"></a> O(n^4)的dfs版本：</h2>      <p>（若是随机数据，可以达到O(n^3)）</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 303</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line">ll w[N][N];</span><br><span class="line">ll la[N],lb[N];<span class="comment">//左右部点的顶标</span></span><br><span class="line"><span class="keyword">bool</span> va[N],vb[N];<span class="comment">//访问标记，是否在交错树中</span></span><br><span class="line"><span class="keyword">int</span> match[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll delta,upd[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va[x]=<span class="number">1</span>;<span class="comment">//x在交错树</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>; y&lt;=n; y++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vb[y]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(la[x]+lb[y]==w[x][y])<span class="comment">//相等子图</span></span><br><span class="line">        &#123;</span><br><span class="line">            vb[y]=<span class="number">1</span>;<span class="comment">//y在交错树</span></span><br><span class="line">            <span class="keyword">if</span>(!match[y] || dfs(match[y]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[y]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> upd[y]=min(upd[y],la[x]+lb[y]-w[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">km</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="keyword">sizeof</span>(match));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        la[i]=-inf;</span><br><span class="line">        lb[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            la[i]=max(la[i],w[i][j]);<span class="comment">//建议换位大小比较，不用max和min函数。因为当复杂度高时，常数大，是O（2）的。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) upd[j]= inf;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)<span class="comment">//直到左部点找到匹配</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(va,<span class="number">0</span>,<span class="keyword">sizeof</span>(va));</span><br><span class="line">            <span class="built_in">memset</span>(vb,<span class="number">0</span>,<span class="keyword">sizeof</span>(vb));</span><br><span class="line">            <span class="keyword">if</span>(dfs(i)) <span class="keyword">break</span>;</span><br><span class="line">            delta= <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                <span class="keyword">if</span>(!vb[j]) delta=min(delta,upd[j]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)<span class="comment">//修改顶标</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(va[j]) la[j]-=delta;</span><br><span class="line">                <span class="keyword">if</span>(vb[j]) lb[j]+=delta;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) ans+=w[match[i]][i];<span class="comment">//是inf则说明未完备匹配</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="on3的bfs版本"   >          <a href="#on3的bfs版本" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#on3的bfs版本"></a> O(n^3)的bfs版本</h2>      <p>其实本质一样，只是不会再从头搜而已。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">ll w[N][N];</span><br><span class="line">ll la[N],lb[N];<span class="comment">//左右部点的顶标</span></span><br><span class="line"><span class="keyword">bool</span> va[N],vb[N];<span class="comment">//访问标记，是否在交错树中</span></span><br><span class="line"><span class="keyword">int</span> match[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll delta,upd[N];</span><br><span class="line"><span class="keyword">int</span> p[N];<span class="comment">//交错树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,v=<span class="number">0</span>,vv=<span class="number">0</span>;<span class="comment">//最开始0匹配u</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i]=<span class="number">0</span>;upd[i]=inf;</span><br><span class="line">    &#125;</span><br><span class="line">    match[v]=u;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        a=match[v];<span class="comment">//现在是帮a找完美匹配 </span></span><br><span class="line">        delta=inf;</span><br><span class="line">        vb[v]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>; b&lt;=n; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vb[b]) <span class="keyword">continue</span>;<span class="comment">//本次访问过,不用管了 </span></span><br><span class="line">            <span class="keyword">if</span>(upd[b]&gt;la[a]+lb[b]-w[a][b])</span><br><span class="line">            &#123;</span><br><span class="line">                upd[b]=la[a]+lb[b]-w[a][b];<span class="comment">//查找与b相邻的边，找出b的最小误差</span></span><br><span class="line">                p[b]=v;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(upd[b]&lt;delta)</span><br><span class="line">            &#123;</span><br><span class="line">                delta=upd[b];</span><br><span class="line">                vv=b;<span class="comment">//vv记录谁是最小误差</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//delta是最小的误差,用于调整期望 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;=n; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vb[b])</span><br><span class="line">            &#123;</span><br><span class="line">                la[match[b]]-=delta;</span><br><span class="line">                lb[b]+=delta;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> upd[b]-=delta;</span><br><span class="line">        &#125;</span><br><span class="line">        v=vv;<span class="comment">//vv记录的是最小误差,那么现在修改了期望值,所以可以直接匹配v</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(match[v]);<span class="comment">//直到找到一个人没有匹配 </span></span><br><span class="line">    <span class="keyword">while</span>(v)</span><br><span class="line">    &#123;</span><br><span class="line">        match[v]=match[p[v]];</span><br><span class="line">        v=p[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">km</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        match[i]=la[i]=lb[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vb,<span class="number">0</span>,<span class="keyword">sizeof</span>(vb));</span><br><span class="line">        bfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) ans+=w[match[i]][i];<span class="comment">//是inf则说明未完备匹配</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>处理字符串的强力工具，一种常用的后缀数据结构（另外还有SAM后缀自动机、后缀树）。</p><p>可以看看凯巨的讲解，很清楚：<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV177411P7KS" >后缀数组</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>常用的DA模板，O（nlogn），代码短。</p><p>复杂的DC3模板，O（n），码量大，注意开3倍空间。</p><p>下面只贴DA模板，来自罗穗骞大佬。</p><p>把 s 的每个后缀按照字典序排序，</p><p>后缀数组 sa[i] 就表示排名为 i 的后缀的起始位置的下标</p><p>而它的映射数组 rak[i] 就表示起始位置的下标为 i 的后缀的排名</p><p>简单来说， sa[i] 表示排名为 i 的是啥， rak[i] 表示第 i 个的排名是啥</p><p>LCP ：</p><p>LCP(i,j) 表示 suf(sa[i]) 与 suf(sa[j]) 的最长公共前缀</p><p>LCP(i,j)=LCP(j,i);</p><p>LCP(i,i)=len(sa[i])=n-sa[i]+1;</p><p>Height[i] 表示 LCP(i,i-1)</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释版</span></span><br><span class="line"><span class="keyword">int</span> wa[maxn],wb[maxn],wv[maxn],ws[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;  <span class="comment">//就像论文所说，由于末尾填了0，所以如果r[a]==r[b]（实际是y[a]==y[b]），说明待合并的两个长为j的字符串，前面那个一定不包含末尾0，因而后面这个的起始位置至多在0的位置，不会再靠后了，因而不会产生数组越界。</span></span><br><span class="line"><span class="comment">//da函数的参数n代表字符串中字符的个数，这里的n里面是包括人为在字符串末尾添加的那个0的，但论文的图示上并没有画出字符串末尾的0。</span></span><br><span class="line"><span class="comment">//da函数的参数m代表字符串中字符的取值范围，是基数排序的一个参数，如果原序列都是字母可以直接取128，如果原序列本身都是整数的话，则m可以取比最大的整数大1的值。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">    <span class="comment">//以下四行代码是把各个字符（也即长度为1的字符串）进行基数排序，如果不理解为什么这样可以达到基数排序的效果，不妨自己实际用纸笔模拟一下，我最初也是这样才理解的。</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ws[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ws[x[i]=r[i]]++;  <span class="comment">//x[]里面本意是保存各个后缀的rank值的，但是这里并没有去存储rank值，因为后续只是涉及x[]的比较工作，因而这一步可以不用存储真实的rank值，能够反映相对的大小即可。</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--ws[x[i]]]=i;  <span class="comment">//i之所以从n-1开始循环，是为了保证在当字符串中有相等的字符串时，默认靠前的字符串更小一些。</span></span><br><span class="line">    <span class="comment">//下面这层循环中p代表rank值不用的字符串的数量，如果p达到n，那么各个字符串的大小关系就已经明了了。</span></span><br><span class="line">    <span class="comment">//j代表当前待合并的字符串的长度，每次将两个长度为j的字符串合并成一个长度为2*j的字符串，当然如果包含字符串末尾具体则数值应另当别论，但思想是一样的。</span></span><br><span class="line">    <span class="comment">//m同样代表基数排序的元素的取值范围</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,m=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//以下两行代码实现了对第二关键字的排序</span></span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;  <span class="comment">//结合论文的插图，我们可以看到位置在第n-j至n的元素的第二关键字都为0，因此如果按第二关键字排序，必然这些元素都是排在前面的。</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;  <span class="comment">//结合论文的插图，我们可以看到，下面一行的第二关键字不为0的部分都是根据上面一行的排序结果得到的，且上一行中只有sa[i]&gt;=j的第sa[i]个字符串（这里以及后面指的“第?个字符串”不是按字典序排名来的，是按照首字符在字符串中的位置来的）的rank才会作为下一行的第sa[i]-j个字符串的第二关键字，而且显然按sa[i]的顺序rank[sa[i]]是递增的，因此完成了对剩余的元素的第二关键字的排序。</span></span><br><span class="line">        <span class="comment">//第二关键字基数排序完成后，y[]里存放的是按第二关键字排序的字符串下标</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];  <span class="comment">//这里相当于提取出每个字符串的第一关键字（前面说过了x[]是保存rank值的，也就是字符串的第一关键字），放到wv[]里面是方便后面的使用</span></span><br><span class="line">        <span class="comment">//以下四行代码是按第一关键字进行的基数排序</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ws[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ws[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--ws[wv[i]]]=y[i];  <span class="comment">//i之所以从n-1开始循环，含义同上，同时注意这里是y[i]，因为y[i]里面才存着字符串的下标</span></span><br><span class="line">        <span class="comment">//下面两行就是计算合并之后的rank值了，而合并之后的rank值应该存在x[]里面，但我们计算的时候又必须用到上一层的rank值，也就是现在x[]里面放的东西，如果我既要从x[]里面拿，又要向x[]里面放，怎么办？当然是先把x[]的东西放到另外一个数组里面，省得乱了。这里就是用交换指针的方式，高效实现了将x[]的东西“复制”到了y[]中。</span></span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++; <span class="comment">//这里就是用x[]存储计算出的各字符串rank的值了，记得我们前面说过，计算sa[]值的时候如果字符串相同是默认前面的更小的，但这里计算rank的时候必须将相同的字符串看作有相同的rank，要不然p==n之后就不会再循环啦。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//能够线性计算height[]的值的关键在于h[](height[rank[]])的性质，即h[i]&gt;=h[i-1]-1，下面具体分析一下这个不等式的由来。</span></span><br><span class="line"><span class="comment">//论文里面证明的部分一开始看得我云里雾里，后来画了一下终于搞明白了，我们先把要证什么放在这：对于第i个后缀，设j=sa[rank[i] - 1]，也就是说j是i的按排名来的上一个字符串，按定义来i和j的最长公共前缀就是height[rank[i]]，我们现在就是想知道height[rank[i]]至少是多少，而我们要证明的就是至少是height[rank[i-1]]-1。</span></span><br><span class="line"><span class="comment">//好啦，现在开始证吧。</span></span><br><span class="line"><span class="comment">//首先我们不妨设第i-1个字符串（这里以及后面指的“第?个字符串”不是按字典序排名来的，是按照首字符在字符串中的位置来的）按字典序排名来的前面的那个字符串是第k个字符串，注意k不一定是i-2，因为第k个字符串是按字典序排名来的i-1前面那个，并不是指在原字符串中位置在i-1前面的那个第i-2个字符串。</span></span><br><span class="line"><span class="comment">//这时，依据height[]的定义，第k个字符串和第i-1个字符串的公共前缀自然是height[rank[i-1]]，现在先讨论一下第k+1个字符串和第i个字符串的关系。</span></span><br><span class="line"><span class="comment">//第一种情况，第k个字符串和第i-1个字符串的首字符不同，那么第k+1个字符串的排名既可能在i的前面，也可能在i的后面，但没有关系，因为height[rank[i-1]]就是0了呀，那么无论height[rank[i]]是多少都会有height[rank[i]]&gt;=height[rank[i-1]]-1，也就是h[i]&gt;=h[i-1]-1。</span></span><br><span class="line"><span class="comment">//第二种情况，第k个字符串和第i-1个字符串的首字符相同，那么由于第k+1个字符串就是第k个字符串去掉首字符得到的，第i个字符串也是第i-1个字符串去掉首字符得到的，那么显然第k+1个字符串要排在第i个字符串前面，要么就产生矛盾了。同时，第k个字符串和第i-1个字符串的最长公共前缀是height[rank[i-1]]，那么自然第k+1个字符串和第i个字符串的最长公共前缀就是height[rank[i-1]]-1。</span></span><br><span class="line"><span class="comment">//到此为止，第二种情况的证明还没有完，我们可以试想一下，对于比第i个字符串的字典序排名更靠前的那些字符串，谁和第i个字符串的相似度最高（这里说的相似度是指最长公共前缀的长度）？显然是排名紧邻第i个字符串的那个字符串了呀，即sa[rank[i]-1]。也就是说sa[rank[i]]和sa[rank[i]-1]的最长公共前缀至少是height[rank[i-1]]-1，那么就有height[rank[i]]&gt;=height[rank[i-1]]-1，也即h[i]&gt;=h[i-1]-1。</span></span><br><span class="line"><span class="comment">//证明完这些之后，下面的代码也就比较容易看懂了。</span></span><br><span class="line"><span class="keyword">int</span> rank[maxn],height[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rank[sa[i]]=i;  <span class="comment">//计算每个字符串的字典序排名</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rank[i++]]=k)  <span class="comment">//将计算出来的height[rank[i]]的值，也就是k，赋给height[rank[i]]。i是由0循环到n-1，但实际上height[]计算的顺序是由height[rank[0]]计算到height[rank[n-1]]。</span></span><br><span class="line">    <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rank[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);  <span class="comment">//上一次的计算结果是k，首先判断一下如果k是0的话，那么k就不用动了，从首字符开始看第i个字符串和第j个字符串前面有多少是相同的，如果k不为0，按我们前面证明的，最长公共前缀的长度至少是k-1，于是从首字符后面k-1个字符开始检查起即可。</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后再说明一点，就是关于da和calheight的调用问题，实际上在“小罗”写的源程序里面是如下调用的，这样我们也能清晰的看到da和calheight中的int n不是一个概念，同时height数组的值的有效范围是height[1]~height[n]其中height[1]=0，原因就是sa[0]实际上就是我们补的那个0，所以sa[1]和sa[0]的最长公共前缀自然是0。</span></span><br><span class="line">da(r,sa,n+<span class="number">1</span>,<span class="number">128</span>);</span><br><span class="line">calheight(r,sa,n);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//畅享版，稍加改动</span></span><br><span class="line"><span class="keyword">int</span> wa[ms],wb[ms],wv[ms],wss[ms],rak[ms],height[ms],cal[ms],sa[ms];</span><br><span class="line"><span class="keyword">char</span> s[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[x[i]=r[i]]++;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[x[i]]]=i;  </span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,M=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;  </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;  </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];  </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[wv[i]]]=y[i];  </span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rak[sa[i]]=i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rak[i++]]=k)  </span><br><span class="line">    <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rak[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i; i--)rak[i]=rak[i<span class="number">-1</span>],sa[i]++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        da(cal+<span class="number">1</span>,sa,n+<span class="number">1</span>,<span class="number">128</span>);</span><br><span class="line">        calheight(cal+<span class="number">1</span>,sa,n);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>放一道题：<span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=6988" >杭电6988</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/stelayuri/p/15080418.html" >题解</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//畅享版</span></span><br><span class="line"><span class="keyword">int</span> wa[ms],wb[ms],wv[ms],wss[ms],rak[ms],height[ms],cal[ms],sa[ms];</span><br><span class="line"><span class="keyword">char</span> s[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[x[i]=r[i]]++;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[x[i]]]=i;  </span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,M=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;  </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;  </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];  </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[wv[i]]]=y[i];  </span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rak[sa[i]]=i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rak[i++]]=k)  </span><br><span class="line">    <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rak[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i; i--)rak[i]=rak[i<span class="number">-1</span>],sa[i]++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll k;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">33</span>];</span><br><span class="line"><span class="keyword">int</span> sum[ms];</span><br><span class="line"><span class="comment">// int val[ms];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pos=upper_bound(sum+<span class="number">1</span>,sum+<span class="number">1</span>+n,mid+sum[sa[i]<span class="number">-1</span>])-sum;</span><br><span class="line">        cnt+=(ll)max(<span class="number">0</span>,pos-sa[i]-height[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt&gt;=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int x[]=&#123;0,1,2,3,4,5,6,7,8&#125;;</span></span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;,upper_bound(x+1,x+9,6)-x);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cal[i]=s[i];</span><br><span class="line">            l=min(l,c[s[i]-<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+c[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cal[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        da(cal+<span class="number">1</span>,sa,n+<span class="number">1</span>,<span class="number">128</span>);</span><br><span class="line">        calheight(cal+<span class="number">1</span>,sa,n);</span><br><span class="line"></span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=(ll)(n-sa[i]+<span class="number">1</span>-height[i]);</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">if</span>(k&gt;ans)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> r=sum[n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))</span><br><span class="line">            &#123;</span><br><span class="line">                r=mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【单调队列】21牛客多校5K</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E3%80%9121%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A15K/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E3%80%9121%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A15K/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/11256/K" >牛客多校5</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>常用于dp优化。</p><p>简单说，掐头去尾。</p><p>最优的放队头，最差的放队尾。</p><p>每加入一个新的，要从队尾开始比较，若是优于队尾，则弹出队尾。</p><p>今天这道题算是长长记性了。维护区间极差。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms 100009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[ms];</span><br><span class="line"><span class="keyword">int</span> qmax[ms];</span><br><span class="line"><span class="keyword">int</span> qmin[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l1=<span class="number">1</span>,r1=<span class="number">0</span>,l2=<span class="number">1</span>,r2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(l1&lt;=r1 &amp;&amp; a[i]&gt;=a[qmax[r1]]) r1--;</span><br><span class="line">            <span class="keyword">while</span>(l2&lt;=r2 &amp;&amp; a[i]&lt;=a[qmin[r2]]) r2--;</span><br><span class="line">            qmax[++r1]=i;</span><br><span class="line">            qmin[++r2]=i;</span><br><span class="line">            <span class="keyword">while</span>(l1&lt;=r1&amp;&amp;l2&lt;=r2 &amp;&amp; a[qmax[l1]]-a[qmin[l2]]&gt;k)</span><br><span class="line">            &#123;</span><br><span class="line">                ans+=(n-i+<span class="number">1</span>);</span><br><span class="line">                l++;</span><br><span class="line">                <span class="keyword">while</span>(qmax[l1]&lt;l) l1++;</span><br><span class="line">                <span class="keyword">while</span>(qmin[l2]&lt;l) l2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wqs二分</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/wqs%E4%BA%8C%E5%88%86/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/wqs%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>听说国家集训队结业都是要写论文的，然后诞生了各种nb算法，真的是推动世界科学发展%%%</p><p>wqs二分，又称忘情水二分，带权二分，诞生于国家集训队队员王钦石的论文，，，%%%</p><p>类似于斜率优化，只适用于凸函数，即要求单调，二分的是斜率k。用于解决这种问题：从n个物品中选出m个，使得结果最优，因为要结合图讲，这里我懒得放图了，所以就放链接吧。</p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/340514421" >wqs二分讲解</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/CreeperLKF/p/9045491.html" >另一篇</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>附一道洛谷题：<span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P2619" >洛谷P2619</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>另外附一道进阶题：<span class="exturl"><a class="exturl__link"   href="https://acm.hdu.edu.cn/showproblem.php?pid=6982" >HDU6982</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，其实差不多。</p><p>注意两个问题：</p><p>如果两个切点斜率相同时如何选择？（选择不好可能导致无解）</p><p>二分的区间？</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wqs二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>树状数组多用于查找前缀和，经典应用就是求逆序对数。树状数组得名于它的结构像是一棵树或者森林，其中比较关键的操作时x&amp;-x，即lowbit，二进制最小的1所在的位置。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]++;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt+=ans[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>线段树的作用就不用说了吧，可以实现O（logn）查询和修改的区间操作。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll p[ms&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll n,m;</span><br><span class="line">ll la[ms&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (l&lt;=r)&amp;&amp;(L&lt;=l)&amp;&amp;(r&lt;=R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[rt]=p[rt&lt;&lt;<span class="number">1</span>]+p[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(la[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        p[rt&lt;&lt;<span class="number">1</span>]+=la[rt]*(m-l+<span class="number">1</span>);<span class="comment">//更新左子区间</span></span><br><span class="line">        p[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=la[rt]*(r-m);<span class="comment">//更新右子区间</span></span><br><span class="line">        la[rt&lt;&lt;<span class="number">1</span>]+=la[rt];<span class="comment">//下传标记</span></span><br><span class="line">        la[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=la[rt];</span><br><span class="line">        la[rt]=<span class="number">0</span>;<span class="comment">//取消标记</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(in(L,l,r,R))<span class="comment">//若L，R覆盖了当前的区间，那么更新一下，并且标记</span></span><br><span class="line">    &#123;</span><br><span class="line">        p[rt]+=(r-l+<span class="number">1</span>)*val;</span><br><span class="line">        la[rt]+=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(rt,l,r);<span class="comment">//下传标记</span></span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;=L) update(L,R,l,m,rt&lt;&lt;<span class="number">1</span>,val);<span class="comment">//递归更新</span></span><br><span class="line">    <span class="keyword">if</span>(m&lt;R) update(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(in(L,l,r,R))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(rt,l,r);</span><br><span class="line">    ll cc=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;=L) cc+=getsum(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(m&lt;R) cc+=getsum(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        update(i,i,<span class="number">1</span>,n,<span class="number">1</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c,l,r;</span><br><span class="line">        ll d;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;d;</span><br><span class="line">            update(l,r,<span class="number">1</span>,n,<span class="number">1</span>,d);<span class="comment">//更新，l，r表示要更新的区间。1，n表示当前的区间。1是表示当前的区间编号，d是要更新的val</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            ll ans=getsum(l,r,<span class="number">1</span>,n,<span class="number">1</span>);<span class="comment">//同上</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数快速取模模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E5%BF%AB%E9%80%9F%E5%8F%96%E6%A8%A1%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E5%BF%AB%E9%80%9F%E5%8F%96%E6%A8%A1%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>              <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <p>在a*b%p时，可能还未取模，就溢出了。首先是个logn的求法，利用了位运算。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            (sum+=a)%p;</span><br><span class="line">        &#125;</span><br><span class="line">        (a&lt;&lt;=<span class="number">1</span>)%=p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>然后这个是O（1）的写法。这里用long double巧妙处理了这个问题。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a%=p; b%=p;</span><br><span class="line">    ll c=(<span class="keyword">long</span> <span class="keyword">double</span>)a*b/p;</span><br><span class="line">    ll ans=a*b-c*p;</span><br><span class="line">    <span class="keyword">if</span>(ans&lt;<span class="number">0</span>) ans+=p;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ans&gt;=p) ans-=p;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>加上快速幂</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qsm</span><span class="params">(ll a, ll b, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=mul(ans,a,p);</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a=mul(a,a,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数快速取模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假图论专题训练</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9A%91%E5%81%87%E5%9B%BE%E8%AE%BA%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9A%91%E5%81%87%E5%9B%BE%E8%AE%BA%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p><img src="%E5%9B%BE%E8%AE%BA.png" alt="图论" /></p><p>图论其实就是数学问题，如果够强，你可以试着将遇到的问题都化为图的形式解决~~</p><p>这个博客其实平时就是我自己看的，所以关于一些问题的叙述很简单，大部分也只是放个板子，方便使用，大家有兴趣的也可以看看，有错误的话欢迎大家指出。</p><p>写这篇文章是为了放一些无法在vj上抓的题，主要为牛客和洛谷上的题，另外会放一些知识点的讲解，因为wiki上面有的不太通俗易懂。</p><p>那么下面就开始吧，图论入门到入土。</p>        <h1 id="专题一"   >          <a href="#专题一" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题一"></a> 专题一</h1>              <h2 id="知识点链接"   >          <a href="#知识点链接" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#知识点链接"></a> 知识点链接</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/sugarbliss/article/details/86495945" >链式前向星</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，这个链式前向星是很常用的存图方式，性能要优于邻接表，开始时可能需要花点时间理解，但用久了就能体会到它的妙处了。邻接矩阵和邻接表就不多说了，比较简单，虽然写题也够用了，但如果想学图论的话，链式前向星是一定要学的。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/bf73c8d50dc2" >二叉树</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，对于树的概念了解一下，以后大有用处。</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/hzf0701/article/details/107643772" >dijkstra</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，常用的一种最短路求法，主要思想就是贪心，和prim类似。</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_35644234/article/details/60875818" >floyd</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，多源求最短路，虽然复杂度高，但在求可达性的时候有妙用。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/Renyi-Fan/p/8184323.html" >最小生成树</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，两种算法其实都是贪心，kruskal是加边保证不生成环，适用于稀疏图；prim是加点保证连通，适用于稠密图。啊，放的这个讲解有点不太友好，里面的代码不用参考，太繁锁了，把思路看明白了就行。并查集部分属于数据结构的知识，但是并不难，一行足矣，也很常用，建议大家看看<span class="exturl"><a class="exturl__link"   href="https://fantasy99.top/2021/07/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%A8%A1%E6%9D%BF/" >并查集</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，在kruskal里面会用到。</p><p>kruskal简单来说，就是存每条边，然后按边权排序，从小到大选边，如果这条边的两个点都被使用过了，那么就跳过，直到选够n-1条边。</p><p>prim算法和dijkstra算法几乎一样，学懂了dijkstra也就很容易明白prim了。</p><p><span class="exturl"><a class="exturl__link"   href="https://fantasy99.top/2021/07/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%A8%A1%E6%9D%BF/" >最小生成树模板</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>另外洛谷那些题的题解也有大佬对知识点的讲解，大家可以看看。</p>        <h2 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>      <p>以下题目未挂vj，各位巨巨写完后填一下这个表格，打个×就行。<span class="exturl"><a class="exturl__link"   href="https://docs.qq.com/sheet/DRFVJWlljbGdQTnZo?tab=BB08J2" >图论1做题情况</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3916" >图的遍历（P3916）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P1123" >取数游戏（P1123）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P4779" >【模板】单源最短路径（标准版）（P4779）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P1364" >医院设置（P1364）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3366" >最小生成树（P3366）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P2330" >SCOI2005]繁忙的都市（P2330）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/188/C?&amp;headNav=www&amp;headNav=acm&amp;headNav=acm" >水图（牛客练习赛27 C）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="专题二"   >          <a href="#专题二" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题二"></a> 专题二</h1>              <h2 id="知识点链接-2"   >          <a href="#知识点链接-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#知识点链接-2"></a> 知识点链接</h2>      <p>首先wiki上的知识点可以去看看，这个专题要学的知识点可以参考上图。</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/wmy0217_/article/details/105438163" >最短路算法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，spfa常用来判负环；堆优化的dijkstra多用来求最短路，有些题会卡spfa。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/khan724/p/4383686.html" >最小环</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，通常是使用floyd求解，只需要在松弛之前判一下环即可。</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_43602607/article/details/108454580?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-3.control" >负环与差分约束</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，负环判断很简单，多使用spfa来判断，而差分约束其实就是将不等式求解转化为最短路问题，而负环常用来表示无解的情况。</p>        <h2 id="题目-2"   >          <a href="#题目-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目-2"></a> 题目</h2>      <p>以下题目请巨巨们写完后填一下表格，打x即可。<span class="exturl"><a class="exturl__link"   href="https://docs.qq.com/sheet/DREh5WGlSQ1FOSFdM?tab=BB08J2" >图论2做题情况</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P5960" >差分约束（P5920）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3371" >单源最短路径（弱化版）（P3371）)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P6175" >最小环（P6175）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P1144" >最短路计数（P1144）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3385" >负环（P3385）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="专题三"   >          <a href="#专题三" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题三"></a> 专题三</h1>              <h2 id="知识点链接-3"   >          <a href="#知识点链接-3" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#知识点链接-3"></a> 知识点链接</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/101923309" >tarjan1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，在这里主要涉及连通性的问题。割点、割边、无向图的双连通分量、有向图的强连通分量、缩点等等。</p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/64916637" >tarjan2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/xizi_ghq/article/details/88372277" >tarjan3</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，这三篇结合着看吧</p><p>树的直径看洛谷那道模板题的题解即可，我当时是在那看懂的，也可以百度搜搜。</p>        <h2 id="题目-3"   >          <a href="#题目-3" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目-3"></a> 题目</h2>      <p>以下题目请巨巨们写完后填一下表格，打x即可。<span class="exturl"><a class="exturl__link"   href="https://docs.qq.com/sheet/DREtseURzWGdjd2t0?tab=BB08J2" >图论3做题情况</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P5536" >【XR-3】核心城市(P5536)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3387" >【模板】缩点(P3387)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3388" >【模板】割点（割顶）(P3388)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="专题四"   >          <a href="#专题四" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题四"></a> 专题四</h1>              <h2 id="知识点链接-4"   >          <a href="#知识点链接-4" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#知识点链接-4"></a> 知识点链接</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/200826505" >拓扑排序</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，拓扑排序就是对有向无环图的一种遍历操作，这里放个讲解，大家也可以搜搜看。</p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/96229700" >匈牙利算法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，这个讲的很好，在二分图中，我们用匈牙利算法寻找二分图最大匹配，其实就是找增广路的过程。</p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/214072424" >km算法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，这个是有点难度的，在寻找匹配的情况下要使得权值最大，其实就是带权完备匹配，注意复杂度。</p>        <h2 id="题目-4"   >          <a href="#题目-4" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目-4"></a> 题目</h2>      <p>以下题目请巨巨们写完后填一下表格，打x即可。<span class="exturl"><a class="exturl__link"   href="https://docs.qq.com/sheet/DREFJY2hqSHdCRktz?tab=BB08J2" >图论4做题情况</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P1113" >P1113 杂务</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/solution/P3386" >P3386 【模板】二分图最大匹配</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P1559" >P1559 运动员最佳匹配问题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P1983" >NOIP2013 普及组] 车站分级</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="专题五"   >          <a href="#专题五" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#专题五"></a> 专题五</h1>              <h2 id="知识点链接-5"   >          <a href="#知识点链接-5" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#知识点链接-5"></a> 知识点链接</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/112013386" >欧拉路</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，很简单的一个东西，连通性相关的问题。优化之后，复杂度可以达到O（N+M）。</p><p>网络流大家网上搜搜吧，讲解很多。</p>        <h2 id="题目-5"   >          <a href="#题目-5" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目-5"></a> 题目</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P2731" >USACO3.3]骑马修栅栏 Riding the Fences</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P7771" >P7771 【模板】欧拉路径</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3376" >P3376 【模板】网络最大流</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 暑假图论专题训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暑假图论专题训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫队模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E8%8E%AB%E9%98%9F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E8%8E%AB%E9%98%9F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>就跟名字一样，莫队是前前国家队队长莫涛发明的。</p><p>主要是离线处理答案，通过对询问合理排序，减少复杂度。</p><p>重点就在排序和处理询问那部分。</p><p>放模板题：<span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3901" >莫队板子</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>复杂度可以达到O(n^3/2)</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms 100009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,p;</span><br><span class="line">&#125;ask[ms];<span class="comment">//询问</span></span><br><span class="line"><span class="keyword">int</span> ac[ms];<span class="comment">//答案</span></span><br><span class="line"><span class="keyword">int</span> a[ms];</span><br><span class="line"><span class="keyword">int</span> sn;<span class="comment">//分块</span></span><br><span class="line"><span class="keyword">int</span> curl=<span class="number">1</span>,curr=<span class="number">0</span>;<span class="comment">//移动的指针</span></span><br><span class="line"><span class="keyword">int</span> cnt[ms];</span><br><span class="line"><span class="keyword">int</span> answer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">莫队提供了这样一个排序方案：将原序列以√n为一块进行分块（分块的大小也可以调整），</span></span><br><span class="line"><span class="comment">排序第一关键字是询问的左端点所在块的编号，第二关键字是询问的右端点本身的位置，都是升序。</span></span><br><span class="line"><span class="comment">然后我们用上面提到的“移动当前区间左右端点”的方法，</span></span><br><span class="line"><span class="comment">按顺序求每个询问区间的答案，</span></span><br><span class="line"><span class="comment">移动每一个询问区间左右端点可以求出下一个区间的答案。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x.l/sn)==(y.l/sn)?x.r&lt;y.r:x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">奇偶块排序，比较通用</span></span><br><span class="line"><span class="comment">如果区间左端点所在块不同，那么就直接按左端点从小到大排；</span></span><br><span class="line"><span class="comment">如果相同，奇块按右端点从小到大排，偶块按右端点从大到小排。</span></span><br><span class="line"><span class="comment">bool cmp(node x,node y)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return (x.l/sn)!=(y.l/sn) ? x.l&lt;y.l:(((x.l/sn)&amp;1)?x.r&lt;y.r:x.r&gt;y.r);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((++cnt[a[p]])==<span class="number">1</span>) ++answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((--cnt[a[p]])==<span class="number">0</span>) --answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    sn=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ask[i].l&gt;&gt;ask[i].r;</span><br><span class="line">        ask[i].p=i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//精髓</span></span><br><span class="line">    sort(ask+<span class="number">1</span>,ask+q+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l=ask[i].l,r=ask[i].r;</span><br><span class="line">        <span class="keyword">while</span>(curl&lt;l) del(curl++);</span><br><span class="line">        <span class="keyword">while</span>(curl&gt;l) add(--curl);</span><br><span class="line">        <span class="keyword">while</span>(curr&lt;r) add(++curr);</span><br><span class="line">        <span class="keyword">while</span>(curr&gt;r) del(curr--);</span><br><span class="line">        <span class="keyword">if</span>(answer==(r-l+<span class="number">1</span>))</span><br><span class="line">            ac[ask[i].p]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ac[i]) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 莫队 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点分治模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E7%82%B9%E5%88%86%E6%B2%BB%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E7%82%B9%E5%88%86%E6%B2%BB%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>点分治是一种处理大规模树上有效方法，思路还蛮清晰的，就是写代码的时候巨绕hh。</p><p>放模板题：<span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3806" >点分治模板题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>主要分四步：</p><p>1.找重心</p><p>2.删重心</p><p>3.找子节点到根（刚才找的重心）的距离</p><p>4.处理答案</p><p>重复1~4</p><p>是不是很简单~ ~</p><p>详解放注释了。</p><p>复杂度:<em>O</em>(nlog^2n)</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 10000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],cost[ms],ne[ms];</span><br><span class="line"><span class="keyword">int</span> ask[ms],ac[ms];<span class="comment">//ask是询问，ac是答案</span></span><br><span class="line"><span class="keyword">int</span> sz[ms],we[ms];<span class="comment">//sz是以第i个点为根的子树节点数，we是第i个点的最大子树的点数</span></span><br><span class="line"><span class="keyword">int</span> del[ms];<span class="comment">//被删掉的点，其实就是重心</span></span><br><span class="line"><span class="keyword">int</span> dis[ms], dislist[ms];<span class="comment">//dis表示子节点到根节点的距离，dislist存的是所有距离比如1 2 2 3....</span></span><br><span class="line"><span class="keyword">int</span> cntd,rt,r_size,tot;<span class="comment">//分别是子节点数、重心、当前树的节点个数、链式前向星计数</span></span><br><span class="line"><span class="keyword">int</span> ext[MS];<span class="comment">//表示是否存在到该节点距离为i的点，可以用bool</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;tmp;<span class="comment">//下面解释</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=y;</span><br><span class="line">    ne[tot]=head[x];</span><br><span class="line">    cost[tot]=z;</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span><span class="comment">//找重心</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>;<span class="comment">//该点为根，初始大小为1</span></span><br><span class="line">    we[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v!=f&amp;&amp;!del[v])</span><br><span class="line">        &#123;</span><br><span class="line">            getroot(v,u);</span><br><span class="line">            sz[u]+=sz[v];<span class="comment">//加上子树节点数</span></span><br><span class="line">            we[u]=max(we[u],sz[v]);<span class="comment">//找最大子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    we[u]=max(we[u],r_size-sz[u]);<span class="comment">//与走向父节点的子树大小进行比较</span></span><br><span class="line">    <span class="keyword">if</span>(we[u]&lt;we[rt]) rt=u;<span class="comment">//得到重心</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span><span class="comment">//找子节点到u的距离</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dislist[++cntd]=dis[u];<span class="comment">//把该距离存下来</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">cos</span>=cost[i];</span><br><span class="line">        <span class="keyword">if</span>(v!=f&amp;&amp;!del[v])</span><br><span class="line">        &#123;</span><br><span class="line">            dis[v]=dis[u]+<span class="built_in">cos</span>;<span class="comment">//v到根的距离</span></span><br><span class="line">            getdis(v,u);<span class="comment">//递归</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ext[<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//根节点到自己的距离为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">cos</span>=cost[i];</span><br><span class="line">        <span class="keyword">if</span>(!del[v])</span><br><span class="line">        &#123;</span><br><span class="line">            cntd=<span class="number">0</span>;</span><br><span class="line">            dis[v]=<span class="built_in">cos</span>;</span><br><span class="line">            getdis(v,u);<span class="comment">//找距离</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)<span class="comment">//m个问题</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=cntd; j++)<span class="comment">//这cntd个距离</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ask[i]&gt;=dislist[j])<span class="comment">//若小于，则找一下之前的兄弟子树是否有另一部分距离</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ac[i] |= ext[ ask[i] - dislist[j] ];<span class="comment">//若是有，则该问题有答案</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cntd; i++)<span class="comment">//搜完该子树，在ext存下距离</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dislist[i]&lt;=<span class="number">1e7</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ext[dislist[i]]=<span class="number">1</span>;</span><br><span class="line">                    tmp.push(dislist[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ext[<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">//清空ext，不能用memset，太大了，会爆</span></span><br><span class="line">    <span class="keyword">while</span>(tmp.size())</span><br><span class="line">    &#123;</span><br><span class="line">        ext[tmp.front()]=<span class="number">0</span>;</span><br><span class="line">        tmp.pop();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> u)</span><span class="comment">//分治</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    del[u]=<span class="number">1</span>;<span class="comment">//删掉该重心，即根</span></span><br><span class="line">    cal(u);<span class="comment">//算一下距离，找找答案</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!del[v])</span><br><span class="line">        &#123;</span><br><span class="line">            we[rt=<span class="number">0</span>]=r_size=sz[v];<span class="comment">//轮到子树了</span></span><br><span class="line">            getroot(v,<span class="number">0</span>);</span><br><span class="line">            getroot(rt,<span class="number">0</span>);</span><br><span class="line">            divide(rt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        add(x,y,z);</span><br><span class="line">        add(y,x,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ask[i];</span><br><span class="line">    &#125;</span><br><span class="line">    we[rt=<span class="number">0</span>]=r_size=n;</span><br><span class="line">    getroot(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    getroot(rt,<span class="number">0</span>);<span class="comment">//再次以重心为根，算一下sz，更加准确，因为一开始是1为根节点算的，可能会错误，所以这里再算一次。</span></span><br><span class="line">    divide(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ac[i]) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;AYE\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NAY\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展欧几里得模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>欧几里德有个十分又用的定理： gcd(a, b) = gcd(b , a%b) 。</p><p>只要我们找到一组特殊的解 x0 和 y0 那么，我们就可以用 x0 和 y0 表示出整个不定方程的通解：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = x0 + (b/gcd)*t</span><br><span class="line">y = y0 – (a/gcd)*t</span><br></pre></td></tr></table></div></figure>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;x=<span class="number">1</span>,y=<span class="number">0</span>; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    ll d=exgcd(b,a%b,x,y);</span><br><span class="line">    ll z=x; x=y; y=z-y*(a/b);</span><br><span class="line">    <span class="keyword">return</span> d;<span class="comment">//a，b的最大公约数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ll a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    ll x,y;</span><br><span class="line">    ll gcd=exgcd(a,b,x,y);</span><br><span class="line">    <span class="keyword">if</span>(c%gcd==<span class="number">0</span>)<span class="comment">//能整除，有解</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;-x*(c/gcd)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;-y*(c/gcd)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//特解</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//无解</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>exgcd求逆元（贝祖定理）</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     ll x,y;</span><br><span class="line">     ll d=exgcd(a,b,x,y);<span class="comment">//其实就是ax+by=1,b是mod</span></span><br><span class="line">     <span class="keyword">return</span> d == <span class="number">1</span> ? (x+b)%b : <span class="number">-1</span>;<span class="comment">//返回逆元，x其实就是逆元，这里是避免x是负数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扩展欧几里得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵快速幂模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>简单说就是把快速幂的底数换成了矩阵，利用矩阵乘法进行运算。</p><p>对于这最基本的内容，你会了快速幂也就会这个了，主要是另一方面的应用。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e2</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">ll a[ms][ms],ans[ms][ms],n,k;<span class="comment">//ans是结果，a是底数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll c[ms][ms];</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                c[i][j]=(c[i][j]+ans[i][k]*a[k][j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(ans,c,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll c[ms][ms];</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                c[i][j]=(c[i][j]+a[i][k]*a[k][j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a,c,<span class="keyword">sizeof</span>(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) ans[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) mul1();</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        mul2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans[i][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>最基本、最经典的应用就是求斐波那契数列第n项了，当n很大的时候，递推必超时，这时候就推出一个式子，百度吧，不想在这贴了- -。</p><p>要想用矩阵乘法加速，必须能推出递推式，找到一个一维向量成为状态矩阵，与状态矩阵相乘的是固定不变的转移矩阵。能找到这些，就能用矩阵快速幂。复杂度O(n^3log T)，T是轮数。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"></span><br><span class="line">ll f[<span class="number">3</span>],a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll c[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]=(c[i]+f[j]*a[j][i])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(f,c,<span class="keyword">sizeof</span>(f));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll c[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=<span class="number">2</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                c[i][j]=(c[i][j]+a[i][k]*a[k][j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a,c,<span class="keyword">sizeof</span>(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>; f[<span class="number">1</span>]=<span class="number">0</span>; f[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>; a[<span class="number">1</span>][<span class="number">2</span>]=a[<span class="number">2</span>][<span class="number">1</span>]=a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) mul1();</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        mul2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的直径模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>很简单，两次dfs或者树形dp即可，但是证明过程有点复杂，这里就不放出来了。</p><p>主要就是求个直径的中点，然后以此中点为根，遍历一遍，记录每个点可以达到的最大深度和这个点的深度，作差，排序，选前k个点即可。详细题解在洛谷里有。</p><p>找中点的过程，可以记录遍历时每个点的父节点。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P5536" >例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//s,t为直径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span><span class="comment">//不回头</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">        d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(d[v]&gt;d[s]) s=v;<span class="comment">//若是距离更远，则更新s点</span></span><br><span class="line">        dfs1(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">        d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">        fa[v]=u;</span><br><span class="line">        <span class="keyword">if</span>(d[v]&gt;d[t]) t=v;    </span><br><span class="line">        dfs2(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的直径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉路模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%AC%A7%E6%8B%89%E8%B7%AF%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%AC%A7%E6%8B%89%E8%B7%AF%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p><strong>欧拉路</strong>指的是：存在这样一种图，可以从其中一点出发，不重复地走完其所有的边。</p><p>如果欧拉路的起点与终点相同，则称之为欧拉回路。</p><p>显而易见，欧拉路存在的充要条件如下：</p><p>1、图是连通的，若不连通不可能一次性遍历所有边。</p><p>2、对于<strong>无向图</strong>：有且仅有两个点，与其相连的边数为奇数，其他点相连边数皆为偶数；或所有点皆为偶数边点。对于两个奇数点，一个为起点，一个为终点。起点需要出去，终点需要进入，故其必然与奇数个边相连。</p><p>如果存在这样一个欧拉路，其所有的点相连边数都为偶数，那说明它是欧拉回路。</p><p>因为此时它的起点即是终点，出去后还会回来，刚好形成偶数边。</p><p>3、对于<strong>有向图</strong>：除去起点和终点，所有点的出度与入度相等。起点出度比入度大1，终点入度比出度大1。若起点终点出入度也相同，则为欧拉回路。</p><p>欧拉路问题也常被称为一笔画问题。</p><p><strong>Hierholzer</strong> 算法：</p><p>用栈模拟dfs，不然可能爆栈，因为递归层数是O(m)，毕竟重复的点会入栈的。</p><p>其实直接dfs就好，栈会自动拼接这些回路，最后是一个很好的欧拉回路。</p><p>可以指定起点。起点会在最后被加入答案栈中，逆序输出的才是访问的顺序。</p><p>时间复杂度O(n+m)</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[Ms],ne[Ms];</span><br><span class="line"><span class="keyword">int</span> n,m,tot,cnt;</span><br><span class="line"><span class="keyword">int</span> s[Ms],ans[Ms];<span class="comment">//模拟栈</span></span><br><span class="line"><span class="keyword">bool</span> vis[Ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler</span><span class="params">(<span class="keyword">int</span> ss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[++top]=ss;</span><br><span class="line">    <span class="keyword">while</span>(top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=s[top]; </span><br><span class="line">        <span class="keyword">int</span> i=head[u];</span><br><span class="line">        <span class="keyword">while</span>(i &amp;&amp; vis[i]) i=ne[i];<span class="comment">//未放问的边</span></span><br><span class="line">        <span class="keyword">if</span>(i)<span class="comment">//沿着这条边模拟递归过程，标记并更新表头</span></span><br><span class="line">        &#123;</span><br><span class="line">            s[++top]=to[i];</span><br><span class="line">            <span class="comment">//无向边时</span></span><br><span class="line">            <span class="comment">// vis[i]=vis[i^1]=1; </span></span><br><span class="line"></span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            head[u]=ne[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//与u相连的边都已访问，模拟回溯过程，并记录答案</span></span><br><span class="line">        &#123;</span><br><span class="line">            top--;</span><br><span class="line">            ans[++cnt]=u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        add(x,y);</span><br><span class="line">        add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    euler(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt; i; i--)<span class="comment">//逆序输出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧拉路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tarjan模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/tarjan%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/tarjan%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>              <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="tarjan割边"   >          <a href="#tarjan割边" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tarjan割边"></a> tarjan割边</h2>      <p>dfs树上面，存在x的一个子节点满足dfs[x]&lt;low[y]，说明（x，y）是割边。</p><p>因为如果不经过xy这条边，subtree[y]无法通过其它边更早到达或者可以到达x。</p><p>割边一定是搜索树中的边，一个简单环的边一定不是割边。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms*<span class="number">2</span>],ne[ms*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dfn[ms],low[ms],n,m,tot,num;</span><br><span class="line"><span class="keyword">bool</span> bridge[ms*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> ine)</span><span class="comment">//ine是入边，避免回到父节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++num;<span class="comment">//初始时间戳</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i ;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])<span class="comment">//未曾走过</span></span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v,i);<span class="comment">//深搜</span></span><br><span class="line">            low[u]=min(low[v],low[u]);<span class="comment">//更新x的追溯值</span></span><br><span class="line">            <span class="keyword">if</span>(low[v]&gt;dfn[u])<span class="comment">//若是这样子，说明要到y的子树去，一定得经过x这个点，则这个边是割边</span></span><br><span class="line">            &#123;</span><br><span class="line">              bridge[i]=bridge[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//有重边也可以更新</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))<span class="comment">//已经走过了，而且不是父节点，那么就更新一下x的追溯值</span></span><br><span class="line">            low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    tot=<span class="number">1</span>;<span class="comment">//因为成对记录边，所以初始化tot=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        add(x,y); add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//因为图不一定连通</span></span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;tot; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bridge[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,to[i^<span class="number">1</span>],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="tarjan割点"   >          <a href="#tarjan割点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tarjan割点"></a> tarjan割点</h2>      <p>若x不是搜索树的根节点，则x是割点当且仅当x的子树中存在一个子节点y满足dfn[x]&lt;=low[y]。</p><p>若是根节点，则至少两个节点满足上式。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms*<span class="number">2</span>],ne[ms*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dfn[ms],low[ms],n,m,tot,num,root;</span><br><span class="line"><span class="keyword">bool</span> cut[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> ine)</span><span class="comment">//可以不必考虑重边和父节点的问题。但是考虑上也不会错</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++num;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;<span class="comment">//根节点的子节点个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v,i); </span><br><span class="line">            low[u]=min(low[v],low[u]);</span><br><span class="line">            <span class="keyword">if</span>(low[v]&gt;=dfn[u])</span><br><span class="line">            &#123;</span><br><span class="line">                 flag++;</span><br><span class="line">                 <span class="keyword">if</span>(flag&gt;<span class="number">1</span> || u!=root) cut[u]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))</span><br><span class="line">          low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>; <span class="comment">//不必考虑重边</span></span><br><span class="line">        add(x,y); add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//因为图不一定连通</span></span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) root=i,tarjan(i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cut[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,cut[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="边双连通分量e-dcc"   >          <a href="#边双连通分量e-dcc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#边双连通分量e-dcc"></a> 边双连通分量（e-dcc）</h2>      <p>无割边。简单，找出割边之后，dfs一下就行，找出所有连通块。</p><p>对于无向图，low相同的点其实就在同一边双连通分量。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms*<span class="number">2</span>],ne[ms*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dfn[ms],low[ms],n,m,tot,num;</span><br><span class="line"><span class="keyword">bool</span> bridge[ms*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> c[ms],dcc;<span class="comment">//c表示该点属于哪一个连通块。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> ine)</span><span class="comment">//ine是入边，避免回到父节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])<span class="comment">//未曾走过</span></span><br><span class="line">&#123;</span><br><span class="line">tarjan(v,i);</span><br><span class="line">low[u]=min(low[u],low[v]);<span class="comment">//更新x的追溯值</span></span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;dfn[u])<span class="comment">//若是这样子，说明要到y的子树去，一定得经过x这个点，则这个边是割边</span></span><br><span class="line">&#123;</span><br><span class="line">bridge[i]=bridge[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//有重边也可以更新</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))<span class="comment">//已经走过了，而且不是父节点，那么就更新一下x的追溯值</span></span><br><span class="line">&#123;</span><br><span class="line">low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span><span class="comment">//给连通块标号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c[u]=cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(c[v] || bridge[i]) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    tot=<span class="number">1</span>;<span class="comment">//因为成对记录边，所以初始化tot=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        add(x,y); add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//因为图不一定连通</span></span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//dfs一波</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!c[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ++dcc;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dcc);<span class="comment">//连通块个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="点双连通分量v-dcc"   >          <a href="#点双连通分量v-dcc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#点双连通分量v-dcc"></a> 点双连通分量（v-dcc）</h2>      <p>这个概念容易让人迷惑，需要注意的是以下三点：</p><p>1、孤立点肯定是一个v-dcc。</p><p>2、注意v-dcc是具有极大性。</p><p>3、一个割点可能属于多个v-dcc。</p><p>还是需要多琢磨一下的，很多v-dcc可能是仅有两个点，即两个割点。这个比边连通分量要复杂，需要用到栈，是在找割点的时候顺便把所有v-dcc找出来了。</p><p>一些性质：</p><p>1、割点就算相邻也会属于至少两个BCC；BCC间的交点都是割点，所以非割点只属于一个BCC。</p><p>2、任意两点间至少存在两条点不重复的路径等价于图中删去任意一个点都不会改变图的连通性，即BCC中无割点。</p><p>3、若BCC间有公共点，则公共点为原图的割点。</p><p>4、对于每个BCC，它在DFS树中最先被发现的点一定是割点或DFS树的树根。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms*<span class="number">2</span>],ne[ms*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dfn[ms],low[ms],n,m,tot,num,root;</span><br><span class="line"><span class="keyword">bool</span> cut[ms];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[ms];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dcc[ms];</span><br><span class="line"><span class="keyword">int</span> cnt,s[ms],top;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ine)</span><span class="comment">//其实求割点不必考虑父节点，因为不等式有等于号，但是加上去也绝对没问题</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++num;<span class="comment">//初始时间戳</span></span><br><span class="line">    <span class="keyword">if</span>(x==root &amp;&amp; head[x]==<span class="number">0</span>)<span class="comment">//孤立点</span></span><br><span class="line">    &#123;</span><br><span class="line">        dcc[++cnt].push_back(x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>[++top]=x; <span class="comment">//第一次访问该点时，入栈。</span></span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;<span class="comment">//有几个节点满足那个不等式</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])<span class="comment">//未曾走过</span></span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(y,i);<span class="comment">//深搜</span></span><br><span class="line">            low[x]=min(low[x],low[y]);<span class="comment">//更新x的追溯值</span></span><br><span class="line">            <span class="keyword">if</span>(low[y]&gt;=dfn[x])<span class="comment">//若是这样子，说明要到y的子树去，一定得经过x这个点，则这个边是割边</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag++;</span><br><span class="line">                <span class="keyword">if</span>(x!=root || flag&gt;<span class="number">1</span>) cut[x]=<span class="number">1</span>;<span class="comment">//要么不是根节点，要么超过两个节点满足不等式</span></span><br><span class="line">                <span class="comment">//弹出x~y的点，构成一个v-dcc</span></span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">int</span> z;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    z=<span class="built_in">stack</span>[top--];</span><br><span class="line">                    dcc[cnt].push_back(z);</span><br><span class="line">                &#125;<span class="keyword">while</span>(z!=y);</span><br><span class="line">                dcc[cnt].push_back(x);<span class="comment">//x也加进去</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(ine^<span class="number">1</span>))<span class="comment">//已经走过了，而且不是父节点，那么就更新一下x的追溯值</span></span><br><span class="line">            low[x]=min(low[x],dfn[y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>; <span class="comment">//不必考虑重边</span></span><br><span class="line">        add(x,y); add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//因为图不一定连通</span></span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) root=i,tarjan(i,<span class="number">0</span>);</span><br><span class="line"> <span class="comment">//dcc里面存的就是v-dcc，cnt为个数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="有向图的强连通分量"   >          <a href="#有向图的强连通分量" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#有向图的强连通分量"></a> 有向图的强连通分量</h2>      <p>从x回溯前，有low[x]=dfn[x]。用数组模拟栈，方便标记哪些点入栈了。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3387" >缩点模板题(P3387)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Ms=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[Ms],ne[Ms];</span><br><span class="line"><span class="keyword">int</span> dfn[ms],low[ms],n,m,tot,num,top,cnt;</span><br><span class="line"><span class="keyword">int</span> s[ms],ins[ms],c[ms];<span class="comment">//模拟栈</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; scc[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++num;</span><br><span class="line">    s[++top]=u;</span><br><span class="line">    ins[u]=<span class="number">1</span>;<span class="comment">//标记在栈内</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])<span class="comment">//如果是树枝边</span></span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[v])<span class="comment">//如果是后向边</span></span><br><span class="line">            low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[u]==dfn[u])<span class="comment">//说明从u到栈顶可以组成强连通分量</span></span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            v=s[top--];</span><br><span class="line">            ins[v]=<span class="number">0</span>;</span><br><span class="line">            c[v]=cnt;</span><br><span class="line">            scc[cnt].push_back(v);</span><br><span class="line">        &#125;<span class="keyword">while</span>(u!=v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        add(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//因为图不一定连通</span></span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u&lt;=n; u++)<span class="comment">//缩点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(c[v]==c[u])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            add_c(c[u],c[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客从linux迁移到wins</title>
      <link href="/2022/01/26/%E5%8D%9A%E5%AE%A2/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8Elinux%E8%BF%81%E7%A7%BB%E5%88%B0wins/"/>
      <url>/2022/01/26/%E5%8D%9A%E5%AE%A2/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8Elinux%E8%BF%81%E7%A7%BB%E5%88%B0wins/</url>
      
        <content type="html"><![CDATA[<p>啰嗦几句，之前为了试试虚拟机，把仓放到了linux下，每次更新个博客都得去虚拟机里搞，好烦，于是乎就把整个博客迁到主机下了，直呼舒服。</p>        <h1 id="先在windows安装git和nodejs"   >          <a href="#先在windows安装git和nodejs" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#先在windows安装git和nodejs"></a> 先在windows安装git和node.js</h1>      <p>这就不用多说了，网上全是教程，安装好之后，打开cmd，输入git --version和node -v检查是否安装成功，若是显示版本号了，说明就是成功了。</p>        <h1 id="打开git-bash"   >          <a href="#打开git-bash" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#打开git-bash"></a> 打开git bash</h1>      <p>安装hexo，输入：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></div></figure><p>查看版本，若是显示版本号，说明安装成功。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></div></figure>        <h1 id="新建blog文件夹"   >          <a href="#新建blog文件夹" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#新建blog文件夹"></a> 新建blog文件夹</h1>      <p>找到一个合适的位置，自己随便放哪都行，创建一个blog文件夹，作为根目录。</p>        <h1 id="迁移博客"   >          <a href="#迁移博客" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#迁移博客"></a> 迁移博客</h1>      <p>在git bash里面进入blog目录，输入：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></div></figure><p>将linux下的blog文件复制到windows下blog文件夹内，覆盖掉原文件即可。</p>        <h1 id="设置密匙"   >          <a href="#设置密匙" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#设置密匙"></a> 设置密匙</h1>      <p>在git bash生成密匙，输入：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;自己的github邮箱&quot;</span></span><br></pre></td></tr></table></div></figure><p>然后在用户目录（user/xxx)下找到.ssh的文件夹，找到id_rsa.pub的文件打开(一定要后缀是.pub的那个)，复制里面的东西。</p><p>打开github，添加一个新的密匙，title随意写，将复制的内容粘贴在下面。</p>        <h1 id="注"   >          <a href="#注" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注"></a> 注：</h1>      <p>如果出现其它问题，基本上百度就能解决。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维】训练3.13J</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4%E3%80%91%E8%AE%AD%E7%BB%833.13J/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4%E3%80%91%E8%AE%AD%E7%BB%833.13J/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p>忘了</p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>第2^{n-1}行全部是奇数。<br />对于组合数，若C(n,k)=k,则该组合数结果为奇数。</p><p>若是要求第n行有多少个奇数，则求n的二进制有多少个1，记为x个，然后求2^x即为奇数个数。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 训练赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>次短路模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%AC%A1%E7%9F%AD%E8%B7%AF%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%AC%A1%E7%9F%AD%E8%B7%AF%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>简单来是分别记录最短路和次短路，每次更新最短路之后，顺便要查看一下是否要更新一下最短路，即把最短路不要的那个值赋给次短路。</p><p>分别将最短路和次短路入队。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d1,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d1));</span><br><span class="line"><span class="built_in">memset</span>(d2,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d2)); </span><br><span class="line"><span class="built_in">priority_queue</span>&lt; <span class="built_in">pair</span>&lt;<span class="keyword">int</span> ,<span class="keyword">int</span> &gt;,<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span> ,<span class="keyword">int</span> &gt; &gt;,greater&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span> ,<span class="keyword">int</span> &gt; &gt; &gt;q;</span><br><span class="line">d1[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.top().second;  <span class="keyword">int</span> d=q.top().first;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(d2[u]&lt;d) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i],w=cost[i];</span><br><span class="line"><span class="keyword">int</span> sd=w+d;</span><br><span class="line"><span class="keyword">if</span>(sd&lt;d1[v])</span><br><span class="line">&#123;</span><br><span class="line">swap(d1[v],sd);</span><br><span class="line">q.push(<span class="built_in">make_pair</span>(d1[v],v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sd&lt;d2[v] &amp;&amp; sd&gt;d1[v])</span><br><span class="line">&#123;</span><br><span class="line">d2[v]=sd;</span><br><span class="line">q.push(<span class="built_in">make_pair</span>(d2[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 次短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小环模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%8E%AF%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%8E%AF%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>Floyd算法求最小环，把所有环分成n类，最大节点编号是1的， 最大节点编号是2的 …  最大节点编号是n的 总共n类，每一类求长度最小值，然后再求所有最小值的最小值，就是答案</p><p>其中最大节点编号是k的环，一定是两个小于k的数i, j， i 和 k直连， j和k直连，然后i j之前经过编号小于k的点连起来，并且连接的路径是最短的</p><p>这正好和Floyd第k轮开始迭代开始前的状态一样，只需要在第k轮迭代开始前，枚举所有id小于k的点对i, j 看i, j, k能不能形成更小的环即可，Floyd算法迭代时候，需要同时维护距离和路径</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无向图最小环模板</span></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>；k&lt;=n；k++)</span><br><span class="line">  &#123; <span class="keyword">for</span>(i=<span class="number">1</span>；i&lt;k；i++)</span><br><span class="line">     <span class="keyword">for</span>(j=i+<span class="number">1</span>；j&lt;k；j++)</span><br><span class="line">      <span class="keyword">if</span>(d[i][j]+m[i][k]+m[k][j]&lt;min)</span><br><span class="line">       min=d[i][j]+m[i][k]+m[k][j]；</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>；i&lt;=n；i++)</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>；j&lt;=n；j++)</span><br><span class="line">      <span class="keyword">if</span>(d[i][k]+d[k][j]&lt;d[i][j])</span><br><span class="line">       d[i][j]=d[i][k]+d[k][j]；</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近公共祖先LCA模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88LCA%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88LCA%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>倍增是一种很神奇的思想，可以大大提升效率。</p><p>比如从0走到7，一步步走，需要走7步，但是如果采用倍增思想。</p><p>走8步，不行。</p><p>走4步，可以。</p><p>走2步，可以。</p><p>走1步，可以。</p><p>到达终点。</p><p>所以可以预处理出这部分，其实就是dp的思想。</p><p>我们设f（i,j）表示i节点的第2^j代祖先，这样f（i,0）就是i的父亲，而对于所有j&gt;0，我们有 f（i,j） = f（ f（i,j-1）, j-1）<br />怎么理解呢？<br />i节点的第2^(j - 1)代祖先的2^(j - 1)祖先就是i的第2^j代祖先<br />所以我们用O(nlogn)的时间就预处理出了f[][]数组</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3379" >例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span><span class="comment">//得出深度和祖先节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u]=dep[fa]+<span class="number">1</span>;</span><br><span class="line">f[u][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=lg[dep[u]]; i++)</span><br><span class="line">&#123;</span><br><span class="line">f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(v!=fa)</span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">//倍增,一起向上搜</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[a]&lt;dep[b]) swap(a,b);</span><br><span class="line"><span class="keyword">int</span> d=dep[a]-dep[b];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=lg[d]; i++)<span class="comment">//先处于同一层</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d) a=f[a][i];</span><br><span class="line"><span class="comment">/*while (dep[a] &gt; dep[b])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">a = f[a][lg[dep[a] - dep[b]] - 1];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lg[dep[a]]<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)<span class="comment">//如果老的祖先都不是公共的，那么之后的肯定也不是，所以从大开始</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[a][i]!=f[b][i])</span><br><span class="line">&#123;</span><br><span class="line">a=f[a][i]; b=f[b][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最近公共祖先LCA </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路计数模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>最短路计数模板题。</p><p>可存在自环和重边。</p><p>初始化num数组为0，num[s]=1。</p><p>每当松弛时，被松弛点等于松弛点的最短路条数。</p><p>当相等时，直接加上u的最短路条数。</p><p>dijkstra堆优化。</p><p>优先队列是top，一般队列是front。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P1144" >例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 100003</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; P;</span><br><span class="line"><span class="keyword">int</span> n,m,head[ms],to[ms*<span class="number">2</span>],ne[ms*<span class="number">2</span>],d[ms],num[ms];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> v[ms];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++cnt]=b;</span><br><span class="line">ne[cnt]=head[a];</span><br><span class="line">head[a]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;P, <span class="built_in">vector</span>&lt; P &gt;, greater&lt; P &gt; &gt; q;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</span><br><span class="line">d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.top().second; q.pop();<span class="comment">//top是优先队列，front是一般队列</span></span><br><span class="line"><span class="keyword">if</span>(v[u]) <span class="keyword">continue</span>;</span><br><span class="line">v[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(d[v]&gt;d[u]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">num[v]=num[u];</span><br><span class="line">q.push(<span class="built_in">make_pair</span>(d[v],v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d[v]==d[u]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">num[v]+=num[u];</span><br><span class="line">num[v]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">add(a,b);</span><br><span class="line">add(b,a);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路及负环模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%8A%E8%B4%9F%E7%8E%AF%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%8A%E8%B4%9F%E7%8E%AF%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>Floyd：时间复杂度<em>O</em>(n^3)，可以处理负权边，但不能处理负环，而且速度很慢。</p><p>Bellman-Ford：以每个点为源点做一次Bellman-Ford，时间复杂度<em>O</em>(mn^2)，可以处理负权边，可以处理负环，但好像比Floyd还慢？</p><p>dijkstra：以每个点为源点做一次dijkstra，时间复杂度<em>O</em>(nmlogm)，不能处理负权边，也不能处理负环，但比前面两个快多了。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P5905" >单源最短路</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P4779" >多源最短路</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="经典dijkstra"   >          <a href="#经典dijkstra" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#经典dijkstra"></a> 经典dijkstra</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用优先队列优化后的写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MS=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MS];</span><br><span class="line"><span class="keyword">int</span> ne[MS];</span><br><span class="line"><span class="keyword">int</span> to[MS];</span><br><span class="line"><span class="keyword">int</span> cost[MS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[MS];</span><br><span class="line"><span class="keyword">bool</span> v[MS];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s;<span class="comment">//点数，边数，起点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++cnt]=b;</span><br><span class="line">cost[cnt]=c;</span><br><span class="line">ne[cnt]=head[a];</span><br><span class="line">head[a]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt; <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;q;<span class="comment">//大根堆，取相反数变为小根堆</span></span><br><span class="line">q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.top().second; q.pop();</span><br><span class="line"><span class="keyword">if</span>(v[x]) <span class="keyword">continue</span>;</span><br><span class="line">v[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=to[i];</span><br><span class="line"><span class="keyword">int</span> z=cost[i];</span><br><span class="line"><span class="keyword">if</span>(d[y]&gt;d[x]+z)</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+z;</span><br><span class="line">q.push(<span class="built_in">make_pair</span>(-d[y],y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">add(a,b,c);</span><br><span class="line">        <span class="comment">//add(b,a,c);</span></span><br><span class="line">&#125;</span><br><span class="line">dijkstra();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,d[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//这部分可以计算最短路的条数</span></span><br><span class="line"><span class="comment">for(int i=head[u]; i; i=ne[i])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int t=to[i],w=cost[i];</span></span><br><span class="line"><span class="comment">if(w+d[u]&lt;d[t])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">d[t]=w+d[u];</span></span><br><span class="line"><span class="comment">tot[t]=1;//maybe tot[t]=tot[u];</span></span><br><span class="line"><span class="comment">q.push(make_pair(-d[t],t));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else if(w+d[u]==d[t]) tot[t]++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="spfa"   >          <a href="#spfa" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spfa"></a> spfa</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MS=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MS];</span><br><span class="line"><span class="keyword">int</span> ne[MS];</span><br><span class="line"><span class="keyword">int</span> to[MS];</span><br><span class="line"><span class="keyword">int</span> cost[MS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[MS];</span><br><span class="line"><span class="keyword">int</span> d[MS];</span><br><span class="line"><span class="keyword">bool</span> v[MS];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s;<span class="comment">//点数，变数，起点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++cnt]=b;</span><br><span class="line">cost[cnt]=c;</span><br><span class="line">ne[cnt]=head[a];</span><br><span class="line">head[a]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span><span class="comment">//同一个点不能同时在队列中出现两次</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">v[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front(); q.pop();</span><br><span class="line">v[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=to[i];</span><br><span class="line"><span class="keyword">int</span> z=cost[i];</span><br><span class="line"><span class="keyword">if</span>(d[y]&gt;d[x]+z)</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+z;</span><br><span class="line">             <span class="comment">// cnt[y]=cnt[x]+1; //路径+1</span></span><br><span class="line">             <span class="comment">// if(cnt[y]&gt;=n) retrun 1; //有负环</span></span><br><span class="line"><span class="keyword">if</span>(!v[y]) q.push(y),v[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">add(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line">spfa();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,d[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>SPFA有种以下的方法判断负环：</p><p>1.可以在spfa算法中用cnt数组存储当前点最短路径经过的边数，一旦经过了n条边，则说明经过了n + 1个点，而图中仅有n个点，该最短路径经过了一个点两次，所以必然存在负权回路。<br />2.记录每个点入队的次数，如果某个点入队次数大于n，说明存在最小环。</p>        <h2 id="floyd"   >          <a href="#floyd" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#floyd"></a> Floyd</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MS=<span class="number">5e3</span>+<span class="number">9</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> d[MS][MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;=n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[i][j]&gt;d[i][k]+d[k][j])</span><br><span class="line">                    d[i][j] = d[i][k]+d[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">d[x][y]=z;</span><br><span class="line">d[y][x]=z;</span><br><span class="line">&#125;</span><br><span class="line">floyd();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="johnson全源最短路"   >          <a href="#johnson全源最短路" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#johnson全源最短路"></a> Johnson全源最短路</h2>      <p>很奇妙的一种方法，当题目出现负边时，明显不能用dijkstra，但是如果题目又会卡spfa，容易超时，就也不能用spfa。此时我们想到一种新写法，因为dij不能有负边嘛（但spfa可以），那我们想办法把边都变成正的，即Johnson。</p><p>此时呢，洛谷那个题解给出一种惊为天人的解释，他用物理的势能来解释原理，详情就不贴出来了，可以去那看看，众所周知，势能大小只与起始终止位置有关，而与路径无关，所以不会影响结果。而且呢，根据三角形松弛的原理，修正过的边的权值必定非负。啧啧。最终结果减去那个修正值即可。</p><p>实现步骤就是建立一个超级源点，指向其它所有边，边权为0，用spfa跑一遍，建立起一条条最短路，然后去修正边权，之后再用dij。最后减去修正值。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P5905" >例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MS=<span class="number">20000</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"></span><br><span class="line">ll head[MS],ne[MS],to[MS],w[MS],h[MS],cnt[MS],d[MS];</span><br><span class="line">ll opp=<span class="number">0</span>,m,n;</span><br><span class="line"><span class="keyword">bool</span> v[MS];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll y,ll z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++opp]=y;</span><br><span class="line">ne[opp]=head[x];</span><br><span class="line">w[opp]=z;</span><br><span class="line">head[x]=opp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;ll&gt;q;</span><br><span class="line">v[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">q.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line">ll x=q.front(); q.pop();</span><br><span class="line">v[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=head[x]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line">ll y=to[i]; ll z=w[i];</span><br><span class="line"><span class="keyword">if</span>(h[y]&gt;h[x]+z)</span><br><span class="line">&#123;</span><br><span class="line">h[y]=h[x]+z;</span><br><span class="line">cnt[y]=cnt[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt[y]&gt;=n+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!v[y]) q.push(y),v[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(ll s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ll j=<span class="number">1</span>; j&lt;=n; j++) d[j]=INF;</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt; <span class="built_in">pair</span>&lt;ll,ll&gt; &gt;q;<span class="comment">//大根堆，取相反数变为小根堆</span></span><br><span class="line">q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line">ll x=q.top().second; q.pop();</span><br><span class="line"><span class="keyword">if</span>(v[x]) <span class="keyword">continue</span>;</span><br><span class="line">v[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=head[x]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line">ll y=to[i];</span><br><span class="line">ll z=w[i];</span><br><span class="line"><span class="keyword">if</span>(d[y]&gt;d[x]+z)</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+z;</span><br><span class="line">q.push(<span class="built_in">make_pair</span>(-d[y],y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line">ll a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">add(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=n; i++) add(<span class="number">0</span>,i,<span class="number">0</span>),h[i]=INF;</span><br><span class="line"><span class="keyword">if</span>(spfa())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(ll j=head[i]; j; j=ne[j])</span><br><span class="line">&#123;</span><br><span class="line">ll u=i,v=to[j];</span><br><span class="line">w[j]=w[j]+h[u]-h[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dijkstra(i);</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[j]==INF)</span><br><span class="line">ans+=j*INF;</span><br><span class="line"><span class="keyword">else</span> ans+=j*(d[j]+h[j]-h[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 负环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>最小生成树模板题，再次拿来写，一方面为了熟悉一下，另一方面是想试试怎么去写简洁一些。</p><p>这两个算法其实都是贪心。稠密图用prim，稀疏图用kruskal吧。</p><p>prim算法，记录初始点到其它点的距离，一边找邻接的最短边，一边加点（即vis），一边更新最短的邻接边，每次循环可以确定一个新的边和点。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="prime"   >          <a href="#prime" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#prime"></a> Prime</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">d[i]=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[<span class="number">1</span>]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line">d[v]=min(d[v],w[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">while</span>(++cnt&lt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minn=inf;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]&amp;&amp;minn&gt;d[i])</span><br><span class="line">&#123;</span><br><span class="line">k=i;</span><br><span class="line">minn=d[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">vis[k]=<span class="number">1</span>;</span><br><span class="line">ans+=minn;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[k]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v]&amp;&amp;d[v]&gt;w[i]) d[v]=w[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;orz\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="kruskal"   >          <a href="#kruskal" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#kruskal"></a> kruskal</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.w&lt;y.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//每次记得给并查集fa清空</span></span><br><span class="line">sort(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);<span class="comment">//按边权排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> fu=find(edge[i].u);</span><br><span class="line"><span class="keyword">int</span> fv=find(edge[i].v);</span><br><span class="line"><span class="keyword">if</span>(fu==fv) <span class="keyword">continue</span>;<span class="comment">//若在同一集合</span></span><br><span class="line">fa[fv]=fu;<span class="comment">//合并</span></span><br><span class="line">ans+=edge[i].w;<span class="comment">//加上权值</span></span><br><span class="line"><span class="keyword">if</span>(++cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;<span class="comment">//边数够了</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;orz\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓扑排序模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>拓扑排序模板题，DAG有向无环图。拓扑序多用于并发工程问题，计算最晚时间或者最早时间，也可以用来判断有向图是否有环。</p><p>关键部分是记录每个点的入度，将入度为0的点入队。然后将临接点的入度减1，若入度为0，则入队，直到无点入队。判环只需记录点数就行，因为如果存在环，则最终一定无法入队。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P1113" >例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ind[i]==<span class="number">0</span>) q.push(i);</span><br><span class="line">fw[i]=cost[i];<span class="comment">//记入度为0的点的最晚时间即为自身时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i]; <span class="keyword">int</span> <span class="built_in">cos</span>=cost[u];</span><br><span class="line">ind[v]--;<span class="comment">//入度--</span></span><br><span class="line"><span class="keyword">if</span>(ind[v]==<span class="number">0</span>) q.push(v);<span class="comment">//入度为0入队</span></span><br><span class="line">fw[v]=max(fw[v],fw[u]+cost[v]);<span class="comment">//更新完成当前任务的最晚时间</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) sum=max(sum,fw[i]);</span><br><span class="line"><span class="keyword">if</span>(cnt!=n) <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【并查集】CF某D</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91CF%E6%9F%90D/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91CF%E6%9F%90D/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/101669/D" >CF</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>并查集或者最小生成树。。</p><p>每一列只有两个1。</p><p>矩阵中只有1和0，计算规则已经给出。</p><p>正解就是，每列中的两个1所在的行建边，然后会有多个连通块，每个连通块的贡献是元素个数减一。</p><p>线性无关最大组的秩。</p><p>不太容易想到用并查集的思想。</p><p>题还挺难读的。</p><p>而且注意一点，fa[i]不一定是i点的祖宗节点，所以要用find(i)。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分约束模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>差分约束，常用来解不等式组，很有趣的一种解决办法。</p><p>今天在洛谷题单上看到一句话，图论其实也是数学问题，只是用图的形式表现出来了。不能再赞同了！</p><p>建图只是解决数学问题的一种手段罢了。</p><p>简单说，差分约束，就是将不等式组的变量化为点，不等关系化为边。</p><p>差分约束系统的解法如下：</p><p>1、 根据条件把题意通过变量组表达出来得到不等式组，注意要发掘出隐含的不等式，比如说前后两个变量之间隐含的不等式关系。</p><p>2、 进行建图：</p><p>首先根据题目的要求进行不等式组的标准化。</p><p>(1)、如果要求取最小值，那么求出最长路，那么将不等式全部化成xi – xj &gt;=  k的形式，这样建立j-&gt;i的边，权值为k的边，如果不等式组中有xi – xj &gt; k，因为一般题目都是对整形变量的约束，化为xi – xj &gt;= k+1即可，如果xi – xj = k呢，那么可以变为如下两个：xi – xj &gt;= k, xi – xj &lt;= k,进一步变为xj – xi &gt;= -k，建立两条边即可。</p><p>(2)、如果求取的是最大值，那么求取最短路，将不等式全部化成xi – xj &lt;= k的形式, 这样建立j-&gt;i的边，权值为k的边，如果像上面的两种情况，那么同样地标准化就行了。</p><p>(3)、如果要判断差分约束系统是否存在解，一般都是判断环，选择求最短路或者最长路求解都行，只是不等式标准化时候不同，判环地话，用spfa即可，n个点中如果同一个点入队超过n次，那么即存在环。</p><p>值得注意的一点是：建立的图可能不联通，我们只需要加入一个超级源点，比如说求取最长路时图不联通的话，我们只需要加入一个点S，对其他的每个点建立一条权值为0的边图就联通了，然后从S点开始进行spfa判环。最短路类似。</p><p>3、 建好图之后直接spfa或bellman-ford求解，不能用dijstra算法，因为一般存在负边，注意初始化的问题。</p><p>4、其实差分约束用最短路和最长路写都行，只是麻烦或者简单的问题。</p><p>挂一个博客https://www.luogu.com.cn/blog/123StephenCurry/solution-p5960</p><p>写的蛮好的。</p><p>其实核心就是建图。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P5960" >洛谷</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">2e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,tot=<span class="number">0</span>,m;</span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms],w[ms],dis[ms],in[ms];</span><br><span class="line"><span class="keyword">bool</span> vis[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++tot]=b;</span><br><span class="line">ne[tot]=head[a];</span><br><span class="line">head[a]=tot;</span><br><span class="line">w[tot]=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">dis[<span class="number">0</span>]=<span class="number">0</span>; vis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">q.push(<span class="number">0</span>);</span><br><span class="line">in[<span class="number">0</span>]++;</span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">vis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i],cost=w[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+cost)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+cost;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">vis[v]=<span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">in[v]++;</span><br><span class="line"><span class="keyword">if</span>(in[v]&gt;=n+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,c,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">add(b,a,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">add(<span class="number">0</span>,i,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!spfa()) <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对拍模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%AF%B9%E6%8B%8D%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%AF%B9%E6%8B%8D%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="主文件"   >          <a href="#主文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#主文件"></a> 主文件</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//主程序 duipai.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> T=<span class="number">1</span>; T&lt;=<span class="number">10000</span>; T++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//自行设定适当路径</span></span><br><span class="line">system(<span class="string">&quot;random.exe&quot;</span>);</span><br><span class="line"><span class="comment">//已经运行的CPU时间，windows下是ms</span></span><br><span class="line"><span class="keyword">double</span> st=clock();</span><br><span class="line">system(<span class="string">&quot;sol.exe&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> ed=clock();</span><br><span class="line">system(<span class="string">&quot;bf.exe&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(system(<span class="string">&quot;fc data.out data.ans&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//发生错误 </span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Wrong Answer&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Accepted, 测试点#%d, 用时 %.0lfms\n&quot;</span>,T,ed-st);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);自己的 </span></span><br><span class="line"><span class="comment">//freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);freopen(&quot;data.ans&quot;,&quot;w&quot;,stdout);正解的 </span></span><br></pre></td></tr></table></div></figure>        <h1 id="随机数据生成文件"   >          <a href="#随机数据生成文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#随机数据生成文件"></a> 随机数据生成文件</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//random.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">random</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)rand()*rand()%n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;data.in&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="number">0</span>));</span><br><span class="line"><span class="comment">//int n=random(10000)+1; </span></span><br><span class="line"><span class="comment">//int m=1000000000;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,random(2*m+1)-m);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="bf文件"   >          <a href="#bf文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bf文件"></a> bf文件</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;data.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);freopen(<span class="string">&quot;data.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="自己写的文件"   >          <a href="#自己写的文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自己写的文件"></a> 自己写的文件</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;data.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);freopen(<span class="string">&quot;data.ans&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 对拍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对拍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【字符串双hash】21山东省赛F</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8Chash%E3%80%9121%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8Chash%E3%80%9121%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/15600/F" >CF</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>n个字符串，有多少对字符串拼接后可以切割成完全相同的两半</p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>双哈希+字符串，通过手动检查，可以发现，如果加上一个字符串可以使得整个穿可以被分割，那么这个字符串的部分前缀和后缀是相同的，然后加上一个和中间子串一样的字符串。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">4e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> ll base1=<span class="number">2333333</span>;</span><br><span class="line"><span class="keyword">const</span> ll base2=<span class="number">13331</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod1=<span class="number">999999998</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod2=<span class="number">91815541</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll,ll&gt; P;</span><br><span class="line"><span class="built_in">map</span>&lt; P ,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"></span><br><span class="line">ll pw1[ms],pw2[ms];</span><br><span class="line">ll p1[ms],p2[ms];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">&#125;a[ms];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.s.size()&lt;y.s.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">P <span class="title">check</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans1,ans2;</span><br><span class="line">    ans1=(p1[r]-p1[l<span class="number">-1</span>]*pw1[r-l+<span class="number">1</span>]%mod1+mod1)%mod1;<span class="comment">//这是子串的hash值写法</span></span><br><span class="line">    ans2=(p2[r]-p2[l<span class="number">-1</span>]*pw2[r-l+<span class="number">1</span>]%mod2+mod2)%mod2;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_pair</span>(ans1,ans2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    pw1[<span class="number">0</span>]=<span class="number">1</span>; pw2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=ms<span class="number">-9</span>; i++)<span class="comment">//base的i次方</span></span><br><span class="line">    &#123;</span><br><span class="line">        pw1[i]=pw1[i<span class="number">-1</span>]*base1%mod1;</span><br><span class="line">        pw2[i]=pw2[i<span class="number">-1</span>]*base2%mod2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[x].s;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);<span class="comment">//按长度排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1[<span class="number">0</span>]=<span class="number">0</span>; p2[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=a[i].s.size();</span><br><span class="line">        <span class="built_in">string</span> c=a[i].s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; i++)<span class="comment">//对于字符串的双hash</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1[i]=(p1[i<span class="number">-1</span>]*base1+c[i<span class="number">-1</span>])%mod1;</span><br><span class="line">            p2[i]=(p2[i<span class="number">-1</span>]*base2+c[i<span class="number">-1</span>])%mod2;</span><br><span class="line">        &#125;</span><br><span class="line">        P pp=check(<span class="number">1</span>,len);<span class="comment">//整个串</span></span><br><span class="line">        ans=ans+mp[pp];</span><br><span class="line">        mp[pp]=mp[pp]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i*<span class="number">2</span>&lt;len; i++)<span class="comment">//因为已经排好序，所以每次加上的必定是短的串</span></span><br><span class="line">        &#123;</span><br><span class="line">            P pp1,pp2;</span><br><span class="line">            pp1=check(<span class="number">1</span>,i);</span><br><span class="line">            pp2=check(len-i+<span class="number">1</span>,len);</span><br><span class="line">            <span class="keyword">if</span>(pp1==pp2)<span class="comment">//前缀和后缀相同，则找到中间子串的hash值</span></span><br><span class="line">            &#123;</span><br><span class="line">                pp=check(i+<span class="number">1</span>,len-i);</span><br><span class="line">                ans=ans+mp[pp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 省赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串哈希模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>              <h2 id="单值hash"   >          <a href="#单值hash" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#单值hash"></a> 单值hash</h2>      <p>字符串hash就是找一个值改变一下它的进制，比如每个字符都*131或者13131。</p><p>记得用ull，自然溢出。</p><p>这样最后，几乎每个字符串都会有唯一的哈希值。</p>        <h2 id="双hash"   >          <a href="#双hash" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#双hash"></a> 双hash</h2>      <p>双值Hash就是用两个不同的mod值来计算Hash，如果两个Hash值都相等才认为是同一个字符串，Hash冲突概率降低了很多，但是常数大，容易被卡。时间上：自然溢出法&lt;单Hash+大质数&lt;双Hash+大质数。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3370" >洛谷P3370</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="单"   >          <a href="#单" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#单"></a> 单</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ull P=<span class="number">131</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MS=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ull a[MS];</span><br><span class="line"><span class="keyword">char</span> str[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">ull ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len; j++)</span><br><span class="line">&#123;</span><br><span class="line">ans+=<span class="number">131</span>*ans+(ull)str[j];</span><br><span class="line">&#125;</span><br><span class="line">a[i]=ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">if</span>(a[i]!=a[i<span class="number">-1</span>]) cnt++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="双"   >          <a href="#双" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#双"></a> 双</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=ms<span class="number">-9</span>; i++)<span class="comment">//base的i次方</span></span><br><span class="line">&#123;</span><br><span class="line">    pw1[i]=pw1[i<span class="number">-1</span>]*base1%mod1;</span><br><span class="line">    pw2[i]=pw2[i<span class="number">-1</span>]*base2%mod2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; i++)<span class="comment">//对于字符串的双hash，递推</span></span><br><span class="line">&#123;</span><br><span class="line">    p1[i]=(p1[i<span class="number">-1</span>]*base1+c[i])%mod1;</span><br><span class="line">    p2[i]=(p2[i<span class="number">-1</span>]*base2+c[i])%mod2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">P <span class="title">check</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans1,ans2;</span><br><span class="line">    ans1=(p1[r]-p1[l<span class="number">-1</span>]*pw1[r-l+<span class="number">1</span>]%mod1+mod1)%mod1;<span class="comment">//这是子串的hash值写法</span></span><br><span class="line">    ans2=(p2[r]-p2[l<span class="number">-1</span>]*pw2[r-l+<span class="number">1</span>]%mod2+mod2)%mod2;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_pair</span>(ans1,ans2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活小妙招</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%A6%99%E6%8B%9B/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%A6%99%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<p><strong>关于memset和赋值</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">-1</span>,<span class="keyword">sizeof</span>(v));<span class="comment">//以上两个值不变，可以直接赋值</span></span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(v));<span class="comment">//这个是赋一个最大值</span></span><br><span class="line"><span class="comment">//其他情况最好直接循环赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c++还有一个直接赋值函数，速度比m慢，比for快，是什么我给忘记了，以后看到了再补</span></span><br></pre></td></tr></table></div></figure><p><strong>scanf读取字符串（从1，1开始）</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[MS][MS];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i]+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//不要带取地址符</span></span><br><span class="line"><span class="comment">//也不能直接按行输出a[i]</span></span><br></pre></td></tr></table></div></figure><p><strong>关于读入与输出的速度</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//快读，最快</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;c=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//scanf和printf次之</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭同步</span></span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>)<span class="comment">//此时也建议将endl换为\n，因为速度相差很大</span></span><br></pre></td></tr></table></div></figure><p><strong>交互</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*交互题，说起来就是与机器互动，你向机器请求需要返回的内容，它给你结果，然后你读取，再进行一下步。</span></span><br><span class="line"><span class="comment">注意，每次询问过后，清空缓冲区。然后再读入*/</span></span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br></pre></td></tr></table></div></figure><p><strong>文件输入输出</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//刚进主函数就写上，平时自己对拍调试比较方便</span></span><br><span class="line">freopen(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>)</span><br></pre></td></tr></table></div></figure><p><strong>直接除2和位运算除2</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">目前编译器，默认都是算术移位</span><br><span class="line">右移运算是向下取整，整数除法是向零取整</span><br><span class="line"><span class="number">-3</span>&gt;&gt;<span class="number">1</span> = <span class="number">-2</span></span><br><span class="line"><span class="number">-3</span>/<span class="number">2</span>  = <span class="number">-1</span></span><br><span class="line">二分的时候使用位运算较好，整数除法在二分值域出现负数时会有问题。</span><br></pre></td></tr></table></div></figure><p><strong>计算一个32位无符号整数有多少个位为1</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__builtin_popcount(n)</span><br></pre></td></tr></table></div></figure><p><strong>_int128的输入输出</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> __int128 LL;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> __int128 <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int128 x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>set默认是升序排列</strong></p><p><strong>typedef给它们一些别名</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; P;</span><br></pre></td></tr></table></div></figure><p><strong>队列与优先队列</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//优先队列</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;P, <span class="built_in">vector</span>&lt; P &gt;, greater&lt; P &gt; &gt; q;</span><br><span class="line"><span class="comment">//优先队列队首是top，一般队列是front</span></span><br></pre></td></tr></table></div></figure><p><strong>stringstream的奇特用法</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//stringstream可以将字符直接化为数字</span></span><br><span class="line"><span class="comment">//现在比如输入一串数字 1 2 3 4 5....</span></span><br><span class="line"><span class="comment">//但是没有指定个数，就可以先用string读一行，然后赋值给stringstream，就可以实现对应操作。</span></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">111</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss&lt;&lt;s;</span><br><span class="line"><span class="keyword">while</span>(ss&gt;&gt;a[++cnt]);</span><br></pre></td></tr></table></div></figure><p><strong>平方和和立方和公式</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">平方和：n（n+<span class="number">1</span>)（<span class="number">2</span>n+<span class="number">1</span>）/<span class="number">6</span></span><br><span class="line">立方和：[n(n+<span class="number">1</span>)/<span class="number">2</span>]^<span class="number">2</span></span><br></pre></td></tr></table></div></figure><p><strong>二分函数</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">lower_bound( begin,end,num)；</span><br><span class="line">从数组的begin位置到end<span class="number">-1</span>位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</span><br><span class="line"></span><br><span class="line">upper_bound( begin,end,num)；</span><br><span class="line">从数组的begin位置到end<span class="number">-1</span>位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</span><br><span class="line"></span><br><span class="line">对于从<span class="number">1</span>位置开始的数组，比如a[]</span><br><span class="line">upper_bound(a+<span class="number">1</span>,a+<span class="number">1</span>+n,num)-a;</span><br><span class="line">返回的即为第一个大于num的值的下标。</span><br></pre></td></tr></table></div></figure><p><strong>位运算</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">加、 与 、或</span><br><span class="line">a+b = a&amp;b + a|b</span><br><span class="line">    </span><br><span class="line">lowbit运算</span><br><span class="line">x&amp;(-x)得到其后面最低的一位一</span><br><span class="line"></span><br><span class="line">第n位设为<span class="number">1</span></span><br><span class="line">x = x | (<span class="number">1</span> &lt;&lt; n);</span><br><span class="line"></span><br><span class="line">第n位设为<span class="number">0</span></span><br><span class="line">x = x &amp; ~ (<span class="number">1</span> &lt;&lt; n);</span><br><span class="line"></span><br><span class="line">第n位取反</span><br><span class="line">x = x ^ (<span class="number">1</span> &lt;&lt; n);</span><br><span class="line"></span><br><span class="line">将最右边的<span class="number">1</span>设为<span class="number">0</span></span><br><span class="line">x = x &amp; (x<span class="number">-1</span>);</span><br></pre></td></tr></table></div></figure><p><strong>bitset</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//bitset可以将复杂度降为n/64或者n/32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;32&gt; <span class="title">b</span><span class="params">(<span class="number">16</span>)</span></span>;<span class="comment">//将16的二进制保存进去</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1=<span class="string">&quot;1001010&quot;</span>;<span class="comment">//直接存01字符串</span></span><br><span class="line"><span class="keyword">char</span> s2[]=<span class="string">&quot;10011101&quot;</span>;</span><br><span class="line"><span class="function">biset&lt;32&gt; <span class="title">b1</span><span class="params">(s1)</span></span>;</span><br><span class="line"><span class="function">biset&lt;32&gt; <span class="title">b2</span><span class="params">(s2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;ms*ms&gt; b[ms];<span class="comment">//可以是二维</span></span><br><span class="line"></span><br><span class="line">b.size();  <span class="comment">//求大小，开的多大就是多大</span></span><br><span class="line"></span><br><span class="line">b.count(); <span class="comment">//统计1的个数</span></span><br><span class="line"></span><br><span class="line">b.flip();<span class="comment">//将全部位置取反</span></span><br><span class="line">b.filp(<span class="number">0</span>); <span class="comment">//只将0位置取反，参数可以是int</span></span><br><span class="line"></span><br><span class="line">b.<span class="built_in">set</span>(); <span class="comment">//全置1</span></span><br><span class="line">b.reset(); <span class="comment">//全置0</span></span><br><span class="line"></span><br><span class="line">b._Find_first();<span class="comment">//从低位到高位找下一个含有1的位置</span></span><br><span class="line">b._Find_next(pos);<span class="comment">//  找当前位置的下一个1的位置，也是低到高</span></span><br></pre></td></tr></table></div></figure><p><strong>几组hash模值</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//const ull base=2333333;</span></span><br><span class="line"><span class="comment">//#define mod 999999998</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const ull base=13331;</span></span><br><span class="line"><span class="comment">//#define mod 91815541</span></span><br></pre></td></tr></table></div></figure><p><strong>组合数公式</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C(n,m) = A(n,m)/m! = n!/((n-m)! m!)</span><br></pre></td></tr></table></div></figure><p><strong>map和set判断元素是否存在</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mp.find(元素)!=mp.end <span class="comment">//表示存在</span></span><br><span class="line">mp.conunt(元素) <span class="comment">//为1表示存在，0表示不存在</span></span><br><span class="line"><span class="comment">//set同理</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 生活小妙招 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活小妙招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的基本概念</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p><strong>图中的基本概念</strong></p><ol><li>图的匹配：指的是图的不具有公共端点的边的集合。图的最大匹配指不具有公共端点的最大边数。常见的问题有二分图的最大匹配，可以用dicnic解决或者用匈牙利算法解决。</li><li>图的边覆盖：是边子集的一种，指的是图中的所有顶点都是边子集中的某一条边的端点。最小边覆盖用最少的边来覆盖所有的顶点。</li><li>图的顶点覆盖：是顶点子集的一种，最小顶点覆盖指的是用最少的顶点来覆盖图中的所有边（只要有一条边的端点在子集种就认为该边被覆盖了）</li><li>图的独立子集：任意两点不相邻的点的集合。图的最大独立子集指的是让该集合中顶点数最多。</li><li>假设一个无向图G，一个团（顶点集合）是图G的子图，该集合中任意两点都相邻。最大团指的是顶点数量最多的极大团。</li><li>图的割集：设S是G的边集E的一个边子集，如果在连通图G中删除S的所有边．则G-S不连通，并且不存在S的真子集使G-S不连通，就称边集S是图G的一个割集。（最小割指的是最小化边集，也可以是最小边权集。）</li></ol><p><strong>之间的关系</strong></p><ol><li>最大匹配+最小边覆盖=顶点数</li><li>最大独立集+最小顶点覆盖=顶点数</li><li>最大独立集+最大匹配=顶点数</li><li>最大团 = 补图的最大独立集</li><li>最大独立集 = 补图的最大团</li><li>如果图是二分图 最大匹配=最小顶点覆盖  最大独立集+最大匹配数=顶点数</li><li>最大流最小割定理：图的最小割=最大流</li><li>有向无环图中：最小路径覆盖=顶点数-最大匹配数</li></ol><p><strong>求最大独立集</strong></p><p>求最大独立集其实有两种写法，如果图是一个二分图，就可以直接用匈牙利算法或者网络流算法（dicnic）求出最大匹配，然后得出最大独立集。</p><p>而如果图是一般的图，我们只需要求出补图的最大团即可，可用dfs求解。是一个NP完全问题。</p><p>噢，还有一种比较冷门的算法，，其实也不知道算不算冷门，叫做带花树，解决一般图的最大匹配，啧啧，看着就头大。</p>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图的基本概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kmp模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/kmp%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/kmp%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://www.zhihu.com/question/21923021" >一个很好的讲解</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>很好的一个kmp解析</p><p>给一个文本字符串和一个模板字符串。</p><p>正常暴力我们是挨个匹配，遇到不匹配的位置，我们就会重头再来，这样复杂度显然很大，而kmp算法呢，就是想办法在每次不匹配的时候，不重头开始进行，而是找个上个匹配的位置继续进行，这样就能大大优化。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.luogu.com.cn/problem/P3375" >例题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>kmp还可以轻松求解最小循环节和周期，这个只和next数组有关，如果(i-next[i])可以整除i，那么它们的商就是循环次数，i-next[i]就是最小循环节的长度。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MS=<span class="number">1e6</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[MS],b[MS];</span><br><span class="line"><span class="keyword">int</span> p[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,a+<span class="number">1</span>,b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> l1=<span class="built_in">strlen</span>(a+<span class="number">1</span>),l2=<span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> i,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=l2; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; b[i]!=b[j+<span class="number">1</span>]) j=p[j];<span class="comment">//找到上次的那个匹配位置</span></span><br><span class="line"><span class="keyword">if</span>(b[i]==b[j+<span class="number">1</span>]) j++;<span class="comment">//成功就++</span></span><br><span class="line">p[i]=j;</span><br><span class="line">&#125;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=l1; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; a[i]!=b[j+<span class="number">1</span>]) j=p[j];</span><br><span class="line"><span class="keyword">if</span>(a[i]==b[j+<span class="number">1</span>]) j++;</span><br><span class="line"><span class="keyword">if</span>(j==l2) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-l2+<span class="number">1</span>),j=p[j];<span class="comment">//成功匹配。j=p[j]可以去掉。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;l2; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【floyd】19ECNU-I</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90floyd%E3%80%9119ECNU-I/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90floyd%E3%80%9119ECNU-I/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://codeforces.com/gym/102190/attachments" >CF</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>唉，总能在意想不到的情况下建一个图。</p><p>简单说就是给一个矩阵，其实就是邻接矩阵，限制条件中题目已经给出。</p><p>emmm，最开始判断一定不成立的情况。</p><p>然后将所有边为-1的值更新，要么是对角位置的值，要么是随意赋的一个很大的值。</p><p>跑Floyd，更新最短路，一旦有松弛，检查一下该处这个值是否是可以改变的，如果不可改变，则已经不成立，如果可以改变，就改一下，然后接着跑。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【差分】21牛客寒假5D</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B7%AE%E5%88%86%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%875D/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B7%AE%E5%88%86%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%875D/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/9985/D" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>很好的一道差分题，一段区间进行同一种操作，通过差分，可以将整段的修改简化为两个单点修改。</p><p>差分嘛，就是后一项与前一项的差，纪念一下这道题。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lucas模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/lucas%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/lucas%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>用于大组合数对p取模的计算。</p><p>关于lucas定理，可以查询网上的资料。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打表，适合数据较小时</span></span><br><span class="line">ll fac[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ll n)</span><span class="comment">// 求阶乘打表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span>;i &lt;= n;i++)fac[i] = fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll n, ll mod)</span><span class="comment">// 逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>)ans = ans*a%mod;</span><br><span class="line">        a = a*a%mod;</span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m, ll p)</span><span class="comment">//p就是mode</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fac[n]*pow_mod(fac[m]*fac[n-m]%p, p<span class="number">-2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Lucas</span><span class="params">(ll n, ll m, ll p)</span><span class="comment">//C(n, m)，p就是mode</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m?Lucas(n/p, m/p, p)*C(n%p, m%p, p)%p:<span class="number">1ll</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不打表lucas</span></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll a, ll b, ll m)</span><span class="comment">//m是mod</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    a %= m;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = ans * a % m;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = a * a % m;</span><br><span class="line">    &#125;</span><br><span class="line">    ans %= m;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll x, ll p)</span><span class="comment">//x关于p的逆元，p为素数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m, ll p)</span><span class="comment">//组合数C(n, m) % p</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m &gt; n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll up = <span class="number">1</span>, down = <span class="number">1</span>;<span class="comment">//分子分母;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - m + <span class="number">1</span>; i &lt;= n; i++)up = up * i % p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)down = down * i % p;</span><br><span class="line">    <span class="keyword">return</span> up * inv(down, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Lucas</span><span class="params">(ll n, ll m, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lucas模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【二分+dfs】21牛客寒假5A</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%88%86+dfs%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%875A/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%88%86+dfs%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%875A/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/9985/A" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>首先很显然，如果点s无法到达点t，那么答案一定是NO；接着考虑二分最大的美丽值，假设二分出的最大美丽值为x，然后把n个点中点权大于等于x的标记为0，剩下的都标记为1，然后我们从s点开始dfs，如果从s到t点路径上存在两个相邻的点标记都为0的话，那么显然答案一定大于等于x；当然如果从s到t的路径上存在一条首尾点都为0，然后0和1交替出现的路径的话；或者存在一条从s到t的路径上0和1交替出现，并且0和1的个数相等的时候，显然这两种路径上的答案一定也大于等于x；其余情况显然答案一定会小于x，因此我们可以通过二分得到最大的美丽值。</p><p>以上为出题人题解。</p><p>。妙啊，二分。通过二分x的值，标记路径上的点，大于等于就是0，小于等于就是1。。。。</p><p>链式前向星，图的dfs。判断有木有路径可以到达。也可以并查集判断。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 二分或三分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【差分+桶装+扫描】21牛客寒假2G</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B7%AE%E5%88%86+%E6%A1%B6%E8%A3%85+%E6%89%AB%E6%8F%8F%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%872G/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E5%B7%AE%E5%88%86+%E6%A1%B6%E8%A3%85+%E6%89%AB%E6%8F%8F%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%872G/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/9982/G" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>差分其实就相邻两项的差值。</p><p>扫描线不能算是一种算法，它就是按照时间或者空间顺序依次处理的思路。这样的话它在实际处理的过程中并不需要在每一个点都处理一次，只要在关键的时间或者空间节点做处理即可。</p><p>比如这题，静态区间连续，所以从开头位置，假想一根垂直于x轴的线，不断向右移动。啧啧，妙啊。</p><p>桶装法只是一种记录数据的方式，对结果进行记录。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分 </tag>
            
            <tag> 桶装法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双端队列模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>              <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双端队列模板</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">deQue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> buffer[MS*<span class="number">2</span>];<span class="comment">//队列大小，大小翻倍 </span></span><br><span class="line"><span class="keyword">int</span> tail=MS<span class="number">-1</span>;<span class="comment">//尾 </span></span><br><span class="line"><span class="keyword">int</span> head=MS;<span class="comment">//头</span></span><br><span class="line"><span class="keyword">bool</span> rev;<span class="comment">//方向</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tail-head+<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tail&lt;head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rev?buffer[--head]=x:buffer[++tail]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rev?buffer[++tail]=x:buffer[--head]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rev?head++:tail--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rev?tail--:head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rev?buffer[head]:buffer[tail];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rev?buffer[tail]:buffer[head];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span><span class="comment">//翻转，其实就是交换头尾</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rev^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//此外，还有一个reverse(s+1,s+1+n)函数，翻转速度太慢</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双端队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>素数筛法模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p>emm，常用的有欧筛、埃筛，比较冷门的有杜教筛，min25筛等。</p>        <h2 id="埃筛"   >          <a href="#埃筛" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#埃筛"></a> 埃筛</h2>      <p>没啥好说的，经典中的经典。</p>        <h2 id="欧筛"   >          <a href="#欧筛" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#欧筛"></a> 欧筛</h2>      <p><strong>对于一个数k,总是进行从n*prime[0]~n*prime[j]，直到if(n%prime[j]==0)成立时break掉</strong></p><p>这是这个算法的精髓所在，所以弄清楚原因是十分必要的！！！</p><p>对于一个数c=ab(b为c的最小质因数),当通过该算法的循环循环至cb时，易得此时c%b==0,如果此时继续循环至b后面的一个素数d，则有：c*d=a*b*d=(a*d)b，因为d&gt;b,所以ad&gt;c。当循环从c继续查找到ad时我们发现当ad再次与素数b想乘时，就又对c*d进行了一次操作，出现了冗余，所以在if(n%prime[j]==0)成立时要将该层循环break掉；</p><p>举个例子，对于一个数9，9 x 2=18将18标记为合数，循环继续；9 x 3=27将27标记为合数，此时发现9%3=0，循环退出。如果将循环继续下去会出现筛除9 x 5=45的情况，而45=15 x 3，在15时会被在筛去一次，故不可行</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="埃筛-2"   >          <a href="#埃筛-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#埃筛-2"></a> 埃筛</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//埃氏筛法（复杂度O(NlogNlogN)）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[ms+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[ms+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= ms; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            prime[++tot] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i*<span class="number">2</span>; j &lt;= ms; j += i)&#123;</span><br><span class="line">                vis[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="欧筛-2"   >          <a href="#欧筛-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#欧筛-2"></a> 欧筛</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//欧拉筛，也叫线性筛法 复杂度（O(N)）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[ms+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[ms+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ouler</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= ms; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prime[++tot] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i*prime[j] &lt;= ms; j++)&#123;</span><br><span class="line">            vis[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;  <span class="comment">//关键句</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每个合数都会被它最小的质因子筛掉</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数筛法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求解逆元模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E6%B1%82%E8%A7%A3%E9%80%86%E5%85%83%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E6%B1%82%E8%A7%A3%E9%80%86%E5%85%83%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p><img src="%E5%9B%BE%E7%89%871.png" alt="图片" /></p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//费马小定理和快速幂</span></span><br><span class="line"><span class="function">ll <span class="title">qsm</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=ans*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ni</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> qsm(x,mod<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【逆元+并查集】21牛客寒假1D</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E9%80%86%E5%85%83+%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%871D/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E9%80%86%E5%85%83+%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%871D/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/9981/D" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>假设连通块数量为n，那么总方案数就是n!∗∏(每个连通块大小)。</p><p>每次操作有可能增加或减少连通块的数量，并改变连通块的大小，用并查集维护即可。</p><p>在加入每个新的连通块时，会有三种情况，一种是1，一种是创造新块，另一种是连接多个不连通的块，后两种情况的处理可以在一起，而且很巧妙。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 逆元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式前向星模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1mJ411S7BB?spm_id_from=333.999.0.0" >哔哩哔哩</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>一位数据结构大佬，这个讲的挺清楚的。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;<span class="comment">//或者1,看需求</span></span><br><span class="line"><span class="keyword">int</span> head[ms],to[ms],ne[ms];</span><br><span class="line"><span class="comment">//int cost[ms];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++tot]=v;</span><br><span class="line">    ne[tot]=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链式前向星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【dfs】21牛客寒假1C</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90dfs%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%871C/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90dfs%E3%80%9121%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%871C/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/9981/C" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>由每个红点周围有且仅有一个红点，每个蓝点周围有且仅有一个蓝点可得，如果叶子结点为一种颜色时，它的周围只有其父亲结点，所以父亲结点和它同色。</p><p>根据上述我们可以进行dfs，从下到上两两配对，存在一个没有与之配对的结点说明不存在此解。</p><p>配对完成后在进行一遍dfs经行染色，如果是匹配的染同一颜色，否则染不同颜色。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分或三分模板</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%88%96%E4%B8%89%E5%88%86%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%88%96%E4%B8%89%E5%88%86%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>              <h2 id="二分"   >          <a href="#二分" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二分"></a> 二分</h2>      <p>传说只有百分之十的程序员可以写对二分，emmm，一开始还不信，越用越发现，二分虽然基础，但是用法灵活多变，往往改变一处，就要改动整体，用法配套emmmmm。</p><p>这里的模板都是l==r结束，对于闭区间lr，一种是向r靠拢，一种是向l靠拢。当然，这是最基础的用法，记住一种即可，当需要改动时，仔细推算l，r的变化，再改动代码。</p><p>奇妙的是，第一段代码，mid不会取到r；第二段代码，mid不会取到l。这样就可以限制一些无解的情况，例如将第一段代码的区间扩大到1，r+1。将第二段代码扩展到0，n。这样二分终止于无解的情况。</p>        <h2 id="三分"   >          <a href="#三分" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三分"></a> 三分</h2>      <p>三分查找，用来比较不同坐标处值的大小关系（比较的这两点通常是分布在极值点两侧的），来确定区间内的极值。</p><p>三分应用于最优化问题的求解。在解题时没必要给出证明，只要知道问题不满足单调性，就可以尝试用三分搜索极值点，而且三分整数很少见，因为除非能够证明这种策略是正确的(即完全符合凸函数的性质，但是通常极值点不会在整点取得，如果三分整数，那么函数也不是连续的了)，否则很可能会错误，而三分应用在小数中是最常见的，比如说三分角度，三分坐标等等。</p><p>double 版 注意模板中 的 while(…) 这里面可能还需要加其他条件  有时候会T或者WA 可以改一下精度或设置循环次数如++i&lt;100 如 ZOJ 2340<br />double 版 还有另一种写法： lm=l+(r-l)/3; rm=r-(r-l)/3;</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>              <h2 id="二分-2"   >          <a href="#二分-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二分-2"></a> 二分</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分模板，选一即可</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&gt;=x) r=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&lt;=x) l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">另外还有l=mid，r=mid。l=mid+<span class="number">1</span>，r=mid<span class="number">-1</span>。或者<span class="keyword">while</span>(l&lt;=r)</span><br></pre></td></tr></table></div></figure>        <h2 id="三分-2"   >          <a href="#三分-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三分-2"></a> 三分</h2>      <p>凸函数</p><p>int：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> lm=(l+r)&gt;&gt;<span class="number">1</span>,rm=(lm+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(judge(lm)&gt;judge(rm))</span><br><span class="line">        r=rm;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l=lm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//答案取 l </span></span><br></pre></td></tr></table></div></figure><p>double：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l+eps&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> lm=(l+r)/<span class="number">2</span>,rm=(lm+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(judge(lm)&gt;judge(rm))</span><br><span class="line">        r=rm;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l=lm;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//答案取 l 或 (l+r)/2  (尽管此时 l 和 r 已经相等，但因为精度问题，取 r 可能会错)</span></span><br></pre></td></tr></table></div></figure><p>凹函数</p><p>int：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> lm=(l+r)&gt;&gt;<span class="number">1</span>,rm=(lm+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(judge(lm)&gt;judge(rm))</span><br><span class="line">        l=lm;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r=rm;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//答案取 r</span></span><br></pre></td></tr></table></div></figure><p>double：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l+eps&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> lm=(l+r)/<span class="number">2</span>,rm=(lm+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(judge(lm)&gt;judge(rm))</span><br><span class="line">        l=lm;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r=rm;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//答案取 r 或 (l+r)/2  (尽管此时 l 和 r 已经相等，但因为精度问题，取 l 可能会错)</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 二分或三分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分或三分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【二分】20上海D</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%9120%E4%B8%8A%E6%B5%B7D/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%9120%E4%B8%8A%E6%B5%B7D/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/12561/D" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>二分+思维</p><p>非常具有迷惑性的一道题。</p><p>题意简单明了，就是两个数轴上的点，速度不同，可以随时调走，求覆盖所有实数点的最短时间。</p><p>大概来说，我们可以分几类来考虑这个问题：<br />1、一个人走完；（速度极快）</p><p>2、两个人对穿，也就是说他们互相往另一个人的方向走，直到边界；（不掉头）</p><p>3、两个人各负责自己的一边，然后在中间相遇，那么对于每个人，有两种选择，一种是先往端点走，一种是先往中间走，那么我们可以二分时间，就能够算出每个人往中间最多能走多少路，判断一下能不能把线段覆盖了就行啦！（各负责一部分自己的区间，通过二分或三分使得两个人走的时间一样多）</p><p>emmm，不太容易想明白，对于2，3种情况，其实走对方走过的路再掉头是没有意义的，完全可以分好区间段，自己尽可能走完自己的那部分。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 区域赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分或三分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思维】20上海B</title>
      <link href="/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4%E3%80%9120%E4%B8%8A%E6%B5%B7B/"/>
      <url>/2022/01/26/%E7%AE%97%E6%B3%95/%E3%80%90%E6%80%9D%E7%BB%B4%E3%80%9120%E4%B8%8A%E6%B5%B7B/</url>
      
        <content type="html"><![CDATA[        <h1 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://ac.nowcoder.com/acm/contest/12561/B" >牛客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1>      <p>思维题</p><p>扫雷。让A矩阵和B矩阵中空格周围的雷数量之和相等。</p><p>既然给了两个矩阵嘛，就考虑一下两者的关系。</p><p>观察发现，其实雷的空的等级是一样的，把A矩阵中雷和空取反，发现空周围雷sum不变。</p><p>题目要求改变次数少于等于n*m的一半。</p><p>所以把A和A的反，分别与B对比，相异的数目少于等于一半的就是最终答案。</p><p>即输出A或者A的反。所以必定有解。</p><p>队友想出了异或，啧啧异曲同工啊。</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1>      ]]></content>
      
      
      <categories>
          
          <category> XCPC </category>
          
          <category> 题目 </category>
          
          <category> 区域赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
